// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daprclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_daprclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_daprclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_daprclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_daprclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_daprclient_2eproto;
namespace daprclient {
class BindingEventEnvelope;
class BindingEventEnvelopeDefaultTypeInternal;
extern BindingEventEnvelopeDefaultTypeInternal _BindingEventEnvelope_default_instance_;
class BindingEventEnvelope_MetadataEntry_DoNotUse;
class BindingEventEnvelope_MetadataEntry_DoNotUseDefaultTypeInternal;
extern BindingEventEnvelope_MetadataEntry_DoNotUseDefaultTypeInternal _BindingEventEnvelope_MetadataEntry_DoNotUse_default_instance_;
class BindingResponseEnvelope;
class BindingResponseEnvelopeDefaultTypeInternal;
extern BindingResponseEnvelopeDefaultTypeInternal _BindingResponseEnvelope_default_instance_;
class CloudEventEnvelope;
class CloudEventEnvelopeDefaultTypeInternal;
extern CloudEventEnvelopeDefaultTypeInternal _CloudEventEnvelope_default_instance_;
class GetBindingsSubscriptionsEnvelope;
class GetBindingsSubscriptionsEnvelopeDefaultTypeInternal;
extern GetBindingsSubscriptionsEnvelopeDefaultTypeInternal _GetBindingsSubscriptionsEnvelope_default_instance_;
class GetTopicSubscriptionsEnvelope;
class GetTopicSubscriptionsEnvelopeDefaultTypeInternal;
extern GetTopicSubscriptionsEnvelopeDefaultTypeInternal _GetTopicSubscriptionsEnvelope_default_instance_;
class InvokeEnvelope;
class InvokeEnvelopeDefaultTypeInternal;
extern InvokeEnvelopeDefaultTypeInternal _InvokeEnvelope_default_instance_;
class InvokeEnvelope_MetadataEntry_DoNotUse;
class InvokeEnvelope_MetadataEntry_DoNotUseDefaultTypeInternal;
extern InvokeEnvelope_MetadataEntry_DoNotUseDefaultTypeInternal _InvokeEnvelope_MetadataEntry_DoNotUse_default_instance_;
class RetryPolicy;
class RetryPolicyDefaultTypeInternal;
extern RetryPolicyDefaultTypeInternal _RetryPolicy_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class StateOptions;
class StateOptionsDefaultTypeInternal;
extern StateOptionsDefaultTypeInternal _StateOptions_default_instance_;
class State_MetadataEntry_DoNotUse;
class State_MetadataEntry_DoNotUseDefaultTypeInternal;
extern State_MetadataEntry_DoNotUseDefaultTypeInternal _State_MetadataEntry_DoNotUse_default_instance_;
}  // namespace daprclient
PROTOBUF_NAMESPACE_OPEN
template<> ::daprclient::BindingEventEnvelope* Arena::CreateMaybeMessage<::daprclient::BindingEventEnvelope>(Arena*);
template<> ::daprclient::BindingEventEnvelope_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::daprclient::BindingEventEnvelope_MetadataEntry_DoNotUse>(Arena*);
template<> ::daprclient::BindingResponseEnvelope* Arena::CreateMaybeMessage<::daprclient::BindingResponseEnvelope>(Arena*);
template<> ::daprclient::CloudEventEnvelope* Arena::CreateMaybeMessage<::daprclient::CloudEventEnvelope>(Arena*);
template<> ::daprclient::GetBindingsSubscriptionsEnvelope* Arena::CreateMaybeMessage<::daprclient::GetBindingsSubscriptionsEnvelope>(Arena*);
template<> ::daprclient::GetTopicSubscriptionsEnvelope* Arena::CreateMaybeMessage<::daprclient::GetTopicSubscriptionsEnvelope>(Arena*);
template<> ::daprclient::InvokeEnvelope* Arena::CreateMaybeMessage<::daprclient::InvokeEnvelope>(Arena*);
template<> ::daprclient::InvokeEnvelope_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::daprclient::InvokeEnvelope_MetadataEntry_DoNotUse>(Arena*);
template<> ::daprclient::RetryPolicy* Arena::CreateMaybeMessage<::daprclient::RetryPolicy>(Arena*);
template<> ::daprclient::State* Arena::CreateMaybeMessage<::daprclient::State>(Arena*);
template<> ::daprclient::StateOptions* Arena::CreateMaybeMessage<::daprclient::StateOptions>(Arena*);
template<> ::daprclient::State_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::daprclient::State_MetadataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace daprclient {

// ===================================================================

class CloudEventEnvelope :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:daprclient.CloudEventEnvelope) */ {
 public:
  CloudEventEnvelope();
  virtual ~CloudEventEnvelope();

  CloudEventEnvelope(const CloudEventEnvelope& from);
  CloudEventEnvelope(CloudEventEnvelope&& from) noexcept
    : CloudEventEnvelope() {
    *this = ::std::move(from);
  }

  inline CloudEventEnvelope& operator=(const CloudEventEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudEventEnvelope& operator=(CloudEventEnvelope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloudEventEnvelope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudEventEnvelope* internal_default_instance() {
    return reinterpret_cast<const CloudEventEnvelope*>(
               &_CloudEventEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CloudEventEnvelope& a, CloudEventEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudEventEnvelope* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloudEventEnvelope* New() const final {
    return CreateMaybeMessage<CloudEventEnvelope>(nullptr);
  }

  CloudEventEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloudEventEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloudEventEnvelope& from);
  void MergeFrom(const CloudEventEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudEventEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "daprclient.CloudEventEnvelope";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_daprclient_2eproto);
    return ::descriptor_table_daprclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSourceFieldNumber = 2,
    kTypeFieldNumber = 3,
    kSpecVersionFieldNumber = 4,
    kDataContentTypeFieldNumber = 5,
    kTopicFieldNumber = 6,
    kDataFieldNumber = 7,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string source = 2;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string specVersion = 4;
  void clear_specversion();
  const std::string& specversion() const;
  void set_specversion(const std::string& value);
  void set_specversion(std::string&& value);
  void set_specversion(const char* value);
  void set_specversion(const char* value, size_t size);
  std::string* mutable_specversion();
  std::string* release_specversion();
  void set_allocated_specversion(std::string* specversion);
  private:
  const std::string& _internal_specversion() const;
  void _internal_set_specversion(const std::string& value);
  std::string* _internal_mutable_specversion();
  public:

  // string dataContentType = 5;
  void clear_datacontenttype();
  const std::string& datacontenttype() const;
  void set_datacontenttype(const std::string& value);
  void set_datacontenttype(std::string&& value);
  void set_datacontenttype(const char* value);
  void set_datacontenttype(const char* value, size_t size);
  std::string* mutable_datacontenttype();
  std::string* release_datacontenttype();
  void set_allocated_datacontenttype(std::string* datacontenttype);
  private:
  const std::string& _internal_datacontenttype() const;
  void _internal_set_datacontenttype(const std::string& value);
  std::string* _internal_mutable_datacontenttype();
  public:

  // string topic = 6;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // .google.protobuf.Any data = 7;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:daprclient.CloudEventEnvelope)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datacontenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_daprclient_2eproto;
};
// -------------------------------------------------------------------

class BindingEventEnvelope_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BindingEventEnvelope_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BindingEventEnvelope_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  BindingEventEnvelope_MetadataEntry_DoNotUse();
  BindingEventEnvelope_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BindingEventEnvelope_MetadataEntry_DoNotUse& other);
  static const BindingEventEnvelope_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BindingEventEnvelope_MetadataEntry_DoNotUse*>(&_BindingEventEnvelope_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "daprclient.BindingEventEnvelope.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "daprclient.BindingEventEnvelope.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_daprclient_2eproto);
    return ::descriptor_table_daprclient_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class BindingEventEnvelope :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:daprclient.BindingEventEnvelope) */ {
 public:
  BindingEventEnvelope();
  virtual ~BindingEventEnvelope();

  BindingEventEnvelope(const BindingEventEnvelope& from);
  BindingEventEnvelope(BindingEventEnvelope&& from) noexcept
    : BindingEventEnvelope() {
    *this = ::std::move(from);
  }

  inline BindingEventEnvelope& operator=(const BindingEventEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline BindingEventEnvelope& operator=(BindingEventEnvelope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BindingEventEnvelope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BindingEventEnvelope* internal_default_instance() {
    return reinterpret_cast<const BindingEventEnvelope*>(
               &_BindingEventEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BindingEventEnvelope& a, BindingEventEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(BindingEventEnvelope* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BindingEventEnvelope* New() const final {
    return CreateMaybeMessage<BindingEventEnvelope>(nullptr);
  }

  BindingEventEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BindingEventEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BindingEventEnvelope& from);
  void MergeFrom(const BindingEventEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindingEventEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "daprclient.BindingEventEnvelope";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_daprclient_2eproto);
    return ::descriptor_table_daprclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:daprclient.BindingEventEnvelope)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BindingEventEnvelope_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_daprclient_2eproto;
};
// -------------------------------------------------------------------

class BindingResponseEnvelope :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:daprclient.BindingResponseEnvelope) */ {
 public:
  BindingResponseEnvelope();
  virtual ~BindingResponseEnvelope();

  BindingResponseEnvelope(const BindingResponseEnvelope& from);
  BindingResponseEnvelope(BindingResponseEnvelope&& from) noexcept
    : BindingResponseEnvelope() {
    *this = ::std::move(from);
  }

  inline BindingResponseEnvelope& operator=(const BindingResponseEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline BindingResponseEnvelope& operator=(BindingResponseEnvelope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BindingResponseEnvelope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BindingResponseEnvelope* internal_default_instance() {
    return reinterpret_cast<const BindingResponseEnvelope*>(
               &_BindingResponseEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BindingResponseEnvelope& a, BindingResponseEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(BindingResponseEnvelope* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BindingResponseEnvelope* New() const final {
    return CreateMaybeMessage<BindingResponseEnvelope>(nullptr);
  }

  BindingResponseEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BindingResponseEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BindingResponseEnvelope& from);
  void MergeFrom(const BindingResponseEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindingResponseEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "daprclient.BindingResponseEnvelope";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_daprclient_2eproto);
    return ::descriptor_table_daprclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 2,
    kStateFieldNumber = 3,
    kConcurrencyFieldNumber = 4,
    kDataFieldNumber = 1,
  };
  // repeated string to = 2;
  int to_size() const;
  private:
  int _internal_to_size() const;
  public:
  void clear_to();
  const std::string& to(int index) const;
  std::string* mutable_to(int index);
  void set_to(int index, const std::string& value);
  void set_to(int index, std::string&& value);
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, size_t size);
  std::string* add_to();
  void add_to(const std::string& value);
  void add_to(std::string&& value);
  void add_to(const char* value);
  void add_to(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& to() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_to();
  private:
  const std::string& _internal_to(int index) const;
  std::string* _internal_add_to();
  public:

  // repeated .daprclient.State state = 3;
  int state_size() const;
  private:
  int _internal_state_size() const;
  public:
  void clear_state();
  ::daprclient::State* mutable_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::daprclient::State >*
      mutable_state();
  private:
  const ::daprclient::State& _internal_state(int index) const;
  ::daprclient::State* _internal_add_state();
  public:
  const ::daprclient::State& state(int index) const;
  ::daprclient::State* add_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::daprclient::State >&
      state() const;

  // string concurrency = 4;
  void clear_concurrency();
  const std::string& concurrency() const;
  void set_concurrency(const std::string& value);
  void set_concurrency(std::string&& value);
  void set_concurrency(const char* value);
  void set_concurrency(const char* value, size_t size);
  std::string* mutable_concurrency();
  std::string* release_concurrency();
  void set_allocated_concurrency(std::string* concurrency);
  private:
  const std::string& _internal_concurrency() const;
  void _internal_set_concurrency(const std::string& value);
  std::string* _internal_mutable_concurrency();
  public:

  // .google.protobuf.Any data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:daprclient.BindingResponseEnvelope)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> to_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::daprclient::State > state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concurrency_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_daprclient_2eproto;
};
// -------------------------------------------------------------------

class InvokeEnvelope_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvokeEnvelope_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvokeEnvelope_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InvokeEnvelope_MetadataEntry_DoNotUse();
  InvokeEnvelope_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InvokeEnvelope_MetadataEntry_DoNotUse& other);
  static const InvokeEnvelope_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InvokeEnvelope_MetadataEntry_DoNotUse*>(&_InvokeEnvelope_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "daprclient.InvokeEnvelope.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "daprclient.InvokeEnvelope.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_daprclient_2eproto);
    return ::descriptor_table_daprclient_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class InvokeEnvelope :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:daprclient.InvokeEnvelope) */ {
 public:
  InvokeEnvelope();
  virtual ~InvokeEnvelope();

  InvokeEnvelope(const InvokeEnvelope& from);
  InvokeEnvelope(InvokeEnvelope&& from) noexcept
    : InvokeEnvelope() {
    *this = ::std::move(from);
  }

  inline InvokeEnvelope& operator=(const InvokeEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvokeEnvelope& operator=(InvokeEnvelope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvokeEnvelope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvokeEnvelope* internal_default_instance() {
    return reinterpret_cast<const InvokeEnvelope*>(
               &_InvokeEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InvokeEnvelope& a, InvokeEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeEnvelope* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvokeEnvelope* New() const final {
    return CreateMaybeMessage<InvokeEnvelope>(nullptr);
  }

  InvokeEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvokeEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvokeEnvelope& from);
  void MergeFrom(const InvokeEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvokeEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "daprclient.InvokeEnvelope";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_daprclient_2eproto);
    return ::descriptor_table_daprclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kMethodFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:daprclient.InvokeEnvelope)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InvokeEnvelope_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_daprclient_2eproto;
};
// -------------------------------------------------------------------

class GetTopicSubscriptionsEnvelope :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:daprclient.GetTopicSubscriptionsEnvelope) */ {
 public:
  GetTopicSubscriptionsEnvelope();
  virtual ~GetTopicSubscriptionsEnvelope();

  GetTopicSubscriptionsEnvelope(const GetTopicSubscriptionsEnvelope& from);
  GetTopicSubscriptionsEnvelope(GetTopicSubscriptionsEnvelope&& from) noexcept
    : GetTopicSubscriptionsEnvelope() {
    *this = ::std::move(from);
  }

  inline GetTopicSubscriptionsEnvelope& operator=(const GetTopicSubscriptionsEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTopicSubscriptionsEnvelope& operator=(GetTopicSubscriptionsEnvelope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTopicSubscriptionsEnvelope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTopicSubscriptionsEnvelope* internal_default_instance() {
    return reinterpret_cast<const GetTopicSubscriptionsEnvelope*>(
               &_GetTopicSubscriptionsEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetTopicSubscriptionsEnvelope& a, GetTopicSubscriptionsEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTopicSubscriptionsEnvelope* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTopicSubscriptionsEnvelope* New() const final {
    return CreateMaybeMessage<GetTopicSubscriptionsEnvelope>(nullptr);
  }

  GetTopicSubscriptionsEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTopicSubscriptionsEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTopicSubscriptionsEnvelope& from);
  void MergeFrom(const GetTopicSubscriptionsEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTopicSubscriptionsEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "daprclient.GetTopicSubscriptionsEnvelope";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_daprclient_2eproto);
    return ::descriptor_table_daprclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 1,
  };
  // repeated string topics = 1;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  const std::string& topics(int index) const;
  std::string* mutable_topics(int index);
  void set_topics(int index, const std::string& value);
  void set_topics(int index, std::string&& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const char* value, size_t size);
  std::string* add_topics();
  void add_topics(const std::string& value);
  void add_topics(std::string&& value);
  void add_topics(const char* value);
  void add_topics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topics();
  private:
  const std::string& _internal_topics(int index) const;
  std::string* _internal_add_topics();
  public:

  // @@protoc_insertion_point(class_scope:daprclient.GetTopicSubscriptionsEnvelope)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_daprclient_2eproto;
};
// -------------------------------------------------------------------

class GetBindingsSubscriptionsEnvelope :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:daprclient.GetBindingsSubscriptionsEnvelope) */ {
 public:
  GetBindingsSubscriptionsEnvelope();
  virtual ~GetBindingsSubscriptionsEnvelope();

  GetBindingsSubscriptionsEnvelope(const GetBindingsSubscriptionsEnvelope& from);
  GetBindingsSubscriptionsEnvelope(GetBindingsSubscriptionsEnvelope&& from) noexcept
    : GetBindingsSubscriptionsEnvelope() {
    *this = ::std::move(from);
  }

  inline GetBindingsSubscriptionsEnvelope& operator=(const GetBindingsSubscriptionsEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBindingsSubscriptionsEnvelope& operator=(GetBindingsSubscriptionsEnvelope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBindingsSubscriptionsEnvelope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBindingsSubscriptionsEnvelope* internal_default_instance() {
    return reinterpret_cast<const GetBindingsSubscriptionsEnvelope*>(
               &_GetBindingsSubscriptionsEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetBindingsSubscriptionsEnvelope& a, GetBindingsSubscriptionsEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBindingsSubscriptionsEnvelope* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBindingsSubscriptionsEnvelope* New() const final {
    return CreateMaybeMessage<GetBindingsSubscriptionsEnvelope>(nullptr);
  }

  GetBindingsSubscriptionsEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBindingsSubscriptionsEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBindingsSubscriptionsEnvelope& from);
  void MergeFrom(const GetBindingsSubscriptionsEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBindingsSubscriptionsEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "daprclient.GetBindingsSubscriptionsEnvelope";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_daprclient_2eproto);
    return ::descriptor_table_daprclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBindingsFieldNumber = 1,
  };
  // repeated string bindings = 1;
  int bindings_size() const;
  private:
  int _internal_bindings_size() const;
  public:
  void clear_bindings();
  const std::string& bindings(int index) const;
  std::string* mutable_bindings(int index);
  void set_bindings(int index, const std::string& value);
  void set_bindings(int index, std::string&& value);
  void set_bindings(int index, const char* value);
  void set_bindings(int index, const char* value, size_t size);
  std::string* add_bindings();
  void add_bindings(const std::string& value);
  void add_bindings(std::string&& value);
  void add_bindings(const char* value);
  void add_bindings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bindings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bindings();
  private:
  const std::string& _internal_bindings(int index) const;
  std::string* _internal_add_bindings();
  public:

  // @@protoc_insertion_point(class_scope:daprclient.GetBindingsSubscriptionsEnvelope)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bindings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_daprclient_2eproto;
};
// -------------------------------------------------------------------

class State_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<State_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<State_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  State_MetadataEntry_DoNotUse();
  State_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const State_MetadataEntry_DoNotUse& other);
  static const State_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const State_MetadataEntry_DoNotUse*>(&_State_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "daprclient.State.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "daprclient.State.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_daprclient_2eproto);
    return ::descriptor_table_daprclient_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class State :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:daprclient.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "daprclient.State";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_daprclient_2eproto);
    return ::descriptor_table_daprclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 4,
    kKeyFieldNumber = 1,
    kEtagFieldNumber = 3,
    kValueFieldNumber = 2,
    kOptionsFieldNumber = 5,
  };
  // map<string, string> metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string etag = 3;
  void clear_etag();
  const std::string& etag() const;
  void set_etag(const std::string& value);
  void set_etag(std::string&& value);
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  std::string* mutable_etag();
  std::string* release_etag();
  void set_allocated_etag(std::string* etag);
  private:
  const std::string& _internal_etag() const;
  void _internal_set_etag(const std::string& value);
  std::string* _internal_mutable_etag();
  public:

  // .google.protobuf.Any value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const PROTOBUF_NAMESPACE_ID::Any& value() const;
  PROTOBUF_NAMESPACE_ID::Any* release_value();
  PROTOBUF_NAMESPACE_ID::Any* mutable_value();
  void set_allocated_value(PROTOBUF_NAMESPACE_ID::Any* value);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_value() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_value();
  public:

  // .daprclient.StateOptions options = 5;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::daprclient::StateOptions& options() const;
  ::daprclient::StateOptions* release_options();
  ::daprclient::StateOptions* mutable_options();
  void set_allocated_options(::daprclient::StateOptions* options);
  private:
  const ::daprclient::StateOptions& _internal_options() const;
  ::daprclient::StateOptions* _internal_mutable_options();
  public:

  // @@protoc_insertion_point(class_scope:daprclient.State)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      State_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
  PROTOBUF_NAMESPACE_ID::Any* value_;
  ::daprclient::StateOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_daprclient_2eproto;
};
// -------------------------------------------------------------------

class StateOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:daprclient.StateOptions) */ {
 public:
  StateOptions();
  virtual ~StateOptions();

  StateOptions(const StateOptions& from);
  StateOptions(StateOptions&& from) noexcept
    : StateOptions() {
    *this = ::std::move(from);
  }

  inline StateOptions& operator=(const StateOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateOptions& operator=(StateOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StateOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateOptions* internal_default_instance() {
    return reinterpret_cast<const StateOptions*>(
               &_StateOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StateOptions& a, StateOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(StateOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateOptions* New() const final {
    return CreateMaybeMessage<StateOptions>(nullptr);
  }

  StateOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StateOptions& from);
  void MergeFrom(const StateOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "daprclient.StateOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_daprclient_2eproto);
    return ::descriptor_table_daprclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConcurrencyFieldNumber = 1,
    kConsistencyFieldNumber = 2,
    kRetryPolicyFieldNumber = 3,
  };
  // string concurrency = 1;
  void clear_concurrency();
  const std::string& concurrency() const;
  void set_concurrency(const std::string& value);
  void set_concurrency(std::string&& value);
  void set_concurrency(const char* value);
  void set_concurrency(const char* value, size_t size);
  std::string* mutable_concurrency();
  std::string* release_concurrency();
  void set_allocated_concurrency(std::string* concurrency);
  private:
  const std::string& _internal_concurrency() const;
  void _internal_set_concurrency(const std::string& value);
  std::string* _internal_mutable_concurrency();
  public:

  // string consistency = 2;
  void clear_consistency();
  const std::string& consistency() const;
  void set_consistency(const std::string& value);
  void set_consistency(std::string&& value);
  void set_consistency(const char* value);
  void set_consistency(const char* value, size_t size);
  std::string* mutable_consistency();
  std::string* release_consistency();
  void set_allocated_consistency(std::string* consistency);
  private:
  const std::string& _internal_consistency() const;
  void _internal_set_consistency(const std::string& value);
  std::string* _internal_mutable_consistency();
  public:

  // .daprclient.RetryPolicy retryPolicy = 3;
  bool has_retrypolicy() const;
  private:
  bool _internal_has_retrypolicy() const;
  public:
  void clear_retrypolicy();
  const ::daprclient::RetryPolicy& retrypolicy() const;
  ::daprclient::RetryPolicy* release_retrypolicy();
  ::daprclient::RetryPolicy* mutable_retrypolicy();
  void set_allocated_retrypolicy(::daprclient::RetryPolicy* retrypolicy);
  private:
  const ::daprclient::RetryPolicy& _internal_retrypolicy() const;
  ::daprclient::RetryPolicy* _internal_mutable_retrypolicy();
  public:

  // @@protoc_insertion_point(class_scope:daprclient.StateOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concurrency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consistency_;
  ::daprclient::RetryPolicy* retrypolicy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_daprclient_2eproto;
};
// -------------------------------------------------------------------

class RetryPolicy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:daprclient.RetryPolicy) */ {
 public:
  RetryPolicy();
  virtual ~RetryPolicy();

  RetryPolicy(const RetryPolicy& from);
  RetryPolicy(RetryPolicy&& from) noexcept
    : RetryPolicy() {
    *this = ::std::move(from);
  }

  inline RetryPolicy& operator=(const RetryPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetryPolicy& operator=(RetryPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetryPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetryPolicy* internal_default_instance() {
    return reinterpret_cast<const RetryPolicy*>(
               &_RetryPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RetryPolicy& a, RetryPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(RetryPolicy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetryPolicy* New() const final {
    return CreateMaybeMessage<RetryPolicy>(nullptr);
  }

  RetryPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetryPolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetryPolicy& from);
  void MergeFrom(const RetryPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetryPolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "daprclient.RetryPolicy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_daprclient_2eproto);
    return ::descriptor_table_daprclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatternFieldNumber = 2,
    kIntervalFieldNumber = 3,
    kThresholdFieldNumber = 1,
  };
  // string pattern = 2;
  void clear_pattern();
  const std::string& pattern() const;
  void set_pattern(const std::string& value);
  void set_pattern(std::string&& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  std::string* mutable_pattern();
  std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // .google.protobuf.Duration interval = 3;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const PROTOBUF_NAMESPACE_ID::Duration& interval() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_interval();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_interval();
  void set_allocated_interval(PROTOBUF_NAMESPACE_ID::Duration* interval);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_interval() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_interval();
  public:

  // int32 threshold = 1;
  void clear_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 threshold() const;
  void set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_threshold() const;
  void _internal_set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:daprclient.RetryPolicy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  PROTOBUF_NAMESPACE_ID::Duration* interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_daprclient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CloudEventEnvelope

// string id = 1;
inline void CloudEventEnvelope::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CloudEventEnvelope::id() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.id)
  return _internal_id();
}
inline void CloudEventEnvelope::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:daprclient.CloudEventEnvelope.id)
}
inline std::string* CloudEventEnvelope::mutable_id() {
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.id)
  return _internal_mutable_id();
}
inline const std::string& CloudEventEnvelope::_internal_id() const {
  return id_.GetNoArena();
}
inline void CloudEventEnvelope::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CloudEventEnvelope::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.CloudEventEnvelope.id)
}
inline void CloudEventEnvelope::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.CloudEventEnvelope.id)
}
inline void CloudEventEnvelope::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.CloudEventEnvelope.id)
}
inline std::string* CloudEventEnvelope::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloudEventEnvelope::release_id() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.id)
}

// string source = 2;
inline void CloudEventEnvelope::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CloudEventEnvelope::source() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.source)
  return _internal_source();
}
inline void CloudEventEnvelope::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:daprclient.CloudEventEnvelope.source)
}
inline std::string* CloudEventEnvelope::mutable_source() {
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.source)
  return _internal_mutable_source();
}
inline const std::string& CloudEventEnvelope::_internal_source() const {
  return source_.GetNoArena();
}
inline void CloudEventEnvelope::_internal_set_source(const std::string& value) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CloudEventEnvelope::set_source(std::string&& value) {
  
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.CloudEventEnvelope.source)
}
inline void CloudEventEnvelope::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.CloudEventEnvelope.source)
}
inline void CloudEventEnvelope::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.CloudEventEnvelope.source)
}
inline std::string* CloudEventEnvelope::_internal_mutable_source() {
  
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloudEventEnvelope::release_source() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.source)
  
  return source_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.source)
}

// string type = 3;
inline void CloudEventEnvelope::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CloudEventEnvelope::type() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.type)
  return _internal_type();
}
inline void CloudEventEnvelope::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:daprclient.CloudEventEnvelope.type)
}
inline std::string* CloudEventEnvelope::mutable_type() {
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.type)
  return _internal_mutable_type();
}
inline const std::string& CloudEventEnvelope::_internal_type() const {
  return type_.GetNoArena();
}
inline void CloudEventEnvelope::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CloudEventEnvelope::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.CloudEventEnvelope.type)
}
inline void CloudEventEnvelope::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.CloudEventEnvelope.type)
}
inline void CloudEventEnvelope::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.CloudEventEnvelope.type)
}
inline std::string* CloudEventEnvelope::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloudEventEnvelope::release_type() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.type)
}

// string specVersion = 4;
inline void CloudEventEnvelope::clear_specversion() {
  specversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CloudEventEnvelope::specversion() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.specVersion)
  return _internal_specversion();
}
inline void CloudEventEnvelope::set_specversion(const std::string& value) {
  _internal_set_specversion(value);
  // @@protoc_insertion_point(field_set:daprclient.CloudEventEnvelope.specVersion)
}
inline std::string* CloudEventEnvelope::mutable_specversion() {
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.specVersion)
  return _internal_mutable_specversion();
}
inline const std::string& CloudEventEnvelope::_internal_specversion() const {
  return specversion_.GetNoArena();
}
inline void CloudEventEnvelope::_internal_set_specversion(const std::string& value) {
  
  specversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CloudEventEnvelope::set_specversion(std::string&& value) {
  
  specversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.CloudEventEnvelope.specVersion)
}
inline void CloudEventEnvelope::set_specversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  specversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.CloudEventEnvelope.specVersion)
}
inline void CloudEventEnvelope::set_specversion(const char* value, size_t size) {
  
  specversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.CloudEventEnvelope.specVersion)
}
inline std::string* CloudEventEnvelope::_internal_mutable_specversion() {
  
  return specversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloudEventEnvelope::release_specversion() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.specVersion)
  
  return specversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_allocated_specversion(std::string* specversion) {
  if (specversion != nullptr) {
    
  } else {
    
  }
  specversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), specversion);
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.specVersion)
}

// string dataContentType = 5;
inline void CloudEventEnvelope::clear_datacontenttype() {
  datacontenttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CloudEventEnvelope::datacontenttype() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.dataContentType)
  return _internal_datacontenttype();
}
inline void CloudEventEnvelope::set_datacontenttype(const std::string& value) {
  _internal_set_datacontenttype(value);
  // @@protoc_insertion_point(field_set:daprclient.CloudEventEnvelope.dataContentType)
}
inline std::string* CloudEventEnvelope::mutable_datacontenttype() {
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.dataContentType)
  return _internal_mutable_datacontenttype();
}
inline const std::string& CloudEventEnvelope::_internal_datacontenttype() const {
  return datacontenttype_.GetNoArena();
}
inline void CloudEventEnvelope::_internal_set_datacontenttype(const std::string& value) {
  
  datacontenttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CloudEventEnvelope::set_datacontenttype(std::string&& value) {
  
  datacontenttype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.CloudEventEnvelope.dataContentType)
}
inline void CloudEventEnvelope::set_datacontenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datacontenttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.CloudEventEnvelope.dataContentType)
}
inline void CloudEventEnvelope::set_datacontenttype(const char* value, size_t size) {
  
  datacontenttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.CloudEventEnvelope.dataContentType)
}
inline std::string* CloudEventEnvelope::_internal_mutable_datacontenttype() {
  
  return datacontenttype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloudEventEnvelope::release_datacontenttype() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.dataContentType)
  
  return datacontenttype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_allocated_datacontenttype(std::string* datacontenttype) {
  if (datacontenttype != nullptr) {
    
  } else {
    
  }
  datacontenttype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datacontenttype);
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.dataContentType)
}

// string topic = 6;
inline void CloudEventEnvelope::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CloudEventEnvelope::topic() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.topic)
  return _internal_topic();
}
inline void CloudEventEnvelope::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:daprclient.CloudEventEnvelope.topic)
}
inline std::string* CloudEventEnvelope::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.topic)
  return _internal_mutable_topic();
}
inline const std::string& CloudEventEnvelope::_internal_topic() const {
  return topic_.GetNoArena();
}
inline void CloudEventEnvelope::_internal_set_topic(const std::string& value) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CloudEventEnvelope::set_topic(std::string&& value) {
  
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.CloudEventEnvelope.topic)
}
inline void CloudEventEnvelope::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.CloudEventEnvelope.topic)
}
inline void CloudEventEnvelope::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.CloudEventEnvelope.topic)
}
inline std::string* CloudEventEnvelope::_internal_mutable_topic() {
  
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloudEventEnvelope::release_topic() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.topic)
  
  return topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.topic)
}

// .google.protobuf.Any data = 7;
inline bool CloudEventEnvelope::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool CloudEventEnvelope::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& CloudEventEnvelope::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& CloudEventEnvelope::data() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.data)
  return _internal_data();
}
inline PROTOBUF_NAMESPACE_ID::Any* CloudEventEnvelope::release_data() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* CloudEventEnvelope::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* CloudEventEnvelope::mutable_data() {
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.data)
  return _internal_mutable_data();
}
inline void CloudEventEnvelope::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BindingEventEnvelope

// string name = 1;
inline void BindingEventEnvelope::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BindingEventEnvelope::name() const {
  // @@protoc_insertion_point(field_get:daprclient.BindingEventEnvelope.name)
  return _internal_name();
}
inline void BindingEventEnvelope::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:daprclient.BindingEventEnvelope.name)
}
inline std::string* BindingEventEnvelope::mutable_name() {
  // @@protoc_insertion_point(field_mutable:daprclient.BindingEventEnvelope.name)
  return _internal_mutable_name();
}
inline const std::string& BindingEventEnvelope::_internal_name() const {
  return name_.GetNoArena();
}
inline void BindingEventEnvelope::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BindingEventEnvelope::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.BindingEventEnvelope.name)
}
inline void BindingEventEnvelope::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.BindingEventEnvelope.name)
}
inline void BindingEventEnvelope::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.BindingEventEnvelope.name)
}
inline std::string* BindingEventEnvelope::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BindingEventEnvelope::release_name() {
  // @@protoc_insertion_point(field_release:daprclient.BindingEventEnvelope.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BindingEventEnvelope::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:daprclient.BindingEventEnvelope.name)
}

// .google.protobuf.Any data = 2;
inline bool BindingEventEnvelope::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool BindingEventEnvelope::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& BindingEventEnvelope::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& BindingEventEnvelope::data() const {
  // @@protoc_insertion_point(field_get:daprclient.BindingEventEnvelope.data)
  return _internal_data();
}
inline PROTOBUF_NAMESPACE_ID::Any* BindingEventEnvelope::release_data() {
  // @@protoc_insertion_point(field_release:daprclient.BindingEventEnvelope.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* BindingEventEnvelope::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* BindingEventEnvelope::mutable_data() {
  // @@protoc_insertion_point(field_mutable:daprclient.BindingEventEnvelope.data)
  return _internal_mutable_data();
}
inline void BindingEventEnvelope::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:daprclient.BindingEventEnvelope.data)
}

// map<string, string> metadata = 3;
inline int BindingEventEnvelope::_internal_metadata_size() const {
  return metadata_.size();
}
inline int BindingEventEnvelope::metadata_size() const {
  return _internal_metadata_size();
}
inline void BindingEventEnvelope::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BindingEventEnvelope::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BindingEventEnvelope::metadata() const {
  // @@protoc_insertion_point(field_map:daprclient.BindingEventEnvelope.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BindingEventEnvelope::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BindingEventEnvelope::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:daprclient.BindingEventEnvelope.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// BindingResponseEnvelope

// .google.protobuf.Any data = 1;
inline bool BindingResponseEnvelope::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool BindingResponseEnvelope::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& BindingResponseEnvelope::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& BindingResponseEnvelope::data() const {
  // @@protoc_insertion_point(field_get:daprclient.BindingResponseEnvelope.data)
  return _internal_data();
}
inline PROTOBUF_NAMESPACE_ID::Any* BindingResponseEnvelope::release_data() {
  // @@protoc_insertion_point(field_release:daprclient.BindingResponseEnvelope.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* BindingResponseEnvelope::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* BindingResponseEnvelope::mutable_data() {
  // @@protoc_insertion_point(field_mutable:daprclient.BindingResponseEnvelope.data)
  return _internal_mutable_data();
}
inline void BindingResponseEnvelope::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:daprclient.BindingResponseEnvelope.data)
}

// repeated string to = 2;
inline int BindingResponseEnvelope::_internal_to_size() const {
  return to_.size();
}
inline int BindingResponseEnvelope::to_size() const {
  return _internal_to_size();
}
inline void BindingResponseEnvelope::clear_to() {
  to_.Clear();
}
inline std::string* BindingResponseEnvelope::add_to() {
  // @@protoc_insertion_point(field_add_mutable:daprclient.BindingResponseEnvelope.to)
  return _internal_add_to();
}
inline const std::string& BindingResponseEnvelope::_internal_to(int index) const {
  return to_.Get(index);
}
inline const std::string& BindingResponseEnvelope::to(int index) const {
  // @@protoc_insertion_point(field_get:daprclient.BindingResponseEnvelope.to)
  return _internal_to(index);
}
inline std::string* BindingResponseEnvelope::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:daprclient.BindingResponseEnvelope.to)
  return to_.Mutable(index);
}
inline void BindingResponseEnvelope::set_to(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:daprclient.BindingResponseEnvelope.to)
  to_.Mutable(index)->assign(value);
}
inline void BindingResponseEnvelope::set_to(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:daprclient.BindingResponseEnvelope.to)
  to_.Mutable(index)->assign(std::move(value));
}
inline void BindingResponseEnvelope::set_to(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:daprclient.BindingResponseEnvelope.to)
}
inline void BindingResponseEnvelope::set_to(int index, const char* value, size_t size) {
  to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:daprclient.BindingResponseEnvelope.to)
}
inline std::string* BindingResponseEnvelope::_internal_add_to() {
  return to_.Add();
}
inline void BindingResponseEnvelope::add_to(const std::string& value) {
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:daprclient.BindingResponseEnvelope.to)
}
inline void BindingResponseEnvelope::add_to(std::string&& value) {
  to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:daprclient.BindingResponseEnvelope.to)
}
inline void BindingResponseEnvelope::add_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:daprclient.BindingResponseEnvelope.to)
}
inline void BindingResponseEnvelope::add_to(const char* value, size_t size) {
  to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:daprclient.BindingResponseEnvelope.to)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BindingResponseEnvelope::to() const {
  // @@protoc_insertion_point(field_list:daprclient.BindingResponseEnvelope.to)
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BindingResponseEnvelope::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:daprclient.BindingResponseEnvelope.to)
  return &to_;
}

// repeated .daprclient.State state = 3;
inline int BindingResponseEnvelope::_internal_state_size() const {
  return state_.size();
}
inline int BindingResponseEnvelope::state_size() const {
  return _internal_state_size();
}
inline void BindingResponseEnvelope::clear_state() {
  state_.Clear();
}
inline ::daprclient::State* BindingResponseEnvelope::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:daprclient.BindingResponseEnvelope.state)
  return state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::daprclient::State >*
BindingResponseEnvelope::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:daprclient.BindingResponseEnvelope.state)
  return &state_;
}
inline const ::daprclient::State& BindingResponseEnvelope::_internal_state(int index) const {
  return state_.Get(index);
}
inline const ::daprclient::State& BindingResponseEnvelope::state(int index) const {
  // @@protoc_insertion_point(field_get:daprclient.BindingResponseEnvelope.state)
  return _internal_state(index);
}
inline ::daprclient::State* BindingResponseEnvelope::_internal_add_state() {
  return state_.Add();
}
inline ::daprclient::State* BindingResponseEnvelope::add_state() {
  // @@protoc_insertion_point(field_add:daprclient.BindingResponseEnvelope.state)
  return _internal_add_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::daprclient::State >&
BindingResponseEnvelope::state() const {
  // @@protoc_insertion_point(field_list:daprclient.BindingResponseEnvelope.state)
  return state_;
}

// string concurrency = 4;
inline void BindingResponseEnvelope::clear_concurrency() {
  concurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BindingResponseEnvelope::concurrency() const {
  // @@protoc_insertion_point(field_get:daprclient.BindingResponseEnvelope.concurrency)
  return _internal_concurrency();
}
inline void BindingResponseEnvelope::set_concurrency(const std::string& value) {
  _internal_set_concurrency(value);
  // @@protoc_insertion_point(field_set:daprclient.BindingResponseEnvelope.concurrency)
}
inline std::string* BindingResponseEnvelope::mutable_concurrency() {
  // @@protoc_insertion_point(field_mutable:daprclient.BindingResponseEnvelope.concurrency)
  return _internal_mutable_concurrency();
}
inline const std::string& BindingResponseEnvelope::_internal_concurrency() const {
  return concurrency_.GetNoArena();
}
inline void BindingResponseEnvelope::_internal_set_concurrency(const std::string& value) {
  
  concurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BindingResponseEnvelope::set_concurrency(std::string&& value) {
  
  concurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.BindingResponseEnvelope.concurrency)
}
inline void BindingResponseEnvelope::set_concurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.BindingResponseEnvelope.concurrency)
}
inline void BindingResponseEnvelope::set_concurrency(const char* value, size_t size) {
  
  concurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.BindingResponseEnvelope.concurrency)
}
inline std::string* BindingResponseEnvelope::_internal_mutable_concurrency() {
  
  return concurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BindingResponseEnvelope::release_concurrency() {
  // @@protoc_insertion_point(field_release:daprclient.BindingResponseEnvelope.concurrency)
  
  return concurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BindingResponseEnvelope::set_allocated_concurrency(std::string* concurrency) {
  if (concurrency != nullptr) {
    
  } else {
    
  }
  concurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concurrency);
  // @@protoc_insertion_point(field_set_allocated:daprclient.BindingResponseEnvelope.concurrency)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InvokeEnvelope

// string method = 1;
inline void InvokeEnvelope::clear_method() {
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvokeEnvelope::method() const {
  // @@protoc_insertion_point(field_get:daprclient.InvokeEnvelope.method)
  return _internal_method();
}
inline void InvokeEnvelope::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:daprclient.InvokeEnvelope.method)
}
inline std::string* InvokeEnvelope::mutable_method() {
  // @@protoc_insertion_point(field_mutable:daprclient.InvokeEnvelope.method)
  return _internal_mutable_method();
}
inline const std::string& InvokeEnvelope::_internal_method() const {
  return method_.GetNoArena();
}
inline void InvokeEnvelope::_internal_set_method(const std::string& value) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvokeEnvelope::set_method(std::string&& value) {
  
  method_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.InvokeEnvelope.method)
}
inline void InvokeEnvelope::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.InvokeEnvelope.method)
}
inline void InvokeEnvelope::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.InvokeEnvelope.method)
}
inline std::string* InvokeEnvelope::_internal_mutable_method() {
  
  return method_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvokeEnvelope::release_method() {
  // @@protoc_insertion_point(field_release:daprclient.InvokeEnvelope.method)
  
  return method_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvokeEnvelope::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:daprclient.InvokeEnvelope.method)
}

// .google.protobuf.Any data = 2;
inline bool InvokeEnvelope::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool InvokeEnvelope::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& InvokeEnvelope::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& InvokeEnvelope::data() const {
  // @@protoc_insertion_point(field_get:daprclient.InvokeEnvelope.data)
  return _internal_data();
}
inline PROTOBUF_NAMESPACE_ID::Any* InvokeEnvelope::release_data() {
  // @@protoc_insertion_point(field_release:daprclient.InvokeEnvelope.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* InvokeEnvelope::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* InvokeEnvelope::mutable_data() {
  // @@protoc_insertion_point(field_mutable:daprclient.InvokeEnvelope.data)
  return _internal_mutable_data();
}
inline void InvokeEnvelope::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:daprclient.InvokeEnvelope.data)
}

// map<string, string> metadata = 3;
inline int InvokeEnvelope::_internal_metadata_size() const {
  return metadata_.size();
}
inline int InvokeEnvelope::metadata_size() const {
  return _internal_metadata_size();
}
inline void InvokeEnvelope::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InvokeEnvelope::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InvokeEnvelope::metadata() const {
  // @@protoc_insertion_point(field_map:daprclient.InvokeEnvelope.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InvokeEnvelope::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InvokeEnvelope::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:daprclient.InvokeEnvelope.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// GetTopicSubscriptionsEnvelope

// repeated string topics = 1;
inline int GetTopicSubscriptionsEnvelope::_internal_topics_size() const {
  return topics_.size();
}
inline int GetTopicSubscriptionsEnvelope::topics_size() const {
  return _internal_topics_size();
}
inline void GetTopicSubscriptionsEnvelope::clear_topics() {
  topics_.Clear();
}
inline std::string* GetTopicSubscriptionsEnvelope::add_topics() {
  // @@protoc_insertion_point(field_add_mutable:daprclient.GetTopicSubscriptionsEnvelope.topics)
  return _internal_add_topics();
}
inline const std::string& GetTopicSubscriptionsEnvelope::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const std::string& GetTopicSubscriptionsEnvelope::topics(int index) const {
  // @@protoc_insertion_point(field_get:daprclient.GetTopicSubscriptionsEnvelope.topics)
  return _internal_topics(index);
}
inline std::string* GetTopicSubscriptionsEnvelope::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:daprclient.GetTopicSubscriptionsEnvelope.topics)
  return topics_.Mutable(index);
}
inline void GetTopicSubscriptionsEnvelope::set_topics(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:daprclient.GetTopicSubscriptionsEnvelope.topics)
  topics_.Mutable(index)->assign(value);
}
inline void GetTopicSubscriptionsEnvelope::set_topics(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:daprclient.GetTopicSubscriptionsEnvelope.topics)
  topics_.Mutable(index)->assign(std::move(value));
}
inline void GetTopicSubscriptionsEnvelope::set_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:daprclient.GetTopicSubscriptionsEnvelope.topics)
}
inline void GetTopicSubscriptionsEnvelope::set_topics(int index, const char* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:daprclient.GetTopicSubscriptionsEnvelope.topics)
}
inline std::string* GetTopicSubscriptionsEnvelope::_internal_add_topics() {
  return topics_.Add();
}
inline void GetTopicSubscriptionsEnvelope::add_topics(const std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:daprclient.GetTopicSubscriptionsEnvelope.topics)
}
inline void GetTopicSubscriptionsEnvelope::add_topics(std::string&& value) {
  topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:daprclient.GetTopicSubscriptionsEnvelope.topics)
}
inline void GetTopicSubscriptionsEnvelope::add_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:daprclient.GetTopicSubscriptionsEnvelope.topics)
}
inline void GetTopicSubscriptionsEnvelope::add_topics(const char* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:daprclient.GetTopicSubscriptionsEnvelope.topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTopicSubscriptionsEnvelope::topics() const {
  // @@protoc_insertion_point(field_list:daprclient.GetTopicSubscriptionsEnvelope.topics)
  return topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTopicSubscriptionsEnvelope::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:daprclient.GetTopicSubscriptionsEnvelope.topics)
  return &topics_;
}

// -------------------------------------------------------------------

// GetBindingsSubscriptionsEnvelope

// repeated string bindings = 1;
inline int GetBindingsSubscriptionsEnvelope::_internal_bindings_size() const {
  return bindings_.size();
}
inline int GetBindingsSubscriptionsEnvelope::bindings_size() const {
  return _internal_bindings_size();
}
inline void GetBindingsSubscriptionsEnvelope::clear_bindings() {
  bindings_.Clear();
}
inline std::string* GetBindingsSubscriptionsEnvelope::add_bindings() {
  // @@protoc_insertion_point(field_add_mutable:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
  return _internal_add_bindings();
}
inline const std::string& GetBindingsSubscriptionsEnvelope::_internal_bindings(int index) const {
  return bindings_.Get(index);
}
inline const std::string& GetBindingsSubscriptionsEnvelope::bindings(int index) const {
  // @@protoc_insertion_point(field_get:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
  return _internal_bindings(index);
}
inline std::string* GetBindingsSubscriptionsEnvelope::mutable_bindings(int index) {
  // @@protoc_insertion_point(field_mutable:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
  return bindings_.Mutable(index);
}
inline void GetBindingsSubscriptionsEnvelope::set_bindings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
  bindings_.Mutable(index)->assign(value);
}
inline void GetBindingsSubscriptionsEnvelope::set_bindings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
  bindings_.Mutable(index)->assign(std::move(value));
}
inline void GetBindingsSubscriptionsEnvelope::set_bindings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bindings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
}
inline void GetBindingsSubscriptionsEnvelope::set_bindings(int index, const char* value, size_t size) {
  bindings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
}
inline std::string* GetBindingsSubscriptionsEnvelope::_internal_add_bindings() {
  return bindings_.Add();
}
inline void GetBindingsSubscriptionsEnvelope::add_bindings(const std::string& value) {
  bindings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
}
inline void GetBindingsSubscriptionsEnvelope::add_bindings(std::string&& value) {
  bindings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
}
inline void GetBindingsSubscriptionsEnvelope::add_bindings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bindings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
}
inline void GetBindingsSubscriptionsEnvelope::add_bindings(const char* value, size_t size) {
  bindings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetBindingsSubscriptionsEnvelope::bindings() const {
  // @@protoc_insertion_point(field_list:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
  return bindings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetBindingsSubscriptionsEnvelope::mutable_bindings() {
  // @@protoc_insertion_point(field_mutable_list:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
  return &bindings_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// State

// string key = 1;
inline void State::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State::key() const {
  // @@protoc_insertion_point(field_get:daprclient.State.key)
  return _internal_key();
}
inline void State::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:daprclient.State.key)
}
inline std::string* State::mutable_key() {
  // @@protoc_insertion_point(field_mutable:daprclient.State.key)
  return _internal_mutable_key();
}
inline const std::string& State::_internal_key() const {
  return key_.GetNoArena();
}
inline void State::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.State.key)
}
inline void State::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.State.key)
}
inline void State::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.State.key)
}
inline std::string* State::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State::release_key() {
  // @@protoc_insertion_point(field_release:daprclient.State.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:daprclient.State.key)
}

// .google.protobuf.Any value = 2;
inline bool State::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool State::has_value() const {
  return _internal_has_value();
}
inline const PROTOBUF_NAMESPACE_ID::Any& State::_internal_value() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& State::value() const {
  // @@protoc_insertion_point(field_get:daprclient.State.value)
  return _internal_value();
}
inline PROTOBUF_NAMESPACE_ID::Any* State::release_value() {
  // @@protoc_insertion_point(field_release:daprclient.State.value)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = value_;
  value_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* State::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline PROTOBUF_NAMESPACE_ID::Any* State::mutable_value() {
  // @@protoc_insertion_point(field_mutable:daprclient.State.value)
  return _internal_mutable_value();
}
inline void State::set_allocated_value(PROTOBUF_NAMESPACE_ID::Any* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:daprclient.State.value)
}

// string etag = 3;
inline void State::clear_etag() {
  etag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& State::etag() const {
  // @@protoc_insertion_point(field_get:daprclient.State.etag)
  return _internal_etag();
}
inline void State::set_etag(const std::string& value) {
  _internal_set_etag(value);
  // @@protoc_insertion_point(field_set:daprclient.State.etag)
}
inline std::string* State::mutable_etag() {
  // @@protoc_insertion_point(field_mutable:daprclient.State.etag)
  return _internal_mutable_etag();
}
inline const std::string& State::_internal_etag() const {
  return etag_.GetNoArena();
}
inline void State::_internal_set_etag(const std::string& value) {
  
  etag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void State::set_etag(std::string&& value) {
  
  etag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.State.etag)
}
inline void State::set_etag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  etag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.State.etag)
}
inline void State::set_etag(const char* value, size_t size) {
  
  etag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.State.etag)
}
inline std::string* State::_internal_mutable_etag() {
  
  return etag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* State::release_etag() {
  // @@protoc_insertion_point(field_release:daprclient.State.etag)
  
  return etag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    
  } else {
    
  }
  etag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), etag);
  // @@protoc_insertion_point(field_set_allocated:daprclient.State.etag)
}

// map<string, string> metadata = 4;
inline int State::_internal_metadata_size() const {
  return metadata_.size();
}
inline int State::metadata_size() const {
  return _internal_metadata_size();
}
inline void State::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
State::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
State::metadata() const {
  // @@protoc_insertion_point(field_map:daprclient.State.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
State::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
State::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:daprclient.State.metadata)
  return _internal_mutable_metadata();
}

// .daprclient.StateOptions options = 5;
inline bool State::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool State::has_options() const {
  return _internal_has_options();
}
inline void State::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::daprclient::StateOptions& State::_internal_options() const {
  const ::daprclient::StateOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::daprclient::StateOptions*>(
      &::daprclient::_StateOptions_default_instance_);
}
inline const ::daprclient::StateOptions& State::options() const {
  // @@protoc_insertion_point(field_get:daprclient.State.options)
  return _internal_options();
}
inline ::daprclient::StateOptions* State::release_options() {
  // @@protoc_insertion_point(field_release:daprclient.State.options)
  
  ::daprclient::StateOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::daprclient::StateOptions* State::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::daprclient::StateOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::daprclient::StateOptions* State::mutable_options() {
  // @@protoc_insertion_point(field_mutable:daprclient.State.options)
  return _internal_mutable_options();
}
inline void State::set_allocated_options(::daprclient::StateOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:daprclient.State.options)
}

// -------------------------------------------------------------------

// StateOptions

// string concurrency = 1;
inline void StateOptions::clear_concurrency() {
  concurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StateOptions::concurrency() const {
  // @@protoc_insertion_point(field_get:daprclient.StateOptions.concurrency)
  return _internal_concurrency();
}
inline void StateOptions::set_concurrency(const std::string& value) {
  _internal_set_concurrency(value);
  // @@protoc_insertion_point(field_set:daprclient.StateOptions.concurrency)
}
inline std::string* StateOptions::mutable_concurrency() {
  // @@protoc_insertion_point(field_mutable:daprclient.StateOptions.concurrency)
  return _internal_mutable_concurrency();
}
inline const std::string& StateOptions::_internal_concurrency() const {
  return concurrency_.GetNoArena();
}
inline void StateOptions::_internal_set_concurrency(const std::string& value) {
  
  concurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StateOptions::set_concurrency(std::string&& value) {
  
  concurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.StateOptions.concurrency)
}
inline void StateOptions::set_concurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.StateOptions.concurrency)
}
inline void StateOptions::set_concurrency(const char* value, size_t size) {
  
  concurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.StateOptions.concurrency)
}
inline std::string* StateOptions::_internal_mutable_concurrency() {
  
  return concurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StateOptions::release_concurrency() {
  // @@protoc_insertion_point(field_release:daprclient.StateOptions.concurrency)
  
  return concurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StateOptions::set_allocated_concurrency(std::string* concurrency) {
  if (concurrency != nullptr) {
    
  } else {
    
  }
  concurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concurrency);
  // @@protoc_insertion_point(field_set_allocated:daprclient.StateOptions.concurrency)
}

// string consistency = 2;
inline void StateOptions::clear_consistency() {
  consistency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StateOptions::consistency() const {
  // @@protoc_insertion_point(field_get:daprclient.StateOptions.consistency)
  return _internal_consistency();
}
inline void StateOptions::set_consistency(const std::string& value) {
  _internal_set_consistency(value);
  // @@protoc_insertion_point(field_set:daprclient.StateOptions.consistency)
}
inline std::string* StateOptions::mutable_consistency() {
  // @@protoc_insertion_point(field_mutable:daprclient.StateOptions.consistency)
  return _internal_mutable_consistency();
}
inline const std::string& StateOptions::_internal_consistency() const {
  return consistency_.GetNoArena();
}
inline void StateOptions::_internal_set_consistency(const std::string& value) {
  
  consistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StateOptions::set_consistency(std::string&& value) {
  
  consistency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.StateOptions.consistency)
}
inline void StateOptions::set_consistency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.StateOptions.consistency)
}
inline void StateOptions::set_consistency(const char* value, size_t size) {
  
  consistency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.StateOptions.consistency)
}
inline std::string* StateOptions::_internal_mutable_consistency() {
  
  return consistency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StateOptions::release_consistency() {
  // @@protoc_insertion_point(field_release:daprclient.StateOptions.consistency)
  
  return consistency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StateOptions::set_allocated_consistency(std::string* consistency) {
  if (consistency != nullptr) {
    
  } else {
    
  }
  consistency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consistency);
  // @@protoc_insertion_point(field_set_allocated:daprclient.StateOptions.consistency)
}

// .daprclient.RetryPolicy retryPolicy = 3;
inline bool StateOptions::_internal_has_retrypolicy() const {
  return this != internal_default_instance() && retrypolicy_ != nullptr;
}
inline bool StateOptions::has_retrypolicy() const {
  return _internal_has_retrypolicy();
}
inline void StateOptions::clear_retrypolicy() {
  if (GetArenaNoVirtual() == nullptr && retrypolicy_ != nullptr) {
    delete retrypolicy_;
  }
  retrypolicy_ = nullptr;
}
inline const ::daprclient::RetryPolicy& StateOptions::_internal_retrypolicy() const {
  const ::daprclient::RetryPolicy* p = retrypolicy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::daprclient::RetryPolicy*>(
      &::daprclient::_RetryPolicy_default_instance_);
}
inline const ::daprclient::RetryPolicy& StateOptions::retrypolicy() const {
  // @@protoc_insertion_point(field_get:daprclient.StateOptions.retryPolicy)
  return _internal_retrypolicy();
}
inline ::daprclient::RetryPolicy* StateOptions::release_retrypolicy() {
  // @@protoc_insertion_point(field_release:daprclient.StateOptions.retryPolicy)
  
  ::daprclient::RetryPolicy* temp = retrypolicy_;
  retrypolicy_ = nullptr;
  return temp;
}
inline ::daprclient::RetryPolicy* StateOptions::_internal_mutable_retrypolicy() {
  
  if (retrypolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::daprclient::RetryPolicy>(GetArenaNoVirtual());
    retrypolicy_ = p;
  }
  return retrypolicy_;
}
inline ::daprclient::RetryPolicy* StateOptions::mutable_retrypolicy() {
  // @@protoc_insertion_point(field_mutable:daprclient.StateOptions.retryPolicy)
  return _internal_mutable_retrypolicy();
}
inline void StateOptions::set_allocated_retrypolicy(::daprclient::RetryPolicy* retrypolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete retrypolicy_;
  }
  if (retrypolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      retrypolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retrypolicy, submessage_arena);
    }
    
  } else {
    
  }
  retrypolicy_ = retrypolicy;
  // @@protoc_insertion_point(field_set_allocated:daprclient.StateOptions.retryPolicy)
}

// -------------------------------------------------------------------

// RetryPolicy

// int32 threshold = 1;
inline void RetryPolicy::clear_threshold() {
  threshold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetryPolicy::_internal_threshold() const {
  return threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetryPolicy::threshold() const {
  // @@protoc_insertion_point(field_get:daprclient.RetryPolicy.threshold)
  return _internal_threshold();
}
inline void RetryPolicy::_internal_set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  threshold_ = value;
}
inline void RetryPolicy::set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:daprclient.RetryPolicy.threshold)
}

// string pattern = 2;
inline void RetryPolicy::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RetryPolicy::pattern() const {
  // @@protoc_insertion_point(field_get:daprclient.RetryPolicy.pattern)
  return _internal_pattern();
}
inline void RetryPolicy::set_pattern(const std::string& value) {
  _internal_set_pattern(value);
  // @@protoc_insertion_point(field_set:daprclient.RetryPolicy.pattern)
}
inline std::string* RetryPolicy::mutable_pattern() {
  // @@protoc_insertion_point(field_mutable:daprclient.RetryPolicy.pattern)
  return _internal_mutable_pattern();
}
inline const std::string& RetryPolicy::_internal_pattern() const {
  return pattern_.GetNoArena();
}
inline void RetryPolicy::_internal_set_pattern(const std::string& value) {
  
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RetryPolicy::set_pattern(std::string&& value) {
  
  pattern_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:daprclient.RetryPolicy.pattern)
}
inline void RetryPolicy::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.RetryPolicy.pattern)
}
inline void RetryPolicy::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.RetryPolicy.pattern)
}
inline std::string* RetryPolicy::_internal_mutable_pattern() {
  
  return pattern_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RetryPolicy::release_pattern() {
  // @@protoc_insertion_point(field_release:daprclient.RetryPolicy.pattern)
  
  return pattern_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RetryPolicy::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:daprclient.RetryPolicy.pattern)
}

// .google.protobuf.Duration interval = 3;
inline bool RetryPolicy::_internal_has_interval() const {
  return this != internal_default_instance() && interval_ != nullptr;
}
inline bool RetryPolicy::has_interval() const {
  return _internal_has_interval();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& RetryPolicy::_internal_interval() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = interval_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& RetryPolicy::interval() const {
  // @@protoc_insertion_point(field_get:daprclient.RetryPolicy.interval)
  return _internal_interval();
}
inline PROTOBUF_NAMESPACE_ID::Duration* RetryPolicy::release_interval() {
  // @@protoc_insertion_point(field_release:daprclient.RetryPolicy.interval)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = interval_;
  interval_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* RetryPolicy::_internal_mutable_interval() {
  
  if (interval_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArenaNoVirtual());
    interval_ = p;
  }
  return interval_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* RetryPolicy::mutable_interval() {
  // @@protoc_insertion_point(field_mutable:daprclient.RetryPolicy.interval)
  return _internal_mutable_interval();
}
inline void RetryPolicy::set_allocated_interval(PROTOBUF_NAMESPACE_ID::Duration* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval)->GetArena();
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:daprclient.RetryPolicy.interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace daprclient

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_daprclient_2eproto
