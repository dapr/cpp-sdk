// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daprclient.proto

#ifndef PROTOBUF_daprclient_2eproto__INCLUDED
#define PROTOBUF_daprclient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)

namespace daprclient {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_daprclient_2eproto();
void protobuf_AssignDesc_daprclient_2eproto();
void protobuf_ShutdownFile_daprclient_2eproto();

class BindingEventEnvelope;
class BindingResponseEnvelope;
class CloudEventEnvelope;
class GetBindingsSubscriptionsEnvelope;
class GetTopicSubscriptionsEnvelope;
class InvokeEnvelope;
class RetryPolicy;
class State;
class StateOptions;

// ===================================================================

class CloudEventEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:daprclient.CloudEventEnvelope) */ {
 public:
  CloudEventEnvelope();
  virtual ~CloudEventEnvelope();

  CloudEventEnvelope(const CloudEventEnvelope& from);

  inline CloudEventEnvelope& operator=(const CloudEventEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloudEventEnvelope& default_instance();

  void Swap(CloudEventEnvelope* other);

  // implements Message ----------------------------------------------

  inline CloudEventEnvelope* New() const { return New(NULL); }

  CloudEventEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloudEventEnvelope& from);
  void MergeFrom(const CloudEventEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CloudEventEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string source = 2;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string specVersion = 4;
  void clear_specversion();
  static const int kSpecVersionFieldNumber = 4;
  const ::std::string& specversion() const;
  void set_specversion(const ::std::string& value);
  void set_specversion(const char* value);
  void set_specversion(const char* value, size_t size);
  ::std::string* mutable_specversion();
  ::std::string* release_specversion();
  void set_allocated_specversion(::std::string* specversion);

  // optional string dataContentType = 5;
  void clear_datacontenttype();
  static const int kDataContentTypeFieldNumber = 5;
  const ::std::string& datacontenttype() const;
  void set_datacontenttype(const ::std::string& value);
  void set_datacontenttype(const char* value);
  void set_datacontenttype(const char* value, size_t size);
  ::std::string* mutable_datacontenttype();
  ::std::string* release_datacontenttype();
  void set_allocated_datacontenttype(::std::string* datacontenttype);

  // optional string topic = 6;
  void clear_topic();
  static const int kTopicFieldNumber = 6;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // optional .google.protobuf.Any data = 7;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* mutable_data();
  ::google::protobuf::Any* release_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:daprclient.CloudEventEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr specversion_;
  ::google::protobuf::internal::ArenaStringPtr datacontenttype_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::Any* data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_daprclient_2eproto();
  friend void protobuf_AssignDesc_daprclient_2eproto();
  friend void protobuf_ShutdownFile_daprclient_2eproto();

  void InitAsDefaultInstance();
  static CloudEventEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class BindingEventEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:daprclient.BindingEventEnvelope) */ {
 public:
  BindingEventEnvelope();
  virtual ~BindingEventEnvelope();

  BindingEventEnvelope(const BindingEventEnvelope& from);

  inline BindingEventEnvelope& operator=(const BindingEventEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindingEventEnvelope& default_instance();

  void Swap(BindingEventEnvelope* other);

  // implements Message ----------------------------------------------

  inline BindingEventEnvelope* New() const { return New(NULL); }

  BindingEventEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BindingEventEnvelope& from);
  void MergeFrom(const BindingEventEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BindingEventEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* mutable_data();
  ::google::protobuf::Any* release_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // map<string, string> metadata = 3;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // @@protoc_insertion_point(class_scope:daprclient.BindingEventEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Any* data_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      BindingEventEnvelope_MetadataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_daprclient_2eproto();
  friend void protobuf_AssignDesc_daprclient_2eproto();
  friend void protobuf_ShutdownFile_daprclient_2eproto();

  void InitAsDefaultInstance();
  static BindingEventEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class BindingResponseEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:daprclient.BindingResponseEnvelope) */ {
 public:
  BindingResponseEnvelope();
  virtual ~BindingResponseEnvelope();

  BindingResponseEnvelope(const BindingResponseEnvelope& from);

  inline BindingResponseEnvelope& operator=(const BindingResponseEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindingResponseEnvelope& default_instance();

  void Swap(BindingResponseEnvelope* other);

  // implements Message ----------------------------------------------

  inline BindingResponseEnvelope* New() const { return New(NULL); }

  BindingResponseEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BindingResponseEnvelope& from);
  void MergeFrom(const BindingResponseEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BindingResponseEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.Any data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* mutable_data();
  ::google::protobuf::Any* release_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // repeated string to = 2;
  int to_size() const;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to(int index) const;
  ::std::string* mutable_to(int index);
  void set_to(int index, const ::std::string& value);
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, size_t size);
  ::std::string* add_to();
  void add_to(const ::std::string& value);
  void add_to(const char* value);
  void add_to(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& to() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_to();

  // repeated .daprclient.State state = 3;
  int state_size() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  const ::daprclient::State& state(int index) const;
  ::daprclient::State* mutable_state(int index);
  ::daprclient::State* add_state();
  ::google::protobuf::RepeatedPtrField< ::daprclient::State >*
      mutable_state();
  const ::google::protobuf::RepeatedPtrField< ::daprclient::State >&
      state() const;

  // optional string concurrency = 4;
  void clear_concurrency();
  static const int kConcurrencyFieldNumber = 4;
  const ::std::string& concurrency() const;
  void set_concurrency(const ::std::string& value);
  void set_concurrency(const char* value);
  void set_concurrency(const char* value, size_t size);
  ::std::string* mutable_concurrency();
  ::std::string* release_concurrency();
  void set_allocated_concurrency(::std::string* concurrency);

  // @@protoc_insertion_point(class_scope:daprclient.BindingResponseEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Any* data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> to_;
  ::google::protobuf::RepeatedPtrField< ::daprclient::State > state_;
  ::google::protobuf::internal::ArenaStringPtr concurrency_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_daprclient_2eproto();
  friend void protobuf_AssignDesc_daprclient_2eproto();
  friend void protobuf_ShutdownFile_daprclient_2eproto();

  void InitAsDefaultInstance();
  static BindingResponseEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class InvokeEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:daprclient.InvokeEnvelope) */ {
 public:
  InvokeEnvelope();
  virtual ~InvokeEnvelope();

  InvokeEnvelope(const InvokeEnvelope& from);

  inline InvokeEnvelope& operator=(const InvokeEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvokeEnvelope& default_instance();

  void Swap(InvokeEnvelope* other);

  // implements Message ----------------------------------------------

  inline InvokeEnvelope* New() const { return New(NULL); }

  InvokeEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvokeEnvelope& from);
  void MergeFrom(const InvokeEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InvokeEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // optional .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* mutable_data();
  ::google::protobuf::Any* release_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // map<string, string> metadata = 3;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // @@protoc_insertion_point(class_scope:daprclient.InvokeEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::Any* data_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      InvokeEnvelope_MetadataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_daprclient_2eproto();
  friend void protobuf_AssignDesc_daprclient_2eproto();
  friend void protobuf_ShutdownFile_daprclient_2eproto();

  void InitAsDefaultInstance();
  static InvokeEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class GetTopicSubscriptionsEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:daprclient.GetTopicSubscriptionsEnvelope) */ {
 public:
  GetTopicSubscriptionsEnvelope();
  virtual ~GetTopicSubscriptionsEnvelope();

  GetTopicSubscriptionsEnvelope(const GetTopicSubscriptionsEnvelope& from);

  inline GetTopicSubscriptionsEnvelope& operator=(const GetTopicSubscriptionsEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTopicSubscriptionsEnvelope& default_instance();

  void Swap(GetTopicSubscriptionsEnvelope* other);

  // implements Message ----------------------------------------------

  inline GetTopicSubscriptionsEnvelope* New() const { return New(NULL); }

  GetTopicSubscriptionsEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetTopicSubscriptionsEnvelope& from);
  void MergeFrom(const GetTopicSubscriptionsEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetTopicSubscriptionsEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string topics = 1;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 1;
  const ::std::string& topics(int index) const;
  ::std::string* mutable_topics(int index);
  void set_topics(int index, const ::std::string& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const char* value, size_t size);
  ::std::string* add_topics();
  void add_topics(const ::std::string& value);
  void add_topics(const char* value);
  void add_topics(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topics() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topics();

  // @@protoc_insertion_point(class_scope:daprclient.GetTopicSubscriptionsEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topics_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_daprclient_2eproto();
  friend void protobuf_AssignDesc_daprclient_2eproto();
  friend void protobuf_ShutdownFile_daprclient_2eproto();

  void InitAsDefaultInstance();
  static GetTopicSubscriptionsEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class GetBindingsSubscriptionsEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:daprclient.GetBindingsSubscriptionsEnvelope) */ {
 public:
  GetBindingsSubscriptionsEnvelope();
  virtual ~GetBindingsSubscriptionsEnvelope();

  GetBindingsSubscriptionsEnvelope(const GetBindingsSubscriptionsEnvelope& from);

  inline GetBindingsSubscriptionsEnvelope& operator=(const GetBindingsSubscriptionsEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBindingsSubscriptionsEnvelope& default_instance();

  void Swap(GetBindingsSubscriptionsEnvelope* other);

  // implements Message ----------------------------------------------

  inline GetBindingsSubscriptionsEnvelope* New() const { return New(NULL); }

  GetBindingsSubscriptionsEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBindingsSubscriptionsEnvelope& from);
  void MergeFrom(const GetBindingsSubscriptionsEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetBindingsSubscriptionsEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string bindings = 1;
  int bindings_size() const;
  void clear_bindings();
  static const int kBindingsFieldNumber = 1;
  const ::std::string& bindings(int index) const;
  ::std::string* mutable_bindings(int index);
  void set_bindings(int index, const ::std::string& value);
  void set_bindings(int index, const char* value);
  void set_bindings(int index, const char* value, size_t size);
  ::std::string* add_bindings();
  void add_bindings(const ::std::string& value);
  void add_bindings(const char* value);
  void add_bindings(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bindings() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bindings();

  // @@protoc_insertion_point(class_scope:daprclient.GetBindingsSubscriptionsEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bindings_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_daprclient_2eproto();
  friend void protobuf_AssignDesc_daprclient_2eproto();
  friend void protobuf_ShutdownFile_daprclient_2eproto();

  void InitAsDefaultInstance();
  static GetBindingsSubscriptionsEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:daprclient.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

  void Swap(State* other);

  // implements Message ----------------------------------------------

  inline State* New() const { return New(NULL); }

  State* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional .google.protobuf.Any value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::google::protobuf::Any& value() const;
  ::google::protobuf::Any* mutable_value();
  ::google::protobuf::Any* release_value();
  void set_allocated_value(::google::protobuf::Any* value);

  // optional string etag = 3;
  void clear_etag();
  static const int kEtagFieldNumber = 3;
  const ::std::string& etag() const;
  void set_etag(const ::std::string& value);
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  ::std::string* mutable_etag();
  ::std::string* release_etag();
  void set_allocated_etag(::std::string* etag);

  // map<string, string> metadata = 4;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // optional .daprclient.StateOptions options = 5;
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 5;
  const ::daprclient::StateOptions& options() const;
  ::daprclient::StateOptions* mutable_options();
  ::daprclient::StateOptions* release_options();
  void set_allocated_options(::daprclient::StateOptions* options);

  // @@protoc_insertion_point(class_scope:daprclient.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::Any* value_;
  ::google::protobuf::internal::ArenaStringPtr etag_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      State_MetadataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::daprclient::StateOptions* options_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_daprclient_2eproto();
  friend void protobuf_AssignDesc_daprclient_2eproto();
  friend void protobuf_ShutdownFile_daprclient_2eproto();

  void InitAsDefaultInstance();
  static State* default_instance_;
};
// -------------------------------------------------------------------

class StateOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:daprclient.StateOptions) */ {
 public:
  StateOptions();
  virtual ~StateOptions();

  StateOptions(const StateOptions& from);

  inline StateOptions& operator=(const StateOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateOptions& default_instance();

  void Swap(StateOptions* other);

  // implements Message ----------------------------------------------

  inline StateOptions* New() const { return New(NULL); }

  StateOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateOptions& from);
  void MergeFrom(const StateOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StateOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string concurrency = 1;
  void clear_concurrency();
  static const int kConcurrencyFieldNumber = 1;
  const ::std::string& concurrency() const;
  void set_concurrency(const ::std::string& value);
  void set_concurrency(const char* value);
  void set_concurrency(const char* value, size_t size);
  ::std::string* mutable_concurrency();
  ::std::string* release_concurrency();
  void set_allocated_concurrency(::std::string* concurrency);

  // optional string consistency = 2;
  void clear_consistency();
  static const int kConsistencyFieldNumber = 2;
  const ::std::string& consistency() const;
  void set_consistency(const ::std::string& value);
  void set_consistency(const char* value);
  void set_consistency(const char* value, size_t size);
  ::std::string* mutable_consistency();
  ::std::string* release_consistency();
  void set_allocated_consistency(::std::string* consistency);

  // optional .daprclient.RetryPolicy retryPolicy = 3;
  bool has_retrypolicy() const;
  void clear_retrypolicy();
  static const int kRetryPolicyFieldNumber = 3;
  const ::daprclient::RetryPolicy& retrypolicy() const;
  ::daprclient::RetryPolicy* mutable_retrypolicy();
  ::daprclient::RetryPolicy* release_retrypolicy();
  void set_allocated_retrypolicy(::daprclient::RetryPolicy* retrypolicy);

  // @@protoc_insertion_point(class_scope:daprclient.StateOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr concurrency_;
  ::google::protobuf::internal::ArenaStringPtr consistency_;
  ::daprclient::RetryPolicy* retrypolicy_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_daprclient_2eproto();
  friend void protobuf_AssignDesc_daprclient_2eproto();
  friend void protobuf_ShutdownFile_daprclient_2eproto();

  void InitAsDefaultInstance();
  static StateOptions* default_instance_;
};
// -------------------------------------------------------------------

class RetryPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:daprclient.RetryPolicy) */ {
 public:
  RetryPolicy();
  virtual ~RetryPolicy();

  RetryPolicy(const RetryPolicy& from);

  inline RetryPolicy& operator=(const RetryPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetryPolicy& default_instance();

  void Swap(RetryPolicy* other);

  // implements Message ----------------------------------------------

  inline RetryPolicy* New() const { return New(NULL); }

  RetryPolicy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetryPolicy& from);
  void MergeFrom(const RetryPolicy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RetryPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 threshold = 1;
  void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  ::google::protobuf::int32 threshold() const;
  void set_threshold(::google::protobuf::int32 value);

  // optional string pattern = 2;
  void clear_pattern();
  static const int kPatternFieldNumber = 2;
  const ::std::string& pattern() const;
  void set_pattern(const ::std::string& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  ::std::string* mutable_pattern();
  ::std::string* release_pattern();
  void set_allocated_pattern(::std::string* pattern);

  // optional .google.protobuf.Duration interval = 3;
  bool has_interval() const;
  void clear_interval();
  static const int kIntervalFieldNumber = 3;
  const ::google::protobuf::Duration& interval() const;
  ::google::protobuf::Duration* mutable_interval();
  ::google::protobuf::Duration* release_interval();
  void set_allocated_interval(::google::protobuf::Duration* interval);

  // @@protoc_insertion_point(class_scope:daprclient.RetryPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr pattern_;
  ::google::protobuf::Duration* interval_;
  ::google::protobuf::int32 threshold_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_daprclient_2eproto();
  friend void protobuf_AssignDesc_daprclient_2eproto();
  friend void protobuf_ShutdownFile_daprclient_2eproto();

  void InitAsDefaultInstance();
  static RetryPolicy* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CloudEventEnvelope

// optional string id = 1;
inline void CloudEventEnvelope::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudEventEnvelope::id() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.CloudEventEnvelope.id)
}
inline void CloudEventEnvelope::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.CloudEventEnvelope.id)
}
inline void CloudEventEnvelope::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.CloudEventEnvelope.id)
}
inline ::std::string* CloudEventEnvelope::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudEventEnvelope::release_id() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.id)
}

// optional string source = 2;
inline void CloudEventEnvelope::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudEventEnvelope::source() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.CloudEventEnvelope.source)
}
inline void CloudEventEnvelope::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.CloudEventEnvelope.source)
}
inline void CloudEventEnvelope::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.CloudEventEnvelope.source)
}
inline ::std::string* CloudEventEnvelope::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudEventEnvelope::release_source() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.source)
}

// optional string type = 3;
inline void CloudEventEnvelope::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudEventEnvelope::type() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.CloudEventEnvelope.type)
}
inline void CloudEventEnvelope::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.CloudEventEnvelope.type)
}
inline void CloudEventEnvelope::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.CloudEventEnvelope.type)
}
inline ::std::string* CloudEventEnvelope::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudEventEnvelope::release_type() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.type)
}

// optional string specVersion = 4;
inline void CloudEventEnvelope::clear_specversion() {
  specversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudEventEnvelope::specversion() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.specVersion)
  return specversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_specversion(const ::std::string& value) {
  
  specversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.CloudEventEnvelope.specVersion)
}
inline void CloudEventEnvelope::set_specversion(const char* value) {
  
  specversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.CloudEventEnvelope.specVersion)
}
inline void CloudEventEnvelope::set_specversion(const char* value, size_t size) {
  
  specversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.CloudEventEnvelope.specVersion)
}
inline ::std::string* CloudEventEnvelope::mutable_specversion() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.specVersion)
  return specversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudEventEnvelope::release_specversion() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.specVersion)
  
  return specversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_allocated_specversion(::std::string* specversion) {
  if (specversion != NULL) {
    
  } else {
    
  }
  specversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), specversion);
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.specVersion)
}

// optional string dataContentType = 5;
inline void CloudEventEnvelope::clear_datacontenttype() {
  datacontenttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudEventEnvelope::datacontenttype() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.dataContentType)
  return datacontenttype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_datacontenttype(const ::std::string& value) {
  
  datacontenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.CloudEventEnvelope.dataContentType)
}
inline void CloudEventEnvelope::set_datacontenttype(const char* value) {
  
  datacontenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.CloudEventEnvelope.dataContentType)
}
inline void CloudEventEnvelope::set_datacontenttype(const char* value, size_t size) {
  
  datacontenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.CloudEventEnvelope.dataContentType)
}
inline ::std::string* CloudEventEnvelope::mutable_datacontenttype() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.dataContentType)
  return datacontenttype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudEventEnvelope::release_datacontenttype() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.dataContentType)
  
  return datacontenttype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_allocated_datacontenttype(::std::string* datacontenttype) {
  if (datacontenttype != NULL) {
    
  } else {
    
  }
  datacontenttype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datacontenttype);
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.dataContentType)
}

// optional string topic = 6;
inline void CloudEventEnvelope::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloudEventEnvelope::topic() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.CloudEventEnvelope.topic)
}
inline void CloudEventEnvelope::set_topic(const char* value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.CloudEventEnvelope.topic)
}
inline void CloudEventEnvelope::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.CloudEventEnvelope.topic)
}
inline ::std::string* CloudEventEnvelope::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloudEventEnvelope::release_topic() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloudEventEnvelope::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.topic)
}

// optional .google.protobuf.Any data = 7;
inline bool CloudEventEnvelope::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void CloudEventEnvelope::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::google::protobuf::Any& CloudEventEnvelope::data() const {
  // @@protoc_insertion_point(field_get:daprclient.CloudEventEnvelope.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::google::protobuf::Any* CloudEventEnvelope::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:daprclient.CloudEventEnvelope.data)
  return data_;
}
inline ::google::protobuf::Any* CloudEventEnvelope::release_data() {
  // @@protoc_insertion_point(field_release:daprclient.CloudEventEnvelope.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void CloudEventEnvelope::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:daprclient.CloudEventEnvelope.data)
}

// -------------------------------------------------------------------

// BindingEventEnvelope

// optional string name = 1;
inline void BindingEventEnvelope::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BindingEventEnvelope::name() const {
  // @@protoc_insertion_point(field_get:daprclient.BindingEventEnvelope.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindingEventEnvelope::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.BindingEventEnvelope.name)
}
inline void BindingEventEnvelope::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.BindingEventEnvelope.name)
}
inline void BindingEventEnvelope::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.BindingEventEnvelope.name)
}
inline ::std::string* BindingEventEnvelope::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.BindingEventEnvelope.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindingEventEnvelope::release_name() {
  // @@protoc_insertion_point(field_release:daprclient.BindingEventEnvelope.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindingEventEnvelope::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:daprclient.BindingEventEnvelope.name)
}

// optional .google.protobuf.Any data = 2;
inline bool BindingEventEnvelope::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void BindingEventEnvelope::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::google::protobuf::Any& BindingEventEnvelope::data() const {
  // @@protoc_insertion_point(field_get:daprclient.BindingEventEnvelope.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::google::protobuf::Any* BindingEventEnvelope::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:daprclient.BindingEventEnvelope.data)
  return data_;
}
inline ::google::protobuf::Any* BindingEventEnvelope::release_data() {
  // @@protoc_insertion_point(field_release:daprclient.BindingEventEnvelope.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void BindingEventEnvelope::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:daprclient.BindingEventEnvelope.data)
}

// map<string, string> metadata = 3;
inline int BindingEventEnvelope::metadata_size() const {
  return metadata_.size();
}
inline void BindingEventEnvelope::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
BindingEventEnvelope::metadata() const {
  // @@protoc_insertion_point(field_map:daprclient.BindingEventEnvelope.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
BindingEventEnvelope::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:daprclient.BindingEventEnvelope.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// BindingResponseEnvelope

// optional .google.protobuf.Any data = 1;
inline bool BindingResponseEnvelope::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void BindingResponseEnvelope::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::google::protobuf::Any& BindingResponseEnvelope::data() const {
  // @@protoc_insertion_point(field_get:daprclient.BindingResponseEnvelope.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::google::protobuf::Any* BindingResponseEnvelope::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:daprclient.BindingResponseEnvelope.data)
  return data_;
}
inline ::google::protobuf::Any* BindingResponseEnvelope::release_data() {
  // @@protoc_insertion_point(field_release:daprclient.BindingResponseEnvelope.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void BindingResponseEnvelope::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:daprclient.BindingResponseEnvelope.data)
}

// repeated string to = 2;
inline int BindingResponseEnvelope::to_size() const {
  return to_.size();
}
inline void BindingResponseEnvelope::clear_to() {
  to_.Clear();
}
inline const ::std::string& BindingResponseEnvelope::to(int index) const {
  // @@protoc_insertion_point(field_get:daprclient.BindingResponseEnvelope.to)
  return to_.Get(index);
}
inline ::std::string* BindingResponseEnvelope::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:daprclient.BindingResponseEnvelope.to)
  return to_.Mutable(index);
}
inline void BindingResponseEnvelope::set_to(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:daprclient.BindingResponseEnvelope.to)
  to_.Mutable(index)->assign(value);
}
inline void BindingResponseEnvelope::set_to(int index, const char* value) {
  to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:daprclient.BindingResponseEnvelope.to)
}
inline void BindingResponseEnvelope::set_to(int index, const char* value, size_t size) {
  to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:daprclient.BindingResponseEnvelope.to)
}
inline ::std::string* BindingResponseEnvelope::add_to() {
  // @@protoc_insertion_point(field_add_mutable:daprclient.BindingResponseEnvelope.to)
  return to_.Add();
}
inline void BindingResponseEnvelope::add_to(const ::std::string& value) {
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:daprclient.BindingResponseEnvelope.to)
}
inline void BindingResponseEnvelope::add_to(const char* value) {
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:daprclient.BindingResponseEnvelope.to)
}
inline void BindingResponseEnvelope::add_to(const char* value, size_t size) {
  to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:daprclient.BindingResponseEnvelope.to)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BindingResponseEnvelope::to() const {
  // @@protoc_insertion_point(field_list:daprclient.BindingResponseEnvelope.to)
  return to_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BindingResponseEnvelope::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:daprclient.BindingResponseEnvelope.to)
  return &to_;
}

// repeated .daprclient.State state = 3;
inline int BindingResponseEnvelope::state_size() const {
  return state_.size();
}
inline void BindingResponseEnvelope::clear_state() {
  state_.Clear();
}
inline const ::daprclient::State& BindingResponseEnvelope::state(int index) const {
  // @@protoc_insertion_point(field_get:daprclient.BindingResponseEnvelope.state)
  return state_.Get(index);
}
inline ::daprclient::State* BindingResponseEnvelope::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:daprclient.BindingResponseEnvelope.state)
  return state_.Mutable(index);
}
inline ::daprclient::State* BindingResponseEnvelope::add_state() {
  // @@protoc_insertion_point(field_add:daprclient.BindingResponseEnvelope.state)
  return state_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::daprclient::State >*
BindingResponseEnvelope::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:daprclient.BindingResponseEnvelope.state)
  return &state_;
}
inline const ::google::protobuf::RepeatedPtrField< ::daprclient::State >&
BindingResponseEnvelope::state() const {
  // @@protoc_insertion_point(field_list:daprclient.BindingResponseEnvelope.state)
  return state_;
}

// optional string concurrency = 4;
inline void BindingResponseEnvelope::clear_concurrency() {
  concurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BindingResponseEnvelope::concurrency() const {
  // @@protoc_insertion_point(field_get:daprclient.BindingResponseEnvelope.concurrency)
  return concurrency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindingResponseEnvelope::set_concurrency(const ::std::string& value) {
  
  concurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.BindingResponseEnvelope.concurrency)
}
inline void BindingResponseEnvelope::set_concurrency(const char* value) {
  
  concurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.BindingResponseEnvelope.concurrency)
}
inline void BindingResponseEnvelope::set_concurrency(const char* value, size_t size) {
  
  concurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.BindingResponseEnvelope.concurrency)
}
inline ::std::string* BindingResponseEnvelope::mutable_concurrency() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.BindingResponseEnvelope.concurrency)
  return concurrency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindingResponseEnvelope::release_concurrency() {
  // @@protoc_insertion_point(field_release:daprclient.BindingResponseEnvelope.concurrency)
  
  return concurrency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindingResponseEnvelope::set_allocated_concurrency(::std::string* concurrency) {
  if (concurrency != NULL) {
    
  } else {
    
  }
  concurrency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), concurrency);
  // @@protoc_insertion_point(field_set_allocated:daprclient.BindingResponseEnvelope.concurrency)
}

// -------------------------------------------------------------------

// InvokeEnvelope

// optional string method = 1;
inline void InvokeEnvelope::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvokeEnvelope::method() const {
  // @@protoc_insertion_point(field_get:daprclient.InvokeEnvelope.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvokeEnvelope::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.InvokeEnvelope.method)
}
inline void InvokeEnvelope::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.InvokeEnvelope.method)
}
inline void InvokeEnvelope::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.InvokeEnvelope.method)
}
inline ::std::string* InvokeEnvelope::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.InvokeEnvelope.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvokeEnvelope::release_method() {
  // @@protoc_insertion_point(field_release:daprclient.InvokeEnvelope.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvokeEnvelope::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:daprclient.InvokeEnvelope.method)
}

// optional .google.protobuf.Any data = 2;
inline bool InvokeEnvelope::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void InvokeEnvelope::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::google::protobuf::Any& InvokeEnvelope::data() const {
  // @@protoc_insertion_point(field_get:daprclient.InvokeEnvelope.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::google::protobuf::Any* InvokeEnvelope::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:daprclient.InvokeEnvelope.data)
  return data_;
}
inline ::google::protobuf::Any* InvokeEnvelope::release_data() {
  // @@protoc_insertion_point(field_release:daprclient.InvokeEnvelope.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void InvokeEnvelope::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:daprclient.InvokeEnvelope.data)
}

// map<string, string> metadata = 3;
inline int InvokeEnvelope::metadata_size() const {
  return metadata_.size();
}
inline void InvokeEnvelope::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
InvokeEnvelope::metadata() const {
  // @@protoc_insertion_point(field_map:daprclient.InvokeEnvelope.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
InvokeEnvelope::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:daprclient.InvokeEnvelope.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// GetTopicSubscriptionsEnvelope

// repeated string topics = 1;
inline int GetTopicSubscriptionsEnvelope::topics_size() const {
  return topics_.size();
}
inline void GetTopicSubscriptionsEnvelope::clear_topics() {
  topics_.Clear();
}
inline const ::std::string& GetTopicSubscriptionsEnvelope::topics(int index) const {
  // @@protoc_insertion_point(field_get:daprclient.GetTopicSubscriptionsEnvelope.topics)
  return topics_.Get(index);
}
inline ::std::string* GetTopicSubscriptionsEnvelope::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:daprclient.GetTopicSubscriptionsEnvelope.topics)
  return topics_.Mutable(index);
}
inline void GetTopicSubscriptionsEnvelope::set_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:daprclient.GetTopicSubscriptionsEnvelope.topics)
  topics_.Mutable(index)->assign(value);
}
inline void GetTopicSubscriptionsEnvelope::set_topics(int index, const char* value) {
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:daprclient.GetTopicSubscriptionsEnvelope.topics)
}
inline void GetTopicSubscriptionsEnvelope::set_topics(int index, const char* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:daprclient.GetTopicSubscriptionsEnvelope.topics)
}
inline ::std::string* GetTopicSubscriptionsEnvelope::add_topics() {
  // @@protoc_insertion_point(field_add_mutable:daprclient.GetTopicSubscriptionsEnvelope.topics)
  return topics_.Add();
}
inline void GetTopicSubscriptionsEnvelope::add_topics(const ::std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:daprclient.GetTopicSubscriptionsEnvelope.topics)
}
inline void GetTopicSubscriptionsEnvelope::add_topics(const char* value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:daprclient.GetTopicSubscriptionsEnvelope.topics)
}
inline void GetTopicSubscriptionsEnvelope::add_topics(const char* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:daprclient.GetTopicSubscriptionsEnvelope.topics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetTopicSubscriptionsEnvelope::topics() const {
  // @@protoc_insertion_point(field_list:daprclient.GetTopicSubscriptionsEnvelope.topics)
  return topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetTopicSubscriptionsEnvelope::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:daprclient.GetTopicSubscriptionsEnvelope.topics)
  return &topics_;
}

// -------------------------------------------------------------------

// GetBindingsSubscriptionsEnvelope

// repeated string bindings = 1;
inline int GetBindingsSubscriptionsEnvelope::bindings_size() const {
  return bindings_.size();
}
inline void GetBindingsSubscriptionsEnvelope::clear_bindings() {
  bindings_.Clear();
}
inline const ::std::string& GetBindingsSubscriptionsEnvelope::bindings(int index) const {
  // @@protoc_insertion_point(field_get:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
  return bindings_.Get(index);
}
inline ::std::string* GetBindingsSubscriptionsEnvelope::mutable_bindings(int index) {
  // @@protoc_insertion_point(field_mutable:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
  return bindings_.Mutable(index);
}
inline void GetBindingsSubscriptionsEnvelope::set_bindings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
  bindings_.Mutable(index)->assign(value);
}
inline void GetBindingsSubscriptionsEnvelope::set_bindings(int index, const char* value) {
  bindings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
}
inline void GetBindingsSubscriptionsEnvelope::set_bindings(int index, const char* value, size_t size) {
  bindings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
}
inline ::std::string* GetBindingsSubscriptionsEnvelope::add_bindings() {
  // @@protoc_insertion_point(field_add_mutable:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
  return bindings_.Add();
}
inline void GetBindingsSubscriptionsEnvelope::add_bindings(const ::std::string& value) {
  bindings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
}
inline void GetBindingsSubscriptionsEnvelope::add_bindings(const char* value) {
  bindings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
}
inline void GetBindingsSubscriptionsEnvelope::add_bindings(const char* value, size_t size) {
  bindings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetBindingsSubscriptionsEnvelope::bindings() const {
  // @@protoc_insertion_point(field_list:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
  return bindings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetBindingsSubscriptionsEnvelope::mutable_bindings() {
  // @@protoc_insertion_point(field_mutable_list:daprclient.GetBindingsSubscriptionsEnvelope.bindings)
  return &bindings_;
}

// -------------------------------------------------------------------

// State

// optional string key = 1;
inline void State::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& State::key() const {
  // @@protoc_insertion_point(field_get:daprclient.State.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.State.key)
}
inline void State::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.State.key)
}
inline void State::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.State.key)
}
inline ::std::string* State::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.State.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* State::release_key() {
  // @@protoc_insertion_point(field_release:daprclient.State.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:daprclient.State.key)
}

// optional .google.protobuf.Any value = 2;
inline bool State::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
inline void State::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::google::protobuf::Any& State::value() const {
  // @@protoc_insertion_point(field_get:daprclient.State.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::google::protobuf::Any* State::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:daprclient.State.value)
  return value_;
}
inline ::google::protobuf::Any* State::release_value() {
  // @@protoc_insertion_point(field_release:daprclient.State.value)
  
  ::google::protobuf::Any* temp = value_;
  value_ = NULL;
  return temp;
}
inline void State::set_allocated_value(::google::protobuf::Any* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:daprclient.State.value)
}

// optional string etag = 3;
inline void State::clear_etag() {
  etag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& State::etag() const {
  // @@protoc_insertion_point(field_get:daprclient.State.etag)
  return etag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_etag(const ::std::string& value) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.State.etag)
}
inline void State::set_etag(const char* value) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.State.etag)
}
inline void State::set_etag(const char* value, size_t size) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.State.etag)
}
inline ::std::string* State::mutable_etag() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.State.etag)
  return etag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* State::release_etag() {
  // @@protoc_insertion_point(field_release:daprclient.State.etag)
  
  return etag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag);
  // @@protoc_insertion_point(field_set_allocated:daprclient.State.etag)
}

// map<string, string> metadata = 4;
inline int State::metadata_size() const {
  return metadata_.size();
}
inline void State::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
State::metadata() const {
  // @@protoc_insertion_point(field_map:daprclient.State.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
State::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:daprclient.State.metadata)
  return metadata_.MutableMap();
}

// optional .daprclient.StateOptions options = 5;
inline bool State::has_options() const {
  return !_is_default_instance_ && options_ != NULL;
}
inline void State::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
inline const ::daprclient::StateOptions& State::options() const {
  // @@protoc_insertion_point(field_get:daprclient.State.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
inline ::daprclient::StateOptions* State::mutable_options() {
  
  if (options_ == NULL) {
    options_ = new ::daprclient::StateOptions;
  }
  // @@protoc_insertion_point(field_mutable:daprclient.State.options)
  return options_;
}
inline ::daprclient::StateOptions* State::release_options() {
  // @@protoc_insertion_point(field_release:daprclient.State.options)
  
  ::daprclient::StateOptions* temp = options_;
  options_ = NULL;
  return temp;
}
inline void State::set_allocated_options(::daprclient::StateOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:daprclient.State.options)
}

// -------------------------------------------------------------------

// StateOptions

// optional string concurrency = 1;
inline void StateOptions::clear_concurrency() {
  concurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateOptions::concurrency() const {
  // @@protoc_insertion_point(field_get:daprclient.StateOptions.concurrency)
  return concurrency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateOptions::set_concurrency(const ::std::string& value) {
  
  concurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.StateOptions.concurrency)
}
inline void StateOptions::set_concurrency(const char* value) {
  
  concurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.StateOptions.concurrency)
}
inline void StateOptions::set_concurrency(const char* value, size_t size) {
  
  concurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.StateOptions.concurrency)
}
inline ::std::string* StateOptions::mutable_concurrency() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.StateOptions.concurrency)
  return concurrency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateOptions::release_concurrency() {
  // @@protoc_insertion_point(field_release:daprclient.StateOptions.concurrency)
  
  return concurrency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateOptions::set_allocated_concurrency(::std::string* concurrency) {
  if (concurrency != NULL) {
    
  } else {
    
  }
  concurrency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), concurrency);
  // @@protoc_insertion_point(field_set_allocated:daprclient.StateOptions.concurrency)
}

// optional string consistency = 2;
inline void StateOptions::clear_consistency() {
  consistency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateOptions::consistency() const {
  // @@protoc_insertion_point(field_get:daprclient.StateOptions.consistency)
  return consistency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateOptions::set_consistency(const ::std::string& value) {
  
  consistency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.StateOptions.consistency)
}
inline void StateOptions::set_consistency(const char* value) {
  
  consistency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.StateOptions.consistency)
}
inline void StateOptions::set_consistency(const char* value, size_t size) {
  
  consistency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.StateOptions.consistency)
}
inline ::std::string* StateOptions::mutable_consistency() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.StateOptions.consistency)
  return consistency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateOptions::release_consistency() {
  // @@protoc_insertion_point(field_release:daprclient.StateOptions.consistency)
  
  return consistency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateOptions::set_allocated_consistency(::std::string* consistency) {
  if (consistency != NULL) {
    
  } else {
    
  }
  consistency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consistency);
  // @@protoc_insertion_point(field_set_allocated:daprclient.StateOptions.consistency)
}

// optional .daprclient.RetryPolicy retryPolicy = 3;
inline bool StateOptions::has_retrypolicy() const {
  return !_is_default_instance_ && retrypolicy_ != NULL;
}
inline void StateOptions::clear_retrypolicy() {
  if (GetArenaNoVirtual() == NULL && retrypolicy_ != NULL) delete retrypolicy_;
  retrypolicy_ = NULL;
}
inline const ::daprclient::RetryPolicy& StateOptions::retrypolicy() const {
  // @@protoc_insertion_point(field_get:daprclient.StateOptions.retryPolicy)
  return retrypolicy_ != NULL ? *retrypolicy_ : *default_instance_->retrypolicy_;
}
inline ::daprclient::RetryPolicy* StateOptions::mutable_retrypolicy() {
  
  if (retrypolicy_ == NULL) {
    retrypolicy_ = new ::daprclient::RetryPolicy;
  }
  // @@protoc_insertion_point(field_mutable:daprclient.StateOptions.retryPolicy)
  return retrypolicy_;
}
inline ::daprclient::RetryPolicy* StateOptions::release_retrypolicy() {
  // @@protoc_insertion_point(field_release:daprclient.StateOptions.retryPolicy)
  
  ::daprclient::RetryPolicy* temp = retrypolicy_;
  retrypolicy_ = NULL;
  return temp;
}
inline void StateOptions::set_allocated_retrypolicy(::daprclient::RetryPolicy* retrypolicy) {
  delete retrypolicy_;
  retrypolicy_ = retrypolicy;
  if (retrypolicy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:daprclient.StateOptions.retryPolicy)
}

// -------------------------------------------------------------------

// RetryPolicy

// optional int32 threshold = 1;
inline void RetryPolicy::clear_threshold() {
  threshold_ = 0;
}
inline ::google::protobuf::int32 RetryPolicy::threshold() const {
  // @@protoc_insertion_point(field_get:daprclient.RetryPolicy.threshold)
  return threshold_;
}
inline void RetryPolicy::set_threshold(::google::protobuf::int32 value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:daprclient.RetryPolicy.threshold)
}

// optional string pattern = 2;
inline void RetryPolicy::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RetryPolicy::pattern() const {
  // @@protoc_insertion_point(field_get:daprclient.RetryPolicy.pattern)
  return pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetryPolicy::set_pattern(const ::std::string& value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:daprclient.RetryPolicy.pattern)
}
inline void RetryPolicy::set_pattern(const char* value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:daprclient.RetryPolicy.pattern)
}
inline void RetryPolicy::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:daprclient.RetryPolicy.pattern)
}
inline ::std::string* RetryPolicy::mutable_pattern() {
  
  // @@protoc_insertion_point(field_mutable:daprclient.RetryPolicy.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RetryPolicy::release_pattern() {
  // @@protoc_insertion_point(field_release:daprclient.RetryPolicy.pattern)
  
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetryPolicy::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:daprclient.RetryPolicy.pattern)
}

// optional .google.protobuf.Duration interval = 3;
inline bool RetryPolicy::has_interval() const {
  return !_is_default_instance_ && interval_ != NULL;
}
inline void RetryPolicy::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}
inline const ::google::protobuf::Duration& RetryPolicy::interval() const {
  // @@protoc_insertion_point(field_get:daprclient.RetryPolicy.interval)
  return interval_ != NULL ? *interval_ : *default_instance_->interval_;
}
inline ::google::protobuf::Duration* RetryPolicy::mutable_interval() {
  
  if (interval_ == NULL) {
    interval_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:daprclient.RetryPolicy.interval)
  return interval_;
}
inline ::google::protobuf::Duration* RetryPolicy::release_interval() {
  // @@protoc_insertion_point(field_release:daprclient.RetryPolicy.interval)
  
  ::google::protobuf::Duration* temp = interval_;
  interval_ = NULL;
  return temp;
}
inline void RetryPolicy::set_allocated_interval(::google::protobuf::Duration* interval) {
  delete interval_;
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:daprclient.RetryPolicy.interval)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace daprclient

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_daprclient_2eproto__INCLUDED
