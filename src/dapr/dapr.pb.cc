// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dapr.proto

#include "dapr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dapr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSecretEnvelope_MetadataEntry_DoNotUse_dapr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dapr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSecretResponseEnvelope_DataEntry_DoNotUse_dapr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dapr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvokeBindingEnvelope_MetadataEntry_DoNotUse_dapr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dapr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvokeServiceEnvelope_MetadataEntry_DoNotUse_dapr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dapr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse_dapr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dapr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RetryPolicy_dapr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dapr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_State_MetadataEntry_DoNotUse_dapr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dapr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateOptions_dapr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dapr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StateRequest_dapr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dapr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateRequest_MetadataEntry_DoNotUse_dapr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dapr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateRequestOptions_dapr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dapr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateRetryPolicy_dapr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
namespace dapr {
class InvokeServiceResponseEnvelope_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse> _instance;
} _InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse_default_instance_;
class InvokeServiceResponseEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvokeServiceResponseEnvelope> _instance;
} _InvokeServiceResponseEnvelope_default_instance_;
class DeleteStateEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteStateEnvelope> _instance;
} _DeleteStateEnvelope_default_instance_;
class SaveStateEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveStateEnvelope> _instance;
} _SaveStateEnvelope_default_instance_;
class GetStateEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStateEnvelope> _instance;
} _GetStateEnvelope_default_instance_;
class GetStateResponseEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStateResponseEnvelope> _instance;
} _GetStateResponseEnvelope_default_instance_;
class GetSecretEnvelope_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSecretEnvelope_MetadataEntry_DoNotUse> _instance;
} _GetSecretEnvelope_MetadataEntry_DoNotUse_default_instance_;
class GetSecretEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSecretEnvelope> _instance;
} _GetSecretEnvelope_default_instance_;
class GetSecretResponseEnvelope_DataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSecretResponseEnvelope_DataEntry_DoNotUse> _instance;
} _GetSecretResponseEnvelope_DataEntry_DoNotUse_default_instance_;
class GetSecretResponseEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSecretResponseEnvelope> _instance;
} _GetSecretResponseEnvelope_default_instance_;
class InvokeBindingEnvelope_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvokeBindingEnvelope_MetadataEntry_DoNotUse> _instance;
} _InvokeBindingEnvelope_MetadataEntry_DoNotUse_default_instance_;
class InvokeBindingEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvokeBindingEnvelope> _instance;
} _InvokeBindingEnvelope_default_instance_;
class InvokeServiceEnvelope_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvokeServiceEnvelope_MetadataEntry_DoNotUse> _instance;
} _InvokeServiceEnvelope_MetadataEntry_DoNotUse_default_instance_;
class InvokeServiceEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvokeServiceEnvelope> _instance;
} _InvokeServiceEnvelope_default_instance_;
class PublishEventEnvelopeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishEventEnvelope> _instance;
} _PublishEventEnvelope_default_instance_;
class State_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State_MetadataEntry_DoNotUse> _instance;
} _State_MetadataEntry_DoNotUse_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State> _instance;
} _State_default_instance_;
class StateOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateOptions> _instance;
} _StateOptions_default_instance_;
class RetryPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetryPolicy> _instance;
} _RetryPolicy_default_instance_;
class StateRequest_MetadataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateRequest_MetadataEntry_DoNotUse> _instance;
} _StateRequest_MetadataEntry_DoNotUse_default_instance_;
class StateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateRequest> _instance;
} _StateRequest_default_instance_;
class StateRequestOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateRequestOptions> _instance;
} _StateRequestOptions_default_instance_;
class StateRetryPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateRetryPolicy> _instance;
} _StateRetryPolicy_default_instance_;
}  // namespace dapr
static void InitDefaultsscc_info_DeleteStateEnvelope_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_DeleteStateEnvelope_default_instance_;
    new (ptr) ::dapr::DeleteStateEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::DeleteStateEnvelope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteStateEnvelope_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteStateEnvelope_dapr_2eproto}, {
      &scc_info_StateOptions_dapr_2eproto.base,}};

static void InitDefaultsscc_info_GetSecretEnvelope_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_GetSecretEnvelope_default_instance_;
    new (ptr) ::dapr::GetSecretEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::GetSecretEnvelope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSecretEnvelope_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSecretEnvelope_dapr_2eproto}, {
      &scc_info_GetSecretEnvelope_MetadataEntry_DoNotUse_dapr_2eproto.base,}};

static void InitDefaultsscc_info_GetSecretEnvelope_MetadataEntry_DoNotUse_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_GetSecretEnvelope_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::dapr::GetSecretEnvelope_MetadataEntry_DoNotUse();
  }
  ::dapr::GetSecretEnvelope_MetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSecretEnvelope_MetadataEntry_DoNotUse_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSecretEnvelope_MetadataEntry_DoNotUse_dapr_2eproto}, {}};

static void InitDefaultsscc_info_GetSecretResponseEnvelope_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_GetSecretResponseEnvelope_default_instance_;
    new (ptr) ::dapr::GetSecretResponseEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::GetSecretResponseEnvelope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSecretResponseEnvelope_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSecretResponseEnvelope_dapr_2eproto}, {
      &scc_info_GetSecretResponseEnvelope_DataEntry_DoNotUse_dapr_2eproto.base,}};

static void InitDefaultsscc_info_GetSecretResponseEnvelope_DataEntry_DoNotUse_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_GetSecretResponseEnvelope_DataEntry_DoNotUse_default_instance_;
    new (ptr) ::dapr::GetSecretResponseEnvelope_DataEntry_DoNotUse();
  }
  ::dapr::GetSecretResponseEnvelope_DataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSecretResponseEnvelope_DataEntry_DoNotUse_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSecretResponseEnvelope_DataEntry_DoNotUse_dapr_2eproto}, {}};

static void InitDefaultsscc_info_GetStateEnvelope_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_GetStateEnvelope_default_instance_;
    new (ptr) ::dapr::GetStateEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::GetStateEnvelope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStateEnvelope_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetStateEnvelope_dapr_2eproto}, {}};

static void InitDefaultsscc_info_GetStateResponseEnvelope_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_GetStateResponseEnvelope_default_instance_;
    new (ptr) ::dapr::GetStateResponseEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::GetStateResponseEnvelope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStateResponseEnvelope_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStateResponseEnvelope_dapr_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_InvokeBindingEnvelope_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_InvokeBindingEnvelope_default_instance_;
    new (ptr) ::dapr::InvokeBindingEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::InvokeBindingEnvelope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InvokeBindingEnvelope_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InvokeBindingEnvelope_dapr_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_InvokeBindingEnvelope_MetadataEntry_DoNotUse_dapr_2eproto.base,}};

static void InitDefaultsscc_info_InvokeBindingEnvelope_MetadataEntry_DoNotUse_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_InvokeBindingEnvelope_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::dapr::InvokeBindingEnvelope_MetadataEntry_DoNotUse();
  }
  ::dapr::InvokeBindingEnvelope_MetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvokeBindingEnvelope_MetadataEntry_DoNotUse_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvokeBindingEnvelope_MetadataEntry_DoNotUse_dapr_2eproto}, {}};

static void InitDefaultsscc_info_InvokeServiceEnvelope_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_InvokeServiceEnvelope_default_instance_;
    new (ptr) ::dapr::InvokeServiceEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::InvokeServiceEnvelope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InvokeServiceEnvelope_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InvokeServiceEnvelope_dapr_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_InvokeServiceEnvelope_MetadataEntry_DoNotUse_dapr_2eproto.base,}};

static void InitDefaultsscc_info_InvokeServiceEnvelope_MetadataEntry_DoNotUse_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_InvokeServiceEnvelope_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::dapr::InvokeServiceEnvelope_MetadataEntry_DoNotUse();
  }
  ::dapr::InvokeServiceEnvelope_MetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvokeServiceEnvelope_MetadataEntry_DoNotUse_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvokeServiceEnvelope_MetadataEntry_DoNotUse_dapr_2eproto}, {}};

static void InitDefaultsscc_info_InvokeServiceResponseEnvelope_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_InvokeServiceResponseEnvelope_default_instance_;
    new (ptr) ::dapr::InvokeServiceResponseEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::InvokeServiceResponseEnvelope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InvokeServiceResponseEnvelope_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InvokeServiceResponseEnvelope_dapr_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse_dapr_2eproto.base,}};

static void InitDefaultsscc_info_InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::dapr::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse();
  }
  ::dapr::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse_dapr_2eproto}, {}};

static void InitDefaultsscc_info_PublishEventEnvelope_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_PublishEventEnvelope_default_instance_;
    new (ptr) ::dapr::PublishEventEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::PublishEventEnvelope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishEventEnvelope_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishEventEnvelope_dapr_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_RetryPolicy_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_RetryPolicy_default_instance_;
    new (ptr) ::dapr::RetryPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::RetryPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RetryPolicy_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RetryPolicy_dapr_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_SaveStateEnvelope_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_SaveStateEnvelope_default_instance_;
    new (ptr) ::dapr::SaveStateEnvelope();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::SaveStateEnvelope::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SaveStateEnvelope_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SaveStateEnvelope_dapr_2eproto}, {
      &scc_info_StateRequest_dapr_2eproto.base,}};

static void InitDefaultsscc_info_State_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_State_default_instance_;
    new (ptr) ::dapr::State();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::State::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_State_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_State_dapr_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_State_MetadataEntry_DoNotUse_dapr_2eproto.base,
      &scc_info_StateOptions_dapr_2eproto.base,}};

static void InitDefaultsscc_info_State_MetadataEntry_DoNotUse_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_State_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::dapr::State_MetadataEntry_DoNotUse();
  }
  ::dapr::State_MetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_State_MetadataEntry_DoNotUse_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_State_MetadataEntry_DoNotUse_dapr_2eproto}, {}};

static void InitDefaultsscc_info_StateOptions_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_StateOptions_default_instance_;
    new (ptr) ::dapr::StateOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::StateOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateOptions_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StateOptions_dapr_2eproto}, {
      &scc_info_RetryPolicy_dapr_2eproto.base,}};

static void InitDefaultsscc_info_StateRequest_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_StateRequest_default_instance_;
    new (ptr) ::dapr::StateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::StateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StateRequest_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_StateRequest_dapr_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_StateRequest_MetadataEntry_DoNotUse_dapr_2eproto.base,
      &scc_info_StateRequestOptions_dapr_2eproto.base,}};

static void InitDefaultsscc_info_StateRequest_MetadataEntry_DoNotUse_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_StateRequest_MetadataEntry_DoNotUse_default_instance_;
    new (ptr) ::dapr::StateRequest_MetadataEntry_DoNotUse();
  }
  ::dapr::StateRequest_MetadataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateRequest_MetadataEntry_DoNotUse_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StateRequest_MetadataEntry_DoNotUse_dapr_2eproto}, {}};

static void InitDefaultsscc_info_StateRequestOptions_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_StateRequestOptions_default_instance_;
    new (ptr) ::dapr::StateRequestOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::StateRequestOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateRequestOptions_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StateRequestOptions_dapr_2eproto}, {
      &scc_info_StateRetryPolicy_dapr_2eproto.base,}};

static void InitDefaultsscc_info_StateRetryPolicy_dapr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dapr::_StateRetryPolicy_default_instance_;
    new (ptr) ::dapr::StateRetryPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dapr::StateRetryPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateRetryPolicy_dapr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StateRetryPolicy_dapr_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dapr_2eproto[23];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dapr_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dapr_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dapr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceResponseEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceResponseEnvelope, data_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceResponseEnvelope, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::DeleteStateEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::DeleteStateEnvelope, storename_),
  PROTOBUF_FIELD_OFFSET(::dapr::DeleteStateEnvelope, key_),
  PROTOBUF_FIELD_OFFSET(::dapr::DeleteStateEnvelope, etag_),
  PROTOBUF_FIELD_OFFSET(::dapr::DeleteStateEnvelope, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::SaveStateEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::SaveStateEnvelope, storename_),
  PROTOBUF_FIELD_OFFSET(::dapr::SaveStateEnvelope, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::GetStateEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::GetStateEnvelope, storename_),
  PROTOBUF_FIELD_OFFSET(::dapr::GetStateEnvelope, key_),
  PROTOBUF_FIELD_OFFSET(::dapr::GetStateEnvelope, consistency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::GetStateResponseEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::GetStateResponseEnvelope, data_),
  PROTOBUF_FIELD_OFFSET(::dapr::GetStateResponseEnvelope, etag_),
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretEnvelope_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretEnvelope_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretEnvelope_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretEnvelope_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretEnvelope, storename_),
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretEnvelope, key_),
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretEnvelope, metadata_),
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretResponseEnvelope_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretResponseEnvelope_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretResponseEnvelope_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretResponseEnvelope_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretResponseEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::GetSecretResponseEnvelope, data_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeBindingEnvelope_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeBindingEnvelope_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeBindingEnvelope_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeBindingEnvelope_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeBindingEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeBindingEnvelope, name_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeBindingEnvelope, data_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeBindingEnvelope, metadata_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceEnvelope_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceEnvelope_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceEnvelope_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceEnvelope_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceEnvelope, id_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceEnvelope, method_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceEnvelope, data_),
  PROTOBUF_FIELD_OFFSET(::dapr::InvokeServiceEnvelope, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::PublishEventEnvelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::PublishEventEnvelope, topic_),
  PROTOBUF_FIELD_OFFSET(::dapr::PublishEventEnvelope, data_),
  PROTOBUF_FIELD_OFFSET(::dapr::State_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dapr::State_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::State_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dapr::State_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::State, key_),
  PROTOBUF_FIELD_OFFSET(::dapr::State, value_),
  PROTOBUF_FIELD_OFFSET(::dapr::State, etag_),
  PROTOBUF_FIELD_OFFSET(::dapr::State, metadata_),
  PROTOBUF_FIELD_OFFSET(::dapr::State, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::StateOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::StateOptions, concurrency_),
  PROTOBUF_FIELD_OFFSET(::dapr::StateOptions, consistency_),
  PROTOBUF_FIELD_OFFSET(::dapr::StateOptions, retrypolicy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::RetryPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::RetryPolicy, threshold_),
  PROTOBUF_FIELD_OFFSET(::dapr::RetryPolicy, pattern_),
  PROTOBUF_FIELD_OFFSET(::dapr::RetryPolicy, interval_),
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequest_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequest_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequest_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequest_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequest, key_),
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequest, value_),
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequest, etag_),
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequest, metadata_),
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequestOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequestOptions, concurrency_),
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequestOptions, consistency_),
  PROTOBUF_FIELD_OFFSET(::dapr::StateRequestOptions, retrypolicy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dapr::StateRetryPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dapr::StateRetryPolicy, threshold_),
  PROTOBUF_FIELD_OFFSET(::dapr::StateRetryPolicy, pattern_),
  PROTOBUF_FIELD_OFFSET(::dapr::StateRetryPolicy, interval_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::dapr::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse)},
  { 9, -1, sizeof(::dapr::InvokeServiceResponseEnvelope)},
  { 16, -1, sizeof(::dapr::DeleteStateEnvelope)},
  { 25, -1, sizeof(::dapr::SaveStateEnvelope)},
  { 32, -1, sizeof(::dapr::GetStateEnvelope)},
  { 40, -1, sizeof(::dapr::GetStateResponseEnvelope)},
  { 47, 54, sizeof(::dapr::GetSecretEnvelope_MetadataEntry_DoNotUse)},
  { 56, -1, sizeof(::dapr::GetSecretEnvelope)},
  { 64, 71, sizeof(::dapr::GetSecretResponseEnvelope_DataEntry_DoNotUse)},
  { 73, -1, sizeof(::dapr::GetSecretResponseEnvelope)},
  { 79, 86, sizeof(::dapr::InvokeBindingEnvelope_MetadataEntry_DoNotUse)},
  { 88, -1, sizeof(::dapr::InvokeBindingEnvelope)},
  { 96, 103, sizeof(::dapr::InvokeServiceEnvelope_MetadataEntry_DoNotUse)},
  { 105, -1, sizeof(::dapr::InvokeServiceEnvelope)},
  { 114, -1, sizeof(::dapr::PublishEventEnvelope)},
  { 121, 128, sizeof(::dapr::State_MetadataEntry_DoNotUse)},
  { 130, -1, sizeof(::dapr::State)},
  { 140, -1, sizeof(::dapr::StateOptions)},
  { 148, -1, sizeof(::dapr::RetryPolicy)},
  { 156, 163, sizeof(::dapr::StateRequest_MetadataEntry_DoNotUse)},
  { 165, -1, sizeof(::dapr::StateRequest)},
  { 175, -1, sizeof(::dapr::StateRequestOptions)},
  { 183, -1, sizeof(::dapr::StateRetryPolicy)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_InvokeServiceResponseEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_DeleteStateEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_SaveStateEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_GetStateEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_GetStateResponseEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_GetSecretEnvelope_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_GetSecretEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_GetSecretResponseEnvelope_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_GetSecretResponseEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_InvokeBindingEnvelope_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_InvokeBindingEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_InvokeServiceEnvelope_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_InvokeServiceEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_PublishEventEnvelope_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_State_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_StateOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_RetryPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_StateRequest_MetadataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_StateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_StateRequestOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dapr::_StateRetryPolicy_default_instance_),
};

const char descriptor_table_protodef_dapr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndapr.proto\022\004dapr\032\031google/protobuf/any."
  "proto\032\033google/protobuf/empty.proto\032\036goog"
  "le/protobuf/duration.proto\"\271\001\n\035InvokeSer"
  "viceResponseEnvelope\022\"\n\004data\030\001 \001(\0132\024.goo"
  "gle.protobuf.Any\022C\n\010metadata\030\002 \003(\01321.dap"
  "r.InvokeServiceResponseEnvelope.Metadata"
  "Entry\032/\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001\"h\n\023DeleteStateEnvelope\022\021\n"
  "\tstoreName\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\014\n\004etag\030\003 "
  "\001(\t\022#\n\007options\030\004 \001(\0132\022.dapr.StateOptions"
  "\"L\n\021SaveStateEnvelope\022\021\n\tstoreName\030\001 \001(\t"
  "\022$\n\010requests\030\002 \003(\0132\022.dapr.StateRequest\"G"
  "\n\020GetStateEnvelope\022\021\n\tstoreName\030\001 \001(\t\022\013\n"
  "\003key\030\002 \001(\t\022\023\n\013consistency\030\003 \001(\t\"L\n\030GetSt"
  "ateResponseEnvelope\022\"\n\004data\030\001 \001(\0132\024.goog"
  "le.protobuf.Any\022\014\n\004etag\030\002 \001(\t\"\235\001\n\021GetSec"
  "retEnvelope\022\021\n\tstoreName\030\001 \001(\t\022\013\n\003key\030\002 "
  "\001(\t\0227\n\010metadata\030\003 \003(\0132%.dapr.GetSecretEn"
  "velope.MetadataEntry\032/\n\rMetadataEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\201\001\n\031GetSec"
  "retResponseEnvelope\0227\n\004data\030\001 \003(\0132).dapr"
  ".GetSecretResponseEnvelope.DataEntry\032+\n\t"
  "DataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
  "\001\"\267\001\n\025InvokeBindingEnvelope\022\014\n\004name\030\001 \001("
  "\t\022\"\n\004data\030\002 \001(\0132\024.google.protobuf.Any\022;\n"
  "\010metadata\030\003 \003(\0132).dapr.InvokeBindingEnve"
  "lope.MetadataEntry\032/\n\rMetadataEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\305\001\n\025InvokeSe"
  "rviceEnvelope\022\n\n\002id\030\001 \001(\t\022\016\n\006method\030\002 \001("
  "\t\022\"\n\004data\030\003 \001(\0132\024.google.protobuf.Any\022;\n"
  "\010metadata\030\004 \003(\0132).dapr.InvokeServiceEnve"
  "lope.MetadataEntry\032/\n\rMetadataEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"I\n\024PublishEv"
  "entEnvelope\022\r\n\005topic\030\001 \001(\t\022\"\n\004data\030\002 \001(\013"
  "2\024.google.protobuf.Any\"\312\001\n\005State\022\013\n\003key\030"
  "\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.google.protobuf.A"
  "ny\022\014\n\004etag\030\003 \001(\t\022+\n\010metadata\030\004 \003(\0132\031.dap"
  "r.State.MetadataEntry\022#\n\007options\030\005 \001(\0132\022"
  ".dapr.StateOptions\032/\n\rMetadataEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"`\n\014StateOpti"
  "ons\022\023\n\013concurrency\030\001 \001(\t\022\023\n\013consistency\030"
  "\002 \001(\t\022&\n\013retryPolicy\030\003 \001(\0132\021.dapr.RetryP"
  "olicy\"^\n\013RetryPolicy\022\021\n\tthreshold\030\001 \001(\005\022"
  "\017\n\007pattern\030\002 \001(\t\022+\n\010interval\030\003 \001(\0132\031.goo"
  "gle.protobuf.Duration\"\337\001\n\014StateRequest\022\013"
  "\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.google.prot"
  "obuf.Any\022\014\n\004etag\030\003 \001(\t\0222\n\010metadata\030\004 \003(\013"
  "2 .dapr.StateRequest.MetadataEntry\022*\n\007op"
  "tions\030\005 \001(\0132\031.dapr.StateRequestOptions\032/"
  "\n\rMetadataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t:\0028\001\"l\n\023StateRequestOptions\022\023\n\013concur"
  "rency\030\001 \001(\t\022\023\n\013consistency\030\002 \001(\t\022+\n\013retr"
  "yPolicy\030\003 \001(\0132\026.dapr.StateRetryPolicy\"c\n"
  "\020StateRetryPolicy\022\021\n\tthreshold\030\001 \001(\005\022\017\n\007"
  "pattern\030\002 \001(\t\022+\n\010interval\030\003 \001(\0132\031.google"
  ".protobuf.Duration2\374\003\n\004Dapr\022D\n\014PublishEv"
  "ent\022\032.dapr.PublishEventEnvelope\032\026.google"
  ".protobuf.Empty\"\000\022S\n\rInvokeService\022\033.dap"
  "r.InvokeServiceEnvelope\032#.dapr.InvokeSer"
  "viceResponseEnvelope\"\000\022F\n\rInvokeBinding\022"
  "\033.dapr.InvokeBindingEnvelope\032\026.google.pr"
  "otobuf.Empty\"\000\022D\n\010GetState\022\026.dapr.GetSta"
  "teEnvelope\032\036.dapr.GetStateResponseEnvelo"
  "pe\"\000\022G\n\tGetSecret\022\027.dapr.GetSecretEnvelo"
  "pe\032\037.dapr.GetSecretResponseEnvelope\"\000\022>\n"
  "\tSaveState\022\027.dapr.SaveStateEnvelope\032\026.go"
  "ogle.protobuf.Empty\"\000\022B\n\013DeleteState\022\031.d"
  "apr.DeleteStateEnvelope\032\026.google.protobu"
  "f.Empty\"\000B0\n\007io.daprB\nDaprProtos\252\002\030Dapr."
  "Client.Autogen.Grpcb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dapr_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dapr_2eproto_sccs[23] = {
  &scc_info_DeleteStateEnvelope_dapr_2eproto.base,
  &scc_info_GetSecretEnvelope_dapr_2eproto.base,
  &scc_info_GetSecretEnvelope_MetadataEntry_DoNotUse_dapr_2eproto.base,
  &scc_info_GetSecretResponseEnvelope_dapr_2eproto.base,
  &scc_info_GetSecretResponseEnvelope_DataEntry_DoNotUse_dapr_2eproto.base,
  &scc_info_GetStateEnvelope_dapr_2eproto.base,
  &scc_info_GetStateResponseEnvelope_dapr_2eproto.base,
  &scc_info_InvokeBindingEnvelope_dapr_2eproto.base,
  &scc_info_InvokeBindingEnvelope_MetadataEntry_DoNotUse_dapr_2eproto.base,
  &scc_info_InvokeServiceEnvelope_dapr_2eproto.base,
  &scc_info_InvokeServiceEnvelope_MetadataEntry_DoNotUse_dapr_2eproto.base,
  &scc_info_InvokeServiceResponseEnvelope_dapr_2eproto.base,
  &scc_info_InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse_dapr_2eproto.base,
  &scc_info_PublishEventEnvelope_dapr_2eproto.base,
  &scc_info_RetryPolicy_dapr_2eproto.base,
  &scc_info_SaveStateEnvelope_dapr_2eproto.base,
  &scc_info_State_dapr_2eproto.base,
  &scc_info_State_MetadataEntry_DoNotUse_dapr_2eproto.base,
  &scc_info_StateOptions_dapr_2eproto.base,
  &scc_info_StateRequest_dapr_2eproto.base,
  &scc_info_StateRequest_MetadataEntry_DoNotUse_dapr_2eproto.base,
  &scc_info_StateRequestOptions_dapr_2eproto.base,
  &scc_info_StateRetryPolicy_dapr_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dapr_2eproto_once;
static bool descriptor_table_dapr_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dapr_2eproto = {
  &descriptor_table_dapr_2eproto_initialized, descriptor_table_protodef_dapr_2eproto, "dapr.proto", 2787,
  &descriptor_table_dapr_2eproto_once, descriptor_table_dapr_2eproto_sccs, descriptor_table_dapr_2eproto_deps, 23, 3,
  schemas, file_default_instances, TableStruct_dapr_2eproto::offsets,
  file_level_metadata_dapr_2eproto, 23, file_level_enum_descriptors_dapr_2eproto, file_level_service_descriptors_dapr_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dapr_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dapr_2eproto), true);
namespace dapr {

// ===================================================================

InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse() {}
InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse::MergeFrom(const InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void InvokeServiceResponseEnvelope::InitAsDefaultInstance() {
  ::dapr::_InvokeServiceResponseEnvelope_default_instance_._instance.get_mutable()->data_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class InvokeServiceResponseEnvelope::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& data(const InvokeServiceResponseEnvelope* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
InvokeServiceResponseEnvelope::_Internal::data(const InvokeServiceResponseEnvelope* msg) {
  return *msg->data_;
}
void InvokeServiceResponseEnvelope::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
InvokeServiceResponseEnvelope::InvokeServiceResponseEnvelope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.InvokeServiceResponseEnvelope)
}
InvokeServiceResponseEnvelope::InvokeServiceResponseEnvelope(const InvokeServiceResponseEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  if (from._internal_has_data()) {
    data_ = new PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dapr.InvokeServiceResponseEnvelope)
}

void InvokeServiceResponseEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvokeServiceResponseEnvelope_dapr_2eproto.base);
  data_ = nullptr;
}

InvokeServiceResponseEnvelope::~InvokeServiceResponseEnvelope() {
  // @@protoc_insertion_point(destructor:dapr.InvokeServiceResponseEnvelope)
  SharedDtor();
}

void InvokeServiceResponseEnvelope::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void InvokeServiceResponseEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvokeServiceResponseEnvelope& InvokeServiceResponseEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvokeServiceResponseEnvelope_dapr_2eproto.base);
  return *internal_default_instance();
}


void InvokeServiceResponseEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.InvokeServiceResponseEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* InvokeServiceResponseEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvokeServiceResponseEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.InvokeServiceResponseEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // map<string, string> metadata = 2;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.InvokeServiceResponseEnvelope.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.InvokeServiceResponseEnvelope.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.InvokeServiceResponseEnvelope)
  return target;
}

size_t InvokeServiceResponseEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.InvokeServiceResponseEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.Any data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvokeServiceResponseEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.InvokeServiceResponseEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const InvokeServiceResponseEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvokeServiceResponseEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.InvokeServiceResponseEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.InvokeServiceResponseEnvelope)
    MergeFrom(*source);
  }
}

void InvokeServiceResponseEnvelope::MergeFrom(const InvokeServiceResponseEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.InvokeServiceResponseEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.has_data()) {
    _internal_mutable_data()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
}

void InvokeServiceResponseEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.InvokeServiceResponseEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvokeServiceResponseEnvelope::CopyFrom(const InvokeServiceResponseEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.InvokeServiceResponseEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeServiceResponseEnvelope::IsInitialized() const {
  return true;
}

void InvokeServiceResponseEnvelope::InternalSwap(InvokeServiceResponseEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeServiceResponseEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteStateEnvelope::InitAsDefaultInstance() {
  ::dapr::_DeleteStateEnvelope_default_instance_._instance.get_mutable()->options_ = const_cast< ::dapr::StateOptions*>(
      ::dapr::StateOptions::internal_default_instance());
}
class DeleteStateEnvelope::_Internal {
 public:
  static const ::dapr::StateOptions& options(const DeleteStateEnvelope* msg);
};

const ::dapr::StateOptions&
DeleteStateEnvelope::_Internal::options(const DeleteStateEnvelope* msg) {
  return *msg->options_;
}
DeleteStateEnvelope::DeleteStateEnvelope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.DeleteStateEnvelope)
}
DeleteStateEnvelope::DeleteStateEnvelope(const DeleteStateEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  storename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_storename().empty()) {
    storename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storename_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  etag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_etag().empty()) {
    etag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.etag_);
  }
  if (from._internal_has_options()) {
    options_ = new ::dapr::StateOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dapr.DeleteStateEnvelope)
}

void DeleteStateEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteStateEnvelope_dapr_2eproto.base);
  storename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  etag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

DeleteStateEnvelope::~DeleteStateEnvelope() {
  // @@protoc_insertion_point(destructor:dapr.DeleteStateEnvelope)
  SharedDtor();
}

void DeleteStateEnvelope::SharedDtor() {
  storename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  etag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void DeleteStateEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteStateEnvelope& DeleteStateEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteStateEnvelope_dapr_2eproto.base);
  return *internal_default_instance();
}


void DeleteStateEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.DeleteStateEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  storename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  etag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DeleteStateEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string storeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_storename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.DeleteStateEnvelope.storeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.DeleteStateEnvelope.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string etag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_etag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.DeleteStateEnvelope.etag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dapr.StateOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteStateEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.DeleteStateEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string storeName = 1;
  if (this->storename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_storename().data(), static_cast<int>(this->_internal_storename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.DeleteStateEnvelope.storeName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_storename(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.DeleteStateEnvelope.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string etag = 3;
  if (this->etag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_etag().data(), static_cast<int>(this->_internal_etag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.DeleteStateEnvelope.etag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_etag(), target);
  }

  // .dapr.StateOptions options = 4;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.DeleteStateEnvelope)
  return target;
}

size_t DeleteStateEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.DeleteStateEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string storeName = 1;
  if (this->storename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storename());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string etag = 3;
  if (this->etag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_etag());
  }

  // .dapr.StateOptions options = 4;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteStateEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.DeleteStateEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteStateEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteStateEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.DeleteStateEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.DeleteStateEnvelope)
    MergeFrom(*source);
  }
}

void DeleteStateEnvelope::MergeFrom(const DeleteStateEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.DeleteStateEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.storename().size() > 0) {

    storename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storename_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.etag().size() > 0) {

    etag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.etag_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::dapr::StateOptions::MergeFrom(from._internal_options());
  }
}

void DeleteStateEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.DeleteStateEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteStateEnvelope::CopyFrom(const DeleteStateEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.DeleteStateEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteStateEnvelope::IsInitialized() const {
  return true;
}

void DeleteStateEnvelope::InternalSwap(DeleteStateEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  storename_.Swap(&other->storename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  etag_.Swap(&other->etag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteStateEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveStateEnvelope::InitAsDefaultInstance() {
}
class SaveStateEnvelope::_Internal {
 public:
};

SaveStateEnvelope::SaveStateEnvelope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.SaveStateEnvelope)
}
SaveStateEnvelope::SaveStateEnvelope(const SaveStateEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  storename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_storename().empty()) {
    storename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storename_);
  }
  // @@protoc_insertion_point(copy_constructor:dapr.SaveStateEnvelope)
}

void SaveStateEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SaveStateEnvelope_dapr_2eproto.base);
  storename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SaveStateEnvelope::~SaveStateEnvelope() {
  // @@protoc_insertion_point(destructor:dapr.SaveStateEnvelope)
  SharedDtor();
}

void SaveStateEnvelope::SharedDtor() {
  storename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SaveStateEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveStateEnvelope& SaveStateEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveStateEnvelope_dapr_2eproto.base);
  return *internal_default_instance();
}


void SaveStateEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.SaveStateEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  storename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SaveStateEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string storeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_storename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.SaveStateEnvelope.storeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dapr.StateRequest requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveStateEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.SaveStateEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string storeName = 1;
  if (this->storename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_storename().data(), static_cast<int>(this->_internal_storename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.SaveStateEnvelope.storeName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_storename(), target);
  }

  // repeated .dapr.StateRequest requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.SaveStateEnvelope)
  return target;
}

size_t SaveStateEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.SaveStateEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dapr.StateRequest requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string storeName = 1;
  if (this->storename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveStateEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.SaveStateEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveStateEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveStateEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.SaveStateEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.SaveStateEnvelope)
    MergeFrom(*source);
  }
}

void SaveStateEnvelope::MergeFrom(const SaveStateEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.SaveStateEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from.storename().size() > 0) {

    storename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storename_);
  }
}

void SaveStateEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.SaveStateEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveStateEnvelope::CopyFrom(const SaveStateEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.SaveStateEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveStateEnvelope::IsInitialized() const {
  return true;
}

void SaveStateEnvelope::InternalSwap(SaveStateEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
  storename_.Swap(&other->storename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveStateEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStateEnvelope::InitAsDefaultInstance() {
}
class GetStateEnvelope::_Internal {
 public:
};

GetStateEnvelope::GetStateEnvelope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.GetStateEnvelope)
}
GetStateEnvelope::GetStateEnvelope(const GetStateEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  storename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_storename().empty()) {
    storename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storename_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  consistency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_consistency().empty()) {
    consistency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.consistency_);
  }
  // @@protoc_insertion_point(copy_constructor:dapr.GetStateEnvelope)
}

void GetStateEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStateEnvelope_dapr_2eproto.base);
  storename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consistency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetStateEnvelope::~GetStateEnvelope() {
  // @@protoc_insertion_point(destructor:dapr.GetStateEnvelope)
  SharedDtor();
}

void GetStateEnvelope::SharedDtor() {
  storename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consistency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetStateEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStateEnvelope& GetStateEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStateEnvelope_dapr_2eproto.base);
  return *internal_default_instance();
}


void GetStateEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.GetStateEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  storename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consistency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetStateEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string storeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_storename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.GetStateEnvelope.storeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.GetStateEnvelope.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string consistency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_consistency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.GetStateEnvelope.consistency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStateEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.GetStateEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string storeName = 1;
  if (this->storename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_storename().data(), static_cast<int>(this->_internal_storename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.GetStateEnvelope.storeName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_storename(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.GetStateEnvelope.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string consistency = 3;
  if (this->consistency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consistency().data(), static_cast<int>(this->_internal_consistency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.GetStateEnvelope.consistency");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_consistency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.GetStateEnvelope)
  return target;
}

size_t GetStateEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.GetStateEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string storeName = 1;
  if (this->storename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storename());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string consistency = 3;
  if (this->consistency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consistency());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStateEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.GetStateEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStateEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStateEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.GetStateEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.GetStateEnvelope)
    MergeFrom(*source);
  }
}

void GetStateEnvelope::MergeFrom(const GetStateEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.GetStateEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.storename().size() > 0) {

    storename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storename_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.consistency().size() > 0) {

    consistency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.consistency_);
  }
}

void GetStateEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.GetStateEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStateEnvelope::CopyFrom(const GetStateEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.GetStateEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStateEnvelope::IsInitialized() const {
  return true;
}

void GetStateEnvelope::InternalSwap(GetStateEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  storename_.Swap(&other->storename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  consistency_.Swap(&other->consistency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStateEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStateResponseEnvelope::InitAsDefaultInstance() {
  ::dapr::_GetStateResponseEnvelope_default_instance_._instance.get_mutable()->data_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class GetStateResponseEnvelope::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& data(const GetStateResponseEnvelope* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
GetStateResponseEnvelope::_Internal::data(const GetStateResponseEnvelope* msg) {
  return *msg->data_;
}
void GetStateResponseEnvelope::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
GetStateResponseEnvelope::GetStateResponseEnvelope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.GetStateResponseEnvelope)
}
GetStateResponseEnvelope::GetStateResponseEnvelope(const GetStateResponseEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  etag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_etag().empty()) {
    etag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.etag_);
  }
  if (from._internal_has_data()) {
    data_ = new PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dapr.GetStateResponseEnvelope)
}

void GetStateResponseEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStateResponseEnvelope_dapr_2eproto.base);
  etag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

GetStateResponseEnvelope::~GetStateResponseEnvelope() {
  // @@protoc_insertion_point(destructor:dapr.GetStateResponseEnvelope)
  SharedDtor();
}

void GetStateResponseEnvelope::SharedDtor() {
  etag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void GetStateResponseEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStateResponseEnvelope& GetStateResponseEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStateResponseEnvelope_dapr_2eproto.base);
  return *internal_default_instance();
}


void GetStateResponseEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.GetStateResponseEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  etag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetStateResponseEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string etag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_etag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.GetStateResponseEnvelope.etag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStateResponseEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.GetStateResponseEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // string etag = 2;
  if (this->etag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_etag().data(), static_cast<int>(this->_internal_etag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.GetStateResponseEnvelope.etag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_etag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.GetStateResponseEnvelope)
  return target;
}

size_t GetStateResponseEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.GetStateResponseEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string etag = 2;
  if (this->etag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_etag());
  }

  // .google.protobuf.Any data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStateResponseEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.GetStateResponseEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStateResponseEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStateResponseEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.GetStateResponseEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.GetStateResponseEnvelope)
    MergeFrom(*source);
  }
}

void GetStateResponseEnvelope::MergeFrom(const GetStateResponseEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.GetStateResponseEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.etag().size() > 0) {

    etag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.etag_);
  }
  if (from.has_data()) {
    _internal_mutable_data()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
}

void GetStateResponseEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.GetStateResponseEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStateResponseEnvelope::CopyFrom(const GetStateResponseEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.GetStateResponseEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStateResponseEnvelope::IsInitialized() const {
  return true;
}

void GetStateResponseEnvelope::InternalSwap(GetStateResponseEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  etag_.Swap(&other->etag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStateResponseEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GetSecretEnvelope_MetadataEntry_DoNotUse::GetSecretEnvelope_MetadataEntry_DoNotUse() {}
GetSecretEnvelope_MetadataEntry_DoNotUse::GetSecretEnvelope_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetSecretEnvelope_MetadataEntry_DoNotUse::MergeFrom(const GetSecretEnvelope_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetSecretEnvelope_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetSecretEnvelope_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GetSecretEnvelope::InitAsDefaultInstance() {
}
class GetSecretEnvelope::_Internal {
 public:
};

GetSecretEnvelope::GetSecretEnvelope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.GetSecretEnvelope)
}
GetSecretEnvelope::GetSecretEnvelope(const GetSecretEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  storename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_storename().empty()) {
    storename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storename_);
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:dapr.GetSecretEnvelope)
}

void GetSecretEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSecretEnvelope_dapr_2eproto.base);
  storename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSecretEnvelope::~GetSecretEnvelope() {
  // @@protoc_insertion_point(destructor:dapr.GetSecretEnvelope)
  SharedDtor();
}

void GetSecretEnvelope::SharedDtor() {
  storename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSecretEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSecretEnvelope& GetSecretEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSecretEnvelope_dapr_2eproto.base);
  return *internal_default_instance();
}


void GetSecretEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.GetSecretEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  storename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetSecretEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string storeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_storename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.GetSecretEnvelope.storeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.GetSecretEnvelope.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSecretEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.GetSecretEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string storeName = 1;
  if (this->storename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_storename().data(), static_cast<int>(this->_internal_storename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.GetSecretEnvelope.storeName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_storename(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.GetSecretEnvelope.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // map<string, string> metadata = 3;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.GetSecretEnvelope.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.GetSecretEnvelope.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetSecretEnvelope_MetadataEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = GetSecretEnvelope_MetadataEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.GetSecretEnvelope)
  return target;
}

size_t GetSecretEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.GetSecretEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += GetSecretEnvelope_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string storeName = 1;
  if (this->storename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_storename());
  }

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSecretEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.GetSecretEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSecretEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSecretEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.GetSecretEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.GetSecretEnvelope)
    MergeFrom(*source);
  }
}

void GetSecretEnvelope::MergeFrom(const GetSecretEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.GetSecretEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.storename().size() > 0) {

    storename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storename_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void GetSecretEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.GetSecretEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSecretEnvelope::CopyFrom(const GetSecretEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.GetSecretEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSecretEnvelope::IsInitialized() const {
  return true;
}

void GetSecretEnvelope::InternalSwap(GetSecretEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_);
  storename_.Swap(&other->storename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSecretEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GetSecretResponseEnvelope_DataEntry_DoNotUse::GetSecretResponseEnvelope_DataEntry_DoNotUse() {}
GetSecretResponseEnvelope_DataEntry_DoNotUse::GetSecretResponseEnvelope_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetSecretResponseEnvelope_DataEntry_DoNotUse::MergeFrom(const GetSecretResponseEnvelope_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetSecretResponseEnvelope_DataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetSecretResponseEnvelope_DataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GetSecretResponseEnvelope::InitAsDefaultInstance() {
}
class GetSecretResponseEnvelope::_Internal {
 public:
};

GetSecretResponseEnvelope::GetSecretResponseEnvelope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.GetSecretResponseEnvelope)
}
GetSecretResponseEnvelope::GetSecretResponseEnvelope(const GetSecretResponseEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  // @@protoc_insertion_point(copy_constructor:dapr.GetSecretResponseEnvelope)
}

void GetSecretResponseEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSecretResponseEnvelope_dapr_2eproto.base);
}

GetSecretResponseEnvelope::~GetSecretResponseEnvelope() {
  // @@protoc_insertion_point(destructor:dapr.GetSecretResponseEnvelope)
  SharedDtor();
}

void GetSecretResponseEnvelope::SharedDtor() {
}

void GetSecretResponseEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSecretResponseEnvelope& GetSecretResponseEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSecretResponseEnvelope_dapr_2eproto.base);
  return *internal_default_instance();
}


void GetSecretResponseEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.GetSecretResponseEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear();
}

const char* GetSecretResponseEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSecretResponseEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.GetSecretResponseEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> data = 1;
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.GetSecretResponseEnvelope.DataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.GetSecretResponseEnvelope.DataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetSecretResponseEnvelope_DataEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = GetSecretResponseEnvelope_DataEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.GetSecretResponseEnvelope)
  return target;
}

size_t GetSecretResponseEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.GetSecretResponseEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += GetSecretResponseEnvelope_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSecretResponseEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.GetSecretResponseEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSecretResponseEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSecretResponseEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.GetSecretResponseEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.GetSecretResponseEnvelope)
    MergeFrom(*source);
  }
}

void GetSecretResponseEnvelope::MergeFrom(const GetSecretResponseEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.GetSecretResponseEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void GetSecretResponseEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.GetSecretResponseEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSecretResponseEnvelope::CopyFrom(const GetSecretResponseEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.GetSecretResponseEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSecretResponseEnvelope::IsInitialized() const {
  return true;
}

void GetSecretResponseEnvelope::InternalSwap(GetSecretResponseEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSecretResponseEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

InvokeBindingEnvelope_MetadataEntry_DoNotUse::InvokeBindingEnvelope_MetadataEntry_DoNotUse() {}
InvokeBindingEnvelope_MetadataEntry_DoNotUse::InvokeBindingEnvelope_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InvokeBindingEnvelope_MetadataEntry_DoNotUse::MergeFrom(const InvokeBindingEnvelope_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InvokeBindingEnvelope_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void InvokeBindingEnvelope_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void InvokeBindingEnvelope::InitAsDefaultInstance() {
  ::dapr::_InvokeBindingEnvelope_default_instance_._instance.get_mutable()->data_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class InvokeBindingEnvelope::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& data(const InvokeBindingEnvelope* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
InvokeBindingEnvelope::_Internal::data(const InvokeBindingEnvelope* msg) {
  return *msg->data_;
}
void InvokeBindingEnvelope::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
InvokeBindingEnvelope::InvokeBindingEnvelope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.InvokeBindingEnvelope)
}
InvokeBindingEnvelope::InvokeBindingEnvelope(const InvokeBindingEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_data()) {
    data_ = new PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dapr.InvokeBindingEnvelope)
}

void InvokeBindingEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvokeBindingEnvelope_dapr_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

InvokeBindingEnvelope::~InvokeBindingEnvelope() {
  // @@protoc_insertion_point(destructor:dapr.InvokeBindingEnvelope)
  SharedDtor();
}

void InvokeBindingEnvelope::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void InvokeBindingEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvokeBindingEnvelope& InvokeBindingEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvokeBindingEnvelope_dapr_2eproto.base);
  return *internal_default_instance();
}


void InvokeBindingEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.InvokeBindingEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* InvokeBindingEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.InvokeBindingEnvelope.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvokeBindingEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.InvokeBindingEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.InvokeBindingEnvelope.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // map<string, string> metadata = 3;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.InvokeBindingEnvelope.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.InvokeBindingEnvelope.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InvokeBindingEnvelope_MetadataEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = InvokeBindingEnvelope_MetadataEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.InvokeBindingEnvelope)
  return target;
}

size_t InvokeBindingEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.InvokeBindingEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += InvokeBindingEnvelope_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvokeBindingEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.InvokeBindingEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const InvokeBindingEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvokeBindingEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.InvokeBindingEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.InvokeBindingEnvelope)
    MergeFrom(*source);
  }
}

void InvokeBindingEnvelope::MergeFrom(const InvokeBindingEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.InvokeBindingEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_data()) {
    _internal_mutable_data()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
}

void InvokeBindingEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.InvokeBindingEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvokeBindingEnvelope::CopyFrom(const InvokeBindingEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.InvokeBindingEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeBindingEnvelope::IsInitialized() const {
  return true;
}

void InvokeBindingEnvelope::InternalSwap(InvokeBindingEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeBindingEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

InvokeServiceEnvelope_MetadataEntry_DoNotUse::InvokeServiceEnvelope_MetadataEntry_DoNotUse() {}
InvokeServiceEnvelope_MetadataEntry_DoNotUse::InvokeServiceEnvelope_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InvokeServiceEnvelope_MetadataEntry_DoNotUse::MergeFrom(const InvokeServiceEnvelope_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InvokeServiceEnvelope_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void InvokeServiceEnvelope_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void InvokeServiceEnvelope::InitAsDefaultInstance() {
  ::dapr::_InvokeServiceEnvelope_default_instance_._instance.get_mutable()->data_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class InvokeServiceEnvelope::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& data(const InvokeServiceEnvelope* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
InvokeServiceEnvelope::_Internal::data(const InvokeServiceEnvelope* msg) {
  return *msg->data_;
}
void InvokeServiceEnvelope::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
InvokeServiceEnvelope::InvokeServiceEnvelope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.InvokeServiceEnvelope)
}
InvokeServiceEnvelope::InvokeServiceEnvelope(const InvokeServiceEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from._internal_has_data()) {
    data_ = new PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dapr.InvokeServiceEnvelope)
}

void InvokeServiceEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvokeServiceEnvelope_dapr_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

InvokeServiceEnvelope::~InvokeServiceEnvelope() {
  // @@protoc_insertion_point(destructor:dapr.InvokeServiceEnvelope)
  SharedDtor();
}

void InvokeServiceEnvelope::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void InvokeServiceEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvokeServiceEnvelope& InvokeServiceEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvokeServiceEnvelope_dapr_2eproto.base);
  return *internal_default_instance();
}


void InvokeServiceEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.InvokeServiceEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* InvokeServiceEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.InvokeServiceEnvelope.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.InvokeServiceEnvelope.method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvokeServiceEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.InvokeServiceEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.InvokeServiceEnvelope.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string method = 2;
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.InvokeServiceEnvelope.method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method(), target);
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  // map<string, string> metadata = 4;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.InvokeServiceEnvelope.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.InvokeServiceEnvelope.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InvokeServiceEnvelope_MetadataEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = InvokeServiceEnvelope_MetadataEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.InvokeServiceEnvelope)
  return target;
}

size_t InvokeServiceEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.InvokeServiceEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += InvokeServiceEnvelope_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string method = 2;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // .google.protobuf.Any data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvokeServiceEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.InvokeServiceEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const InvokeServiceEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvokeServiceEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.InvokeServiceEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.InvokeServiceEnvelope)
    MergeFrom(*source);
  }
}

void InvokeServiceEnvelope::MergeFrom(const InvokeServiceEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.InvokeServiceEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.has_data()) {
    _internal_mutable_data()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
}

void InvokeServiceEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.InvokeServiceEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvokeServiceEnvelope::CopyFrom(const InvokeServiceEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.InvokeServiceEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvokeServiceEnvelope::IsInitialized() const {
  return true;
}

void InvokeServiceEnvelope::InternalSwap(InvokeServiceEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvokeServiceEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishEventEnvelope::InitAsDefaultInstance() {
  ::dapr::_PublishEventEnvelope_default_instance_._instance.get_mutable()->data_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class PublishEventEnvelope::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& data(const PublishEventEnvelope* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
PublishEventEnvelope::_Internal::data(const PublishEventEnvelope* msg) {
  return *msg->data_;
}
void PublishEventEnvelope::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
PublishEventEnvelope::PublishEventEnvelope()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.PublishEventEnvelope)
}
PublishEventEnvelope::PublishEventEnvelope(const PublishEventEnvelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from._internal_has_data()) {
    data_ = new PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dapr.PublishEventEnvelope)
}

void PublishEventEnvelope::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishEventEnvelope_dapr_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_ = nullptr;
}

PublishEventEnvelope::~PublishEventEnvelope() {
  // @@protoc_insertion_point(destructor:dapr.PublishEventEnvelope)
  SharedDtor();
}

void PublishEventEnvelope::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void PublishEventEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishEventEnvelope& PublishEventEnvelope::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishEventEnvelope_dapr_2eproto.base);
  return *internal_default_instance();
}


void PublishEventEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.PublishEventEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PublishEventEnvelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.PublishEventEnvelope.topic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishEventEnvelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.PublishEventEnvelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.PublishEventEnvelope.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.PublishEventEnvelope)
  return target;
}

size_t PublishEventEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.PublishEventEnvelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // .google.protobuf.Any data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishEventEnvelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.PublishEventEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishEventEnvelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishEventEnvelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.PublishEventEnvelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.PublishEventEnvelope)
    MergeFrom(*source);
  }
}

void PublishEventEnvelope::MergeFrom(const PublishEventEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.PublishEventEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_data()) {
    _internal_mutable_data()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
}

void PublishEventEnvelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.PublishEventEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishEventEnvelope::CopyFrom(const PublishEventEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.PublishEventEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishEventEnvelope::IsInitialized() const {
  return true;
}

void PublishEventEnvelope::InternalSwap(PublishEventEnvelope* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishEventEnvelope::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

State_MetadataEntry_DoNotUse::State_MetadataEntry_DoNotUse() {}
State_MetadataEntry_DoNotUse::State_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void State_MetadataEntry_DoNotUse::MergeFrom(const State_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata State_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void State_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void State::InitAsDefaultInstance() {
  ::dapr::_State_default_instance_._instance.get_mutable()->value_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::dapr::_State_default_instance_._instance.get_mutable()->options_ = const_cast< ::dapr::StateOptions*>(
      ::dapr::StateOptions::internal_default_instance());
}
class State::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& value(const State* msg);
  static const ::dapr::StateOptions& options(const State* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
State::_Internal::value(const State* msg) {
  return *msg->value_;
}
const ::dapr::StateOptions&
State::_Internal::options(const State* msg) {
  return *msg->options_;
}
void State::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
State::State()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  etag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_etag().empty()) {
    etag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.etag_);
  }
  if (from._internal_has_value()) {
    value_ = new PROTOBUF_NAMESPACE_ID::Any(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::dapr::StateOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dapr.State)
}

void State::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_State_dapr_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  etag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&value_)) + sizeof(options_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:dapr.State)
  SharedDtor();
}

void State::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  etag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete options_;
}

void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State& State::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_State_dapr_2eproto.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  etag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.State.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string etag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_etag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.State.etag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .dapr.StateOptions options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.State.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  // string etag = 3;
  if (this->etag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_etag().data(), static_cast<int>(this->_internal_etag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.State.etag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_etag(), target);
  }

  // map<string, string> metadata = 4;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.State.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.State.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = State_MetadataEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = State_MetadataEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .dapr.StateOptions options = 5;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.State)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += State_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string etag = 3;
  if (this->etag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_etag());
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .dapr.StateOptions options = 5;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<State>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.State)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.etag().size() > 0) {

    etag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.etag_);
  }
  if (from.has_value()) {
    _internal_mutable_value()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_value());
  }
  if (from.has_options()) {
    _internal_mutable_options()->::dapr::StateOptions::MergeFrom(from._internal_options());
  }
}

void State::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  etag_.Swap(&other->etag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateOptions::InitAsDefaultInstance() {
  ::dapr::_StateOptions_default_instance_._instance.get_mutable()->retrypolicy_ = const_cast< ::dapr::RetryPolicy*>(
      ::dapr::RetryPolicy::internal_default_instance());
}
class StateOptions::_Internal {
 public:
  static const ::dapr::RetryPolicy& retrypolicy(const StateOptions* msg);
};

const ::dapr::RetryPolicy&
StateOptions::_Internal::retrypolicy(const StateOptions* msg) {
  return *msg->retrypolicy_;
}
StateOptions::StateOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.StateOptions)
}
StateOptions::StateOptions(const StateOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concurrency().empty()) {
    concurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concurrency_);
  }
  consistency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_consistency().empty()) {
    consistency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.consistency_);
  }
  if (from._internal_has_retrypolicy()) {
    retrypolicy_ = new ::dapr::RetryPolicy(*from.retrypolicy_);
  } else {
    retrypolicy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dapr.StateOptions)
}

void StateOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateOptions_dapr_2eproto.base);
  concurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consistency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  retrypolicy_ = nullptr;
}

StateOptions::~StateOptions() {
  // @@protoc_insertion_point(destructor:dapr.StateOptions)
  SharedDtor();
}

void StateOptions::SharedDtor() {
  concurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consistency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete retrypolicy_;
}

void StateOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateOptions& StateOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateOptions_dapr_2eproto.base);
  return *internal_default_instance();
}


void StateOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.StateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consistency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && retrypolicy_ != nullptr) {
    delete retrypolicy_;
  }
  retrypolicy_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StateOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string concurrency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_concurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.StateOptions.concurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string consistency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_consistency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.StateOptions.consistency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dapr.RetryPolicy retryPolicy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_retrypolicy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.StateOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string concurrency = 1;
  if (this->concurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concurrency().data(), static_cast<int>(this->_internal_concurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.StateOptions.concurrency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_concurrency(), target);
  }

  // string consistency = 2;
  if (this->consistency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consistency().data(), static_cast<int>(this->_internal_consistency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.StateOptions.consistency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_consistency(), target);
  }

  // .dapr.RetryPolicy retryPolicy = 3;
  if (this->has_retrypolicy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::retrypolicy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.StateOptions)
  return target;
}

size_t StateOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.StateOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concurrency = 1;
  if (this->concurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concurrency());
  }

  // string consistency = 2;
  if (this->consistency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consistency());
  }

  // .dapr.RetryPolicy retryPolicy = 3;
  if (this->has_retrypolicy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *retrypolicy_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.StateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const StateOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.StateOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.StateOptions)
    MergeFrom(*source);
  }
}

void StateOptions::MergeFrom(const StateOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.StateOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concurrency().size() > 0) {

    concurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concurrency_);
  }
  if (from.consistency().size() > 0) {

    consistency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.consistency_);
  }
  if (from.has_retrypolicy()) {
    _internal_mutable_retrypolicy()->::dapr::RetryPolicy::MergeFrom(from._internal_retrypolicy());
  }
}

void StateOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.StateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateOptions::CopyFrom(const StateOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.StateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateOptions::IsInitialized() const {
  return true;
}

void StateOptions::InternalSwap(StateOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concurrency_.Swap(&other->concurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  consistency_.Swap(&other->consistency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(retrypolicy_, other->retrypolicy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetryPolicy::InitAsDefaultInstance() {
  ::dapr::_RetryPolicy_default_instance_._instance.get_mutable()->interval_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class RetryPolicy::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& interval(const RetryPolicy* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
RetryPolicy::_Internal::interval(const RetryPolicy* msg) {
  return *msg->interval_;
}
void RetryPolicy::clear_interval() {
  if (GetArenaNoVirtual() == nullptr && interval_ != nullptr) {
    delete interval_;
  }
  interval_ = nullptr;
}
RetryPolicy::RetryPolicy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.RetryPolicy)
}
RetryPolicy::RetryPolicy(const RetryPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pattern().empty()) {
    pattern_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  if (from._internal_has_interval()) {
    interval_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.interval_);
  } else {
    interval_ = nullptr;
  }
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:dapr.RetryPolicy)
}

void RetryPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetryPolicy_dapr_2eproto.base);
  pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(threshold_));
}

RetryPolicy::~RetryPolicy() {
  // @@protoc_insertion_point(destructor:dapr.RetryPolicy)
  SharedDtor();
}

void RetryPolicy::SharedDtor() {
  pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete interval_;
}

void RetryPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetryPolicy& RetryPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetryPolicy_dapr_2eproto.base);
  return *internal_default_instance();
}


void RetryPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.RetryPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattern_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && interval_ != nullptr) {
    delete interval_;
  }
  interval_ = nullptr;
  threshold_ = 0;
  _internal_metadata_.Clear();
}

const char* RetryPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.RetryPolicy.pattern"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RetryPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.RetryPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 threshold = 1;
  if (this->threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_threshold(), target);
  }

  // string pattern = 2;
  if (this->pattern().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pattern().data(), static_cast<int>(this->_internal_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.RetryPolicy.pattern");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pattern(), target);
  }

  // .google.protobuf.Duration interval = 3;
  if (this->has_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::interval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.RetryPolicy)
  return target;
}

size_t RetryPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.RetryPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pattern = 2;
  if (this->pattern().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pattern());
  }

  // .google.protobuf.Duration interval = 3;
  if (this->has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interval_);
  }

  // int32 threshold = 1;
  if (this->threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_threshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetryPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.RetryPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const RetryPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetryPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.RetryPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.RetryPolicy)
    MergeFrom(*source);
  }
}

void RetryPolicy::MergeFrom(const RetryPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.RetryPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pattern().size() > 0) {

    pattern_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  if (from.has_interval()) {
    _internal_mutable_interval()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_interval());
  }
  if (from.threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
}

void RetryPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.RetryPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetryPolicy::CopyFrom(const RetryPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.RetryPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetryPolicy::IsInitialized() const {
  return true;
}

void RetryPolicy::InternalSwap(RetryPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pattern_.Swap(&other->pattern_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(interval_, other->interval_);
  swap(threshold_, other->threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetryPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

StateRequest_MetadataEntry_DoNotUse::StateRequest_MetadataEntry_DoNotUse() {}
StateRequest_MetadataEntry_DoNotUse::StateRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StateRequest_MetadataEntry_DoNotUse::MergeFrom(const StateRequest_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StateRequest_MetadataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void StateRequest_MetadataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void StateRequest::InitAsDefaultInstance() {
  ::dapr::_StateRequest_default_instance_._instance.get_mutable()->value_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::dapr::_StateRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::dapr::StateRequestOptions*>(
      ::dapr::StateRequestOptions::internal_default_instance());
}
class StateRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& value(const StateRequest* msg);
  static const ::dapr::StateRequestOptions& options(const StateRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
StateRequest::_Internal::value(const StateRequest* msg) {
  return *msg->value_;
}
const ::dapr::StateRequestOptions&
StateRequest::_Internal::options(const StateRequest* msg) {
  return *msg->options_;
}
void StateRequest::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
StateRequest::StateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.StateRequest)
}
StateRequest::StateRequest(const StateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  etag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_etag().empty()) {
    etag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.etag_);
  }
  if (from._internal_has_value()) {
    value_ = new PROTOBUF_NAMESPACE_ID::Any(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::dapr::StateRequestOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dapr.StateRequest)
}

void StateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateRequest_dapr_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  etag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&value_)) + sizeof(options_));
}

StateRequest::~StateRequest() {
  // @@protoc_insertion_point(destructor:dapr.StateRequest)
  SharedDtor();
}

void StateRequest::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  etag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete options_;
}

void StateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateRequest& StateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateRequest_dapr_2eproto.base);
  return *internal_default_instance();
}


void StateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.StateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  etag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.StateRequest.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string etag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_etag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.StateRequest.etag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .dapr.StateRequestOptions options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.StateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.StateRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  // string etag = 3;
  if (this->etag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_etag().data(), static_cast<int>(this->_internal_etag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.StateRequest.etag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_etag(), target);
  }

  // map<string, string> metadata = 4;
  if (!this->_internal_metadata().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.StateRequest.MetadataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "dapr.StateRequest.MetadataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_metadata().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_metadata().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StateRequest_MetadataEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_metadata().begin();
          it != this->_internal_metadata().end(); ++it) {
        target = StateRequest_MetadataEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .dapr.StateRequestOptions options = 5;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.StateRequest)
  return target;
}

size_t StateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.StateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += StateRequest_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string etag = 3;
  if (this->etag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_etag());
  }

  // .google.protobuf.Any value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .dapr.StateRequestOptions options = 5;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.StateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.StateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.StateRequest)
    MergeFrom(*source);
  }
}

void StateRequest::MergeFrom(const StateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.StateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.etag().size() > 0) {

    etag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.etag_);
  }
  if (from.has_value()) {
    _internal_mutable_value()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_value());
  }
  if (from.has_options()) {
    _internal_mutable_options()->::dapr::StateRequestOptions::MergeFrom(from._internal_options());
  }
}

void StateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.StateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateRequest::CopyFrom(const StateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.StateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateRequest::IsInitialized() const {
  return true;
}

void StateRequest::InternalSwap(StateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  metadata_.Swap(&other->metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  etag_.Swap(&other->etag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateRequestOptions::InitAsDefaultInstance() {
  ::dapr::_StateRequestOptions_default_instance_._instance.get_mutable()->retrypolicy_ = const_cast< ::dapr::StateRetryPolicy*>(
      ::dapr::StateRetryPolicy::internal_default_instance());
}
class StateRequestOptions::_Internal {
 public:
  static const ::dapr::StateRetryPolicy& retrypolicy(const StateRequestOptions* msg);
};

const ::dapr::StateRetryPolicy&
StateRequestOptions::_Internal::retrypolicy(const StateRequestOptions* msg) {
  return *msg->retrypolicy_;
}
StateRequestOptions::StateRequestOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.StateRequestOptions)
}
StateRequestOptions::StateRequestOptions(const StateRequestOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  concurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_concurrency().empty()) {
    concurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concurrency_);
  }
  consistency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_consistency().empty()) {
    consistency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.consistency_);
  }
  if (from._internal_has_retrypolicy()) {
    retrypolicy_ = new ::dapr::StateRetryPolicy(*from.retrypolicy_);
  } else {
    retrypolicy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dapr.StateRequestOptions)
}

void StateRequestOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateRequestOptions_dapr_2eproto.base);
  concurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consistency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  retrypolicy_ = nullptr;
}

StateRequestOptions::~StateRequestOptions() {
  // @@protoc_insertion_point(destructor:dapr.StateRequestOptions)
  SharedDtor();
}

void StateRequestOptions::SharedDtor() {
  concurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consistency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete retrypolicy_;
}

void StateRequestOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateRequestOptions& StateRequestOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateRequestOptions_dapr_2eproto.base);
  return *internal_default_instance();
}


void StateRequestOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.StateRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  concurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consistency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && retrypolicy_ != nullptr) {
    delete retrypolicy_;
  }
  retrypolicy_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StateRequestOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string concurrency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_concurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.StateRequestOptions.concurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string consistency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_consistency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.StateRequestOptions.consistency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dapr.StateRetryPolicy retryPolicy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_retrypolicy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateRequestOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.StateRequestOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string concurrency = 1;
  if (this->concurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_concurrency().data(), static_cast<int>(this->_internal_concurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.StateRequestOptions.concurrency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_concurrency(), target);
  }

  // string consistency = 2;
  if (this->consistency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consistency().data(), static_cast<int>(this->_internal_consistency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.StateRequestOptions.consistency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_consistency(), target);
  }

  // .dapr.StateRetryPolicy retryPolicy = 3;
  if (this->has_retrypolicy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::retrypolicy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.StateRequestOptions)
  return target;
}

size_t StateRequestOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.StateRequestOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string concurrency = 1;
  if (this->concurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_concurrency());
  }

  // string consistency = 2;
  if (this->consistency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consistency());
  }

  // .dapr.StateRetryPolicy retryPolicy = 3;
  if (this->has_retrypolicy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *retrypolicy_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateRequestOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.StateRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const StateRequestOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateRequestOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.StateRequestOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.StateRequestOptions)
    MergeFrom(*source);
  }
}

void StateRequestOptions::MergeFrom(const StateRequestOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.StateRequestOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.concurrency().size() > 0) {

    concurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.concurrency_);
  }
  if (from.consistency().size() > 0) {

    consistency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.consistency_);
  }
  if (from.has_retrypolicy()) {
    _internal_mutable_retrypolicy()->::dapr::StateRetryPolicy::MergeFrom(from._internal_retrypolicy());
  }
}

void StateRequestOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.StateRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateRequestOptions::CopyFrom(const StateRequestOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.StateRequestOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateRequestOptions::IsInitialized() const {
  return true;
}

void StateRequestOptions::InternalSwap(StateRequestOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  concurrency_.Swap(&other->concurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  consistency_.Swap(&other->consistency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(retrypolicy_, other->retrypolicy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateRequestOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateRetryPolicy::InitAsDefaultInstance() {
  ::dapr::_StateRetryPolicy_default_instance_._instance.get_mutable()->interval_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class StateRetryPolicy::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& interval(const StateRetryPolicy* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
StateRetryPolicy::_Internal::interval(const StateRetryPolicy* msg) {
  return *msg->interval_;
}
void StateRetryPolicy::clear_interval() {
  if (GetArenaNoVirtual() == nullptr && interval_ != nullptr) {
    delete interval_;
  }
  interval_ = nullptr;
}
StateRetryPolicy::StateRetryPolicy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dapr.StateRetryPolicy)
}
StateRetryPolicy::StateRetryPolicy(const StateRetryPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pattern().empty()) {
    pattern_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  if (from._internal_has_interval()) {
    interval_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.interval_);
  } else {
    interval_ = nullptr;
  }
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:dapr.StateRetryPolicy)
}

void StateRetryPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateRetryPolicy_dapr_2eproto.base);
  pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(threshold_));
}

StateRetryPolicy::~StateRetryPolicy() {
  // @@protoc_insertion_point(destructor:dapr.StateRetryPolicy)
  SharedDtor();
}

void StateRetryPolicy::SharedDtor() {
  pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete interval_;
}

void StateRetryPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateRetryPolicy& StateRetryPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateRetryPolicy_dapr_2eproto.base);
  return *internal_default_instance();
}


void StateRetryPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:dapr.StateRetryPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pattern_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && interval_ != nullptr) {
    delete interval_;
  }
  interval_ = nullptr;
  threshold_ = 0;
  _internal_metadata_.Clear();
}

const char* StateRetryPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dapr.StateRetryPolicy.pattern"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateRetryPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dapr.StateRetryPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 threshold = 1;
  if (this->threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_threshold(), target);
  }

  // string pattern = 2;
  if (this->pattern().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pattern().data(), static_cast<int>(this->_internal_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dapr.StateRetryPolicy.pattern");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pattern(), target);
  }

  // .google.protobuf.Duration interval = 3;
  if (this->has_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::interval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dapr.StateRetryPolicy)
  return target;
}

size_t StateRetryPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dapr.StateRetryPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pattern = 2;
  if (this->pattern().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pattern());
  }

  // .google.protobuf.Duration interval = 3;
  if (this->has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interval_);
  }

  // int32 threshold = 1;
  if (this->threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_threshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateRetryPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dapr.StateRetryPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const StateRetryPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateRetryPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dapr.StateRetryPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dapr.StateRetryPolicy)
    MergeFrom(*source);
  }
}

void StateRetryPolicy::MergeFrom(const StateRetryPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dapr.StateRetryPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pattern().size() > 0) {

    pattern_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  if (from.has_interval()) {
    _internal_mutable_interval()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_interval());
  }
  if (from.threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
}

void StateRetryPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dapr.StateRetryPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateRetryPolicy::CopyFrom(const StateRetryPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dapr.StateRetryPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateRetryPolicy::IsInitialized() const {
  return true;
}

void StateRetryPolicy::InternalSwap(StateRetryPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pattern_.Swap(&other->pattern_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(interval_, other->interval_);
  swap(threshold_, other->threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateRetryPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dapr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dapr::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::dapr::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::InvokeServiceResponseEnvelope* Arena::CreateMaybeMessage< ::dapr::InvokeServiceResponseEnvelope >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::InvokeServiceResponseEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::DeleteStateEnvelope* Arena::CreateMaybeMessage< ::dapr::DeleteStateEnvelope >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::DeleteStateEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::SaveStateEnvelope* Arena::CreateMaybeMessage< ::dapr::SaveStateEnvelope >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::SaveStateEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::GetStateEnvelope* Arena::CreateMaybeMessage< ::dapr::GetStateEnvelope >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::GetStateEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::GetStateResponseEnvelope* Arena::CreateMaybeMessage< ::dapr::GetStateResponseEnvelope >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::GetStateResponseEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::GetSecretEnvelope_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::dapr::GetSecretEnvelope_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::GetSecretEnvelope_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::GetSecretEnvelope* Arena::CreateMaybeMessage< ::dapr::GetSecretEnvelope >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::GetSecretEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::GetSecretResponseEnvelope_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::dapr::GetSecretResponseEnvelope_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::GetSecretResponseEnvelope_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::GetSecretResponseEnvelope* Arena::CreateMaybeMessage< ::dapr::GetSecretResponseEnvelope >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::GetSecretResponseEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::InvokeBindingEnvelope_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::dapr::InvokeBindingEnvelope_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::InvokeBindingEnvelope_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::InvokeBindingEnvelope* Arena::CreateMaybeMessage< ::dapr::InvokeBindingEnvelope >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::InvokeBindingEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::InvokeServiceEnvelope_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::dapr::InvokeServiceEnvelope_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::InvokeServiceEnvelope_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::InvokeServiceEnvelope* Arena::CreateMaybeMessage< ::dapr::InvokeServiceEnvelope >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::InvokeServiceEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::PublishEventEnvelope* Arena::CreateMaybeMessage< ::dapr::PublishEventEnvelope >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::PublishEventEnvelope >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::State_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::dapr::State_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::State_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::State* Arena::CreateMaybeMessage< ::dapr::State >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::State >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::StateOptions* Arena::CreateMaybeMessage< ::dapr::StateOptions >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::StateOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::RetryPolicy* Arena::CreateMaybeMessage< ::dapr::RetryPolicy >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::RetryPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::StateRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage< ::dapr::StateRequest_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::StateRequest_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::StateRequest* Arena::CreateMaybeMessage< ::dapr::StateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::StateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::StateRequestOptions* Arena::CreateMaybeMessage< ::dapr::StateRequestOptions >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::StateRequestOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::dapr::StateRetryPolicy* Arena::CreateMaybeMessage< ::dapr::StateRetryPolicy >(Arena* arena) {
  return Arena::CreateInternal< ::dapr::StateRetryPolicy >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
