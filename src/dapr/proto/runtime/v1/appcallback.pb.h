// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dapr/proto/runtime/v1/appcallback.proto

#ifndef PROTOBUF_INCLUDED_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto
#define PROTOBUF_INCLUDED_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "dapr/proto/common/v1/common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto 

namespace protobuf_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto
namespace dapr {
namespace proto {
namespace runtime {
namespace v1 {
class BindingEventRequest;
class BindingEventRequestDefaultTypeInternal;
extern BindingEventRequestDefaultTypeInternal _BindingEventRequest_default_instance_;
class BindingEventRequest_MetadataEntry_DoNotUse;
class BindingEventRequest_MetadataEntry_DoNotUseDefaultTypeInternal;
extern BindingEventRequest_MetadataEntry_DoNotUseDefaultTypeInternal _BindingEventRequest_MetadataEntry_DoNotUse_default_instance_;
class BindingEventResponse;
class BindingEventResponseDefaultTypeInternal;
extern BindingEventResponseDefaultTypeInternal _BindingEventResponse_default_instance_;
class ListInputBindingsResponse;
class ListInputBindingsResponseDefaultTypeInternal;
extern ListInputBindingsResponseDefaultTypeInternal _ListInputBindingsResponse_default_instance_;
class ListTopicSubscriptionsResponse;
class ListTopicSubscriptionsResponseDefaultTypeInternal;
extern ListTopicSubscriptionsResponseDefaultTypeInternal _ListTopicSubscriptionsResponse_default_instance_;
class TopicEventRequest;
class TopicEventRequestDefaultTypeInternal;
extern TopicEventRequestDefaultTypeInternal _TopicEventRequest_default_instance_;
class TopicSubscription;
class TopicSubscriptionDefaultTypeInternal;
extern TopicSubscriptionDefaultTypeInternal _TopicSubscription_default_instance_;
class TopicSubscription_MetadataEntry_DoNotUse;
class TopicSubscription_MetadataEntry_DoNotUseDefaultTypeInternal;
extern TopicSubscription_MetadataEntry_DoNotUseDefaultTypeInternal _TopicSubscription_MetadataEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace runtime
}  // namespace proto
}  // namespace dapr
namespace google {
namespace protobuf {
template<> ::dapr::proto::runtime::v1::BindingEventRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::BindingEventRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::BindingEventRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::BindingEventRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::proto::runtime::v1::BindingEventResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::BindingEventResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::ListInputBindingsResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::ListInputBindingsResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::ListTopicSubscriptionsResponse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::ListTopicSubscriptionsResponse>(Arena*);
template<> ::dapr::proto::runtime::v1::TopicEventRequest* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::TopicEventRequest>(Arena*);
template<> ::dapr::proto::runtime::v1::TopicSubscription* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::TopicSubscription>(Arena*);
template<> ::dapr::proto::runtime::v1::TopicSubscription_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::proto::runtime::v1::TopicSubscription_MetadataEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dapr {
namespace proto {
namespace runtime {
namespace v1 {

enum BindingEventResponse_BindingEventConcurrency {
  BindingEventResponse_BindingEventConcurrency_SEQUENTIAL = 0,
  BindingEventResponse_BindingEventConcurrency_PARALLEL = 1,
  BindingEventResponse_BindingEventConcurrency_BindingEventResponse_BindingEventConcurrency_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BindingEventResponse_BindingEventConcurrency_BindingEventResponse_BindingEventConcurrency_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BindingEventResponse_BindingEventConcurrency_IsValid(int value);
const BindingEventResponse_BindingEventConcurrency BindingEventResponse_BindingEventConcurrency_BindingEventConcurrency_MIN = BindingEventResponse_BindingEventConcurrency_SEQUENTIAL;
const BindingEventResponse_BindingEventConcurrency BindingEventResponse_BindingEventConcurrency_BindingEventConcurrency_MAX = BindingEventResponse_BindingEventConcurrency_PARALLEL;
const int BindingEventResponse_BindingEventConcurrency_BindingEventConcurrency_ARRAYSIZE = BindingEventResponse_BindingEventConcurrency_BindingEventConcurrency_MAX + 1;

const ::google::protobuf::EnumDescriptor* BindingEventResponse_BindingEventConcurrency_descriptor();
inline const ::std::string& BindingEventResponse_BindingEventConcurrency_Name(BindingEventResponse_BindingEventConcurrency value) {
  return ::google::protobuf::internal::NameOfEnum(
    BindingEventResponse_BindingEventConcurrency_descriptor(), value);
}
inline bool BindingEventResponse_BindingEventConcurrency_Parse(
    const ::std::string& name, BindingEventResponse_BindingEventConcurrency* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BindingEventResponse_BindingEventConcurrency>(
    BindingEventResponse_BindingEventConcurrency_descriptor(), name, value);
}
// ===================================================================

class TopicEventRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TopicEventRequest) */ {
 public:
  TopicEventRequest();
  virtual ~TopicEventRequest();

  TopicEventRequest(const TopicEventRequest& from);

  inline TopicEventRequest& operator=(const TopicEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicEventRequest(TopicEventRequest&& from) noexcept
    : TopicEventRequest() {
    *this = ::std::move(from);
  }

  inline TopicEventRequest& operator=(TopicEventRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicEventRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicEventRequest* internal_default_instance() {
    return reinterpret_cast<const TopicEventRequest*>(
               &_TopicEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TopicEventRequest* other);
  friend void swap(TopicEventRequest& a, TopicEventRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicEventRequest* New() const final {
    return CreateMaybeMessage<TopicEventRequest>(NULL);
  }

  TopicEventRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicEventRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicEventRequest& from);
  void MergeFrom(const TopicEventRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicEventRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string source = 2;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string spec_version = 4;
  void clear_spec_version();
  static const int kSpecVersionFieldNumber = 4;
  const ::std::string& spec_version() const;
  void set_spec_version(const ::std::string& value);
  #if LANG_CXX11
  void set_spec_version(::std::string&& value);
  #endif
  void set_spec_version(const char* value);
  void set_spec_version(const char* value, size_t size);
  ::std::string* mutable_spec_version();
  ::std::string* release_spec_version();
  void set_allocated_spec_version(::std::string* spec_version);

  // string data_content_type = 5;
  void clear_data_content_type();
  static const int kDataContentTypeFieldNumber = 5;
  const ::std::string& data_content_type() const;
  void set_data_content_type(const ::std::string& value);
  #if LANG_CXX11
  void set_data_content_type(::std::string&& value);
  #endif
  void set_data_content_type(const char* value);
  void set_data_content_type(const char* value, size_t size);
  ::std::string* mutable_data_content_type();
  ::std::string* release_data_content_type();
  void set_allocated_data_content_type(::std::string* data_content_type);

  // string topic = 6;
  void clear_topic();
  static const int kTopicFieldNumber = 6;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // bytes data = 7;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TopicEventRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr spec_version_;
  ::google::protobuf::internal::ArenaStringPtr data_content_type_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BindingEventRequest_MetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<BindingEventRequest_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<BindingEventRequest_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  BindingEventRequest_MetadataEntry_DoNotUse();
  BindingEventRequest_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const BindingEventRequest_MetadataEntry_DoNotUse& other);
  static const BindingEventRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BindingEventRequest_MetadataEntry_DoNotUse*>(&_BindingEventRequest_MetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class BindingEventRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.BindingEventRequest) */ {
 public:
  BindingEventRequest();
  virtual ~BindingEventRequest();

  BindingEventRequest(const BindingEventRequest& from);

  inline BindingEventRequest& operator=(const BindingEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BindingEventRequest(BindingEventRequest&& from) noexcept
    : BindingEventRequest() {
    *this = ::std::move(from);
  }

  inline BindingEventRequest& operator=(BindingEventRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BindingEventRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BindingEventRequest* internal_default_instance() {
    return reinterpret_cast<const BindingEventRequest*>(
               &_BindingEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BindingEventRequest* other);
  friend void swap(BindingEventRequest& a, BindingEventRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BindingEventRequest* New() const final {
    return CreateMaybeMessage<BindingEventRequest>(NULL);
  }

  BindingEventRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BindingEventRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BindingEventRequest& from);
  void MergeFrom(const BindingEventRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindingEventRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> metadata = 3;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.BindingEventRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      BindingEventRequest_MetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BindingEventResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.BindingEventResponse) */ {
 public:
  BindingEventResponse();
  virtual ~BindingEventResponse();

  BindingEventResponse(const BindingEventResponse& from);

  inline BindingEventResponse& operator=(const BindingEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BindingEventResponse(BindingEventResponse&& from) noexcept
    : BindingEventResponse() {
    *this = ::std::move(from);
  }

  inline BindingEventResponse& operator=(BindingEventResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BindingEventResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BindingEventResponse* internal_default_instance() {
    return reinterpret_cast<const BindingEventResponse*>(
               &_BindingEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BindingEventResponse* other);
  friend void swap(BindingEventResponse& a, BindingEventResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BindingEventResponse* New() const final {
    return CreateMaybeMessage<BindingEventResponse>(NULL);
  }

  BindingEventResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BindingEventResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BindingEventResponse& from);
  void MergeFrom(const BindingEventResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindingEventResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BindingEventResponse_BindingEventConcurrency BindingEventConcurrency;
  static const BindingEventConcurrency SEQUENTIAL =
    BindingEventResponse_BindingEventConcurrency_SEQUENTIAL;
  static const BindingEventConcurrency PARALLEL =
    BindingEventResponse_BindingEventConcurrency_PARALLEL;
  static inline bool BindingEventConcurrency_IsValid(int value) {
    return BindingEventResponse_BindingEventConcurrency_IsValid(value);
  }
  static const BindingEventConcurrency BindingEventConcurrency_MIN =
    BindingEventResponse_BindingEventConcurrency_BindingEventConcurrency_MIN;
  static const BindingEventConcurrency BindingEventConcurrency_MAX =
    BindingEventResponse_BindingEventConcurrency_BindingEventConcurrency_MAX;
  static const int BindingEventConcurrency_ARRAYSIZE =
    BindingEventResponse_BindingEventConcurrency_BindingEventConcurrency_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BindingEventConcurrency_descriptor() {
    return BindingEventResponse_BindingEventConcurrency_descriptor();
  }
  static inline const ::std::string& BindingEventConcurrency_Name(BindingEventConcurrency value) {
    return BindingEventResponse_BindingEventConcurrency_Name(value);
  }
  static inline bool BindingEventConcurrency_Parse(const ::std::string& name,
      BindingEventConcurrency* value) {
    return BindingEventResponse_BindingEventConcurrency_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .dapr.proto.common.v1.StateItem states = 2;
  int states_size() const;
  void clear_states();
  static const int kStatesFieldNumber = 2;
  ::dapr::proto::common::v1::StateItem* mutable_states(int index);
  ::google::protobuf::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >*
      mutable_states();
  const ::dapr::proto::common::v1::StateItem& states(int index) const;
  ::dapr::proto::common::v1::StateItem* add_states();
  const ::google::protobuf::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >&
      states() const;

  // repeated string to = 3;
  int to_size() const;
  void clear_to();
  static const int kToFieldNumber = 3;
  const ::std::string& to(int index) const;
  ::std::string* mutable_to(int index);
  void set_to(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_to(int index, ::std::string&& value);
  #endif
  void set_to(int index, const char* value);
  void set_to(int index, const char* value, size_t size);
  ::std::string* add_to();
  void add_to(const ::std::string& value);
  #if LANG_CXX11
  void add_to(::std::string&& value);
  #endif
  void add_to(const char* value);
  void add_to(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& to() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_to();

  // string store_name = 1;
  void clear_store_name();
  static const int kStoreNameFieldNumber = 1;
  const ::std::string& store_name() const;
  void set_store_name(const ::std::string& value);
  #if LANG_CXX11
  void set_store_name(::std::string&& value);
  #endif
  void set_store_name(const char* value);
  void set_store_name(const char* value, size_t size);
  ::std::string* mutable_store_name();
  ::std::string* release_store_name();
  void set_allocated_store_name(::std::string* store_name);

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .dapr.proto.runtime.v1.BindingEventResponse.BindingEventConcurrency concurrency = 5;
  void clear_concurrency();
  static const int kConcurrencyFieldNumber = 5;
  ::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency concurrency() const;
  void set_concurrency(::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency value);

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.BindingEventResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dapr::proto::common::v1::StateItem > states_;
  ::google::protobuf::RepeatedPtrField< ::std::string> to_;
  ::google::protobuf::internal::ArenaStringPtr store_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int concurrency_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListTopicSubscriptionsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse) */ {
 public:
  ListTopicSubscriptionsResponse();
  virtual ~ListTopicSubscriptionsResponse();

  ListTopicSubscriptionsResponse(const ListTopicSubscriptionsResponse& from);

  inline ListTopicSubscriptionsResponse& operator=(const ListTopicSubscriptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicSubscriptionsResponse(ListTopicSubscriptionsResponse&& from) noexcept
    : ListTopicSubscriptionsResponse() {
    *this = ::std::move(from);
  }

  inline ListTopicSubscriptionsResponse& operator=(ListTopicSubscriptionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTopicSubscriptionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicSubscriptionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTopicSubscriptionsResponse*>(
               &_ListTopicSubscriptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ListTopicSubscriptionsResponse* other);
  friend void swap(ListTopicSubscriptionsResponse& a, ListTopicSubscriptionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicSubscriptionsResponse* New() const final {
    return CreateMaybeMessage<ListTopicSubscriptionsResponse>(NULL);
  }

  ListTopicSubscriptionsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListTopicSubscriptionsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListTopicSubscriptionsResponse& from);
  void MergeFrom(const ListTopicSubscriptionsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTopicSubscriptionsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dapr.proto.runtime.v1.TopicSubscription subscriptions = 1;
  int subscriptions_size() const;
  void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  ::dapr::proto::runtime::v1::TopicSubscription* mutable_subscriptions(int index);
  ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicSubscription >*
      mutable_subscriptions();
  const ::dapr::proto::runtime::v1::TopicSubscription& subscriptions(int index) const;
  ::dapr::proto::runtime::v1::TopicSubscription* add_subscriptions();
  const ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicSubscription >&
      subscriptions() const;

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicSubscription > subscriptions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TopicSubscription_MetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TopicSubscription_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TopicSubscription_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TopicSubscription_MetadataEntry_DoNotUse();
  TopicSubscription_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TopicSubscription_MetadataEntry_DoNotUse& other);
  static const TopicSubscription_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TopicSubscription_MetadataEntry_DoNotUse*>(&_TopicSubscription_MetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TopicSubscription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.TopicSubscription) */ {
 public:
  TopicSubscription();
  virtual ~TopicSubscription();

  TopicSubscription(const TopicSubscription& from);

  inline TopicSubscription& operator=(const TopicSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicSubscription(TopicSubscription&& from) noexcept
    : TopicSubscription() {
    *this = ::std::move(from);
  }

  inline TopicSubscription& operator=(TopicSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicSubscription* internal_default_instance() {
    return reinterpret_cast<const TopicSubscription*>(
               &_TopicSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TopicSubscription* other);
  friend void swap(TopicSubscription& a, TopicSubscription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicSubscription* New() const final {
    return CreateMaybeMessage<TopicSubscription>(NULL);
  }

  TopicSubscription* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicSubscription>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicSubscription& from);
  void MergeFrom(const TopicSubscription& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicSubscription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> metadata = 2;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.TopicSubscription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      TopicSubscription_MetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListInputBindingsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.proto.runtime.v1.ListInputBindingsResponse) */ {
 public:
  ListInputBindingsResponse();
  virtual ~ListInputBindingsResponse();

  ListInputBindingsResponse(const ListInputBindingsResponse& from);

  inline ListInputBindingsResponse& operator=(const ListInputBindingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListInputBindingsResponse(ListInputBindingsResponse&& from) noexcept
    : ListInputBindingsResponse() {
    *this = ::std::move(from);
  }

  inline ListInputBindingsResponse& operator=(ListInputBindingsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListInputBindingsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInputBindingsResponse* internal_default_instance() {
    return reinterpret_cast<const ListInputBindingsResponse*>(
               &_ListInputBindingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ListInputBindingsResponse* other);
  friend void swap(ListInputBindingsResponse& a, ListInputBindingsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListInputBindingsResponse* New() const final {
    return CreateMaybeMessage<ListInputBindingsResponse>(NULL);
  }

  ListInputBindingsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListInputBindingsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListInputBindingsResponse& from);
  void MergeFrom(const ListInputBindingsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInputBindingsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string bindings = 1;
  int bindings_size() const;
  void clear_bindings();
  static const int kBindingsFieldNumber = 1;
  const ::std::string& bindings(int index) const;
  ::std::string* mutable_bindings(int index);
  void set_bindings(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_bindings(int index, ::std::string&& value);
  #endif
  void set_bindings(int index, const char* value);
  void set_bindings(int index, const char* value, size_t size);
  ::std::string* add_bindings();
  void add_bindings(const ::std::string& value);
  #if LANG_CXX11
  void add_bindings(::std::string&& value);
  #endif
  void add_bindings(const char* value);
  void add_bindings(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bindings() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bindings();

  // @@protoc_insertion_point(class_scope:dapr.proto.runtime.v1.ListInputBindingsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bindings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicEventRequest

// string id = 1;
inline void TopicEventRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicEventRequest::id() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.id)
  return id_.GetNoArena();
}
inline void TopicEventRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.id)
}
#if LANG_CXX11
inline void TopicEventRequest::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TopicEventRequest.id)
}
#endif
inline void TopicEventRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TopicEventRequest.id)
}
inline void TopicEventRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TopicEventRequest.id)
}
inline ::std::string* TopicEventRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicEventRequest::release_id() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicEventRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.id)
}

// string source = 2;
inline void TopicEventRequest::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicEventRequest::source() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.source)
  return source_.GetNoArena();
}
inline void TopicEventRequest::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.source)
}
#if LANG_CXX11
inline void TopicEventRequest::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TopicEventRequest.source)
}
#endif
inline void TopicEventRequest::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TopicEventRequest.source)
}
inline void TopicEventRequest::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TopicEventRequest.source)
}
inline ::std::string* TopicEventRequest::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicEventRequest::release_source() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicEventRequest::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.source)
}

// string type = 3;
inline void TopicEventRequest::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicEventRequest::type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.type)
  return type_.GetNoArena();
}
inline void TopicEventRequest::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.type)
}
#if LANG_CXX11
inline void TopicEventRequest::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TopicEventRequest.type)
}
#endif
inline void TopicEventRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TopicEventRequest.type)
}
inline void TopicEventRequest::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TopicEventRequest.type)
}
inline ::std::string* TopicEventRequest::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicEventRequest::release_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicEventRequest::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.type)
}

// string spec_version = 4;
inline void TopicEventRequest::clear_spec_version() {
  spec_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicEventRequest::spec_version() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.spec_version)
  return spec_version_.GetNoArena();
}
inline void TopicEventRequest::set_spec_version(const ::std::string& value) {
  
  spec_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.spec_version)
}
#if LANG_CXX11
inline void TopicEventRequest::set_spec_version(::std::string&& value) {
  
  spec_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TopicEventRequest.spec_version)
}
#endif
inline void TopicEventRequest::set_spec_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  spec_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TopicEventRequest.spec_version)
}
inline void TopicEventRequest::set_spec_version(const char* value, size_t size) {
  
  spec_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TopicEventRequest.spec_version)
}
inline ::std::string* TopicEventRequest::mutable_spec_version() {
  
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.spec_version)
  return spec_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicEventRequest::release_spec_version() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.spec_version)
  
  return spec_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicEventRequest::set_allocated_spec_version(::std::string* spec_version) {
  if (spec_version != NULL) {
    
  } else {
    
  }
  spec_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spec_version);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.spec_version)
}

// string data_content_type = 5;
inline void TopicEventRequest::clear_data_content_type() {
  data_content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicEventRequest::data_content_type() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.data_content_type)
  return data_content_type_.GetNoArena();
}
inline void TopicEventRequest::set_data_content_type(const ::std::string& value) {
  
  data_content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.data_content_type)
}
#if LANG_CXX11
inline void TopicEventRequest::set_data_content_type(::std::string&& value) {
  
  data_content_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TopicEventRequest.data_content_type)
}
#endif
inline void TopicEventRequest::set_data_content_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TopicEventRequest.data_content_type)
}
inline void TopicEventRequest::set_data_content_type(const char* value, size_t size) {
  
  data_content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TopicEventRequest.data_content_type)
}
inline ::std::string* TopicEventRequest::mutable_data_content_type() {
  
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.data_content_type)
  return data_content_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicEventRequest::release_data_content_type() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.data_content_type)
  
  return data_content_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicEventRequest::set_allocated_data_content_type(::std::string* data_content_type) {
  if (data_content_type != NULL) {
    
  } else {
    
  }
  data_content_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_content_type);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.data_content_type)
}

// bytes data = 7;
inline void TopicEventRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicEventRequest::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.data)
  return data_.GetNoArena();
}
inline void TopicEventRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.data)
}
#if LANG_CXX11
inline void TopicEventRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TopicEventRequest.data)
}
#endif
inline void TopicEventRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TopicEventRequest.data)
}
inline void TopicEventRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TopicEventRequest.data)
}
inline ::std::string* TopicEventRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicEventRequest::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicEventRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.data)
}

// string topic = 6;
inline void TopicEventRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicEventRequest::topic() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicEventRequest.topic)
  return topic_.GetNoArena();
}
inline void TopicEventRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicEventRequest.topic)
}
#if LANG_CXX11
inline void TopicEventRequest::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TopicEventRequest.topic)
}
#endif
inline void TopicEventRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TopicEventRequest.topic)
}
inline void TopicEventRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TopicEventRequest.topic)
}
inline ::std::string* TopicEventRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicEventRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicEventRequest::release_topic() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicEventRequest.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicEventRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicEventRequest.topic)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BindingEventRequest

// string name = 1;
inline void BindingEventRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BindingEventRequest::name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventRequest.name)
  return name_.GetNoArena();
}
inline void BindingEventRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventRequest.name)
}
#if LANG_CXX11
inline void BindingEventRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BindingEventRequest.name)
}
#endif
inline void BindingEventRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BindingEventRequest.name)
}
inline void BindingEventRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BindingEventRequest.name)
}
inline ::std::string* BindingEventRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BindingEventRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindingEventRequest::release_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BindingEventRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindingEventRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BindingEventRequest.name)
}

// bytes data = 2;
inline void BindingEventRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BindingEventRequest::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventRequest.data)
  return data_.GetNoArena();
}
inline void BindingEventRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventRequest.data)
}
#if LANG_CXX11
inline void BindingEventRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BindingEventRequest.data)
}
#endif
inline void BindingEventRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BindingEventRequest.data)
}
inline void BindingEventRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BindingEventRequest.data)
}
inline ::std::string* BindingEventRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BindingEventRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindingEventRequest::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BindingEventRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindingEventRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BindingEventRequest.data)
}

// map<string, string> metadata = 3;
inline int BindingEventRequest::metadata_size() const {
  return metadata_.size();
}
inline void BindingEventRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
BindingEventRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.BindingEventRequest.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
BindingEventRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.BindingEventRequest.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// BindingEventResponse

// string store_name = 1;
inline void BindingEventResponse::clear_store_name() {
  store_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BindingEventResponse::store_name() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventResponse.store_name)
  return store_name_.GetNoArena();
}
inline void BindingEventResponse::set_store_name(const ::std::string& value) {
  
  store_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventResponse.store_name)
}
#if LANG_CXX11
inline void BindingEventResponse::set_store_name(::std::string&& value) {
  
  store_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BindingEventResponse.store_name)
}
#endif
inline void BindingEventResponse::set_store_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  store_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BindingEventResponse.store_name)
}
inline void BindingEventResponse::set_store_name(const char* value, size_t size) {
  
  store_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BindingEventResponse.store_name)
}
inline ::std::string* BindingEventResponse::mutable_store_name() {
  
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BindingEventResponse.store_name)
  return store_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindingEventResponse::release_store_name() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BindingEventResponse.store_name)
  
  return store_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindingEventResponse::set_allocated_store_name(::std::string* store_name) {
  if (store_name != NULL) {
    
  } else {
    
  }
  store_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), store_name);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BindingEventResponse.store_name)
}

// repeated .dapr.proto.common.v1.StateItem states = 2;
inline int BindingEventResponse::states_size() const {
  return states_.size();
}
inline ::dapr::proto::common::v1::StateItem* BindingEventResponse::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BindingEventResponse.states)
  return states_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >*
BindingEventResponse::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.BindingEventResponse.states)
  return &states_;
}
inline const ::dapr::proto::common::v1::StateItem& BindingEventResponse::states(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventResponse.states)
  return states_.Get(index);
}
inline ::dapr::proto::common::v1::StateItem* BindingEventResponse::add_states() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.BindingEventResponse.states)
  return states_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dapr::proto::common::v1::StateItem >&
BindingEventResponse::states() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.BindingEventResponse.states)
  return states_;
}

// repeated string to = 3;
inline int BindingEventResponse::to_size() const {
  return to_.size();
}
inline void BindingEventResponse::clear_to() {
  to_.Clear();
}
inline const ::std::string& BindingEventResponse::to(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventResponse.to)
  return to_.Get(index);
}
inline ::std::string* BindingEventResponse::mutable_to(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BindingEventResponse.to)
  return to_.Mutable(index);
}
inline void BindingEventResponse::set_to(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventResponse.to)
  to_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BindingEventResponse::set_to(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventResponse.to)
  to_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BindingEventResponse::set_to(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  to_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline void BindingEventResponse::set_to(int index, const char* value, size_t size) {
  to_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline ::std::string* BindingEventResponse::add_to() {
  // @@protoc_insertion_point(field_add_mutable:dapr.proto.runtime.v1.BindingEventResponse.to)
  return to_.Add();
}
inline void BindingEventResponse::add_to(const ::std::string& value) {
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.BindingEventResponse.to)
}
#if LANG_CXX11
inline void BindingEventResponse::add_to(::std::string&& value) {
  to_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.BindingEventResponse.to)
}
#endif
inline void BindingEventResponse::add_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  to_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline void BindingEventResponse::add_to(const char* value, size_t size) {
  to_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dapr.proto.runtime.v1.BindingEventResponse.to)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BindingEventResponse::to() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.BindingEventResponse.to)
  return to_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BindingEventResponse::mutable_to() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.BindingEventResponse.to)
  return &to_;
}

// bytes data = 4;
inline void BindingEventResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BindingEventResponse::data() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventResponse.data)
  return data_.GetNoArena();
}
inline void BindingEventResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventResponse.data)
}
#if LANG_CXX11
inline void BindingEventResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.BindingEventResponse.data)
}
#endif
inline void BindingEventResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.BindingEventResponse.data)
}
inline void BindingEventResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.BindingEventResponse.data)
}
inline ::std::string* BindingEventResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.BindingEventResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BindingEventResponse::release_data() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.BindingEventResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BindingEventResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.BindingEventResponse.data)
}

// .dapr.proto.runtime.v1.BindingEventResponse.BindingEventConcurrency concurrency = 5;
inline void BindingEventResponse::clear_concurrency() {
  concurrency_ = 0;
}
inline ::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency BindingEventResponse::concurrency() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.BindingEventResponse.concurrency)
  return static_cast< ::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency >(concurrency_);
}
inline void BindingEventResponse::set_concurrency(::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency value) {
  
  concurrency_ = value;
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.BindingEventResponse.concurrency)
}

// -------------------------------------------------------------------

// ListTopicSubscriptionsResponse

// repeated .dapr.proto.runtime.v1.TopicSubscription subscriptions = 1;
inline int ListTopicSubscriptionsResponse::subscriptions_size() const {
  return subscriptions_.size();
}
inline void ListTopicSubscriptionsResponse::clear_subscriptions() {
  subscriptions_.Clear();
}
inline ::dapr::proto::runtime::v1::TopicSubscription* ListTopicSubscriptionsResponse::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicSubscription >*
ListTopicSubscriptionsResponse::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse.subscriptions)
  return &subscriptions_;
}
inline const ::dapr::proto::runtime::v1::TopicSubscription& ListTopicSubscriptionsResponse::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Get(index);
}
inline ::dapr::proto::runtime::v1::TopicSubscription* ListTopicSubscriptionsResponse::add_subscriptions() {
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dapr::proto::runtime::v1::TopicSubscription >&
ListTopicSubscriptionsResponse::subscriptions() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TopicSubscription

// string topic = 1;
inline void TopicSubscription::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicSubscription::topic() const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.TopicSubscription.topic)
  return topic_.GetNoArena();
}
inline void TopicSubscription::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.TopicSubscription.topic)
}
#if LANG_CXX11
inline void TopicSubscription::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.proto.runtime.v1.TopicSubscription.topic)
}
#endif
inline void TopicSubscription::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.TopicSubscription.topic)
}
inline void TopicSubscription::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.TopicSubscription.topic)
}
inline ::std::string* TopicSubscription::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.TopicSubscription.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicSubscription::release_topic() {
  // @@protoc_insertion_point(field_release:dapr.proto.runtime.v1.TopicSubscription.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicSubscription::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:dapr.proto.runtime.v1.TopicSubscription.topic)
}

// map<string, string> metadata = 2;
inline int TopicSubscription::metadata_size() const {
  return metadata_.size();
}
inline void TopicSubscription::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
TopicSubscription::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.proto.runtime.v1.TopicSubscription.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
TopicSubscription::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.proto.runtime.v1.TopicSubscription.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// ListInputBindingsResponse

// repeated string bindings = 1;
inline int ListInputBindingsResponse::bindings_size() const {
  return bindings_.size();
}
inline void ListInputBindingsResponse::clear_bindings() {
  bindings_.Clear();
}
inline const ::std::string& ListInputBindingsResponse::bindings(int index) const {
  // @@protoc_insertion_point(field_get:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
  return bindings_.Get(index);
}
inline ::std::string* ListInputBindingsResponse::mutable_bindings(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
  return bindings_.Mutable(index);
}
inline void ListInputBindingsResponse::set_bindings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
  bindings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListInputBindingsResponse::set_bindings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
  bindings_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListInputBindingsResponse::set_bindings(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bindings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline void ListInputBindingsResponse::set_bindings(int index, const char* value, size_t size) {
  bindings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline ::std::string* ListInputBindingsResponse::add_bindings() {
  // @@protoc_insertion_point(field_add_mutable:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
  return bindings_.Add();
}
inline void ListInputBindingsResponse::add_bindings(const ::std::string& value) {
  bindings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
#if LANG_CXX11
inline void ListInputBindingsResponse::add_bindings(::std::string&& value) {
  bindings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
#endif
inline void ListInputBindingsResponse::add_bindings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bindings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline void ListInputBindingsResponse::add_bindings(const char* value, size_t size) {
  bindings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListInputBindingsResponse::bindings() const {
  // @@protoc_insertion_point(field_list:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
  return bindings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListInputBindingsResponse::mutable_bindings() {
  // @@protoc_insertion_point(field_mutable_list:dapr.proto.runtime.v1.ListInputBindingsResponse.bindings)
  return &bindings_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace runtime
}  // namespace proto
}  // namespace dapr

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency>() {
  return ::dapr::proto::runtime::v1::BindingEventResponse_BindingEventConcurrency_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_dapr_2fproto_2fruntime_2fv1_2fappcallback_2eproto
