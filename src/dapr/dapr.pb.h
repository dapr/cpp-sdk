// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dapr.proto

#ifndef PROTOBUF_dapr_2eproto__INCLUDED
#define PROTOBUF_dapr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
<<<<<<< HEAD
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
=======
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
>>>>>>> master
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
<<<<<<< HEAD

=======
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dapr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dapr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dapr_2eproto;
>>>>>>> master
namespace dapr {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_dapr_2eproto();
void protobuf_AssignDesc_dapr_2eproto();
void protobuf_ShutdownFile_dapr_2eproto();

class DeleteStateEnvelope;
<<<<<<< HEAD
class GetSecretEnvelope;
class GetSecretResponseEnvelope;
=======
class DeleteStateEnvelopeDefaultTypeInternal;
extern DeleteStateEnvelopeDefaultTypeInternal _DeleteStateEnvelope_default_instance_;
class GetSecretEnvelope;
class GetSecretEnvelopeDefaultTypeInternal;
extern GetSecretEnvelopeDefaultTypeInternal _GetSecretEnvelope_default_instance_;
class GetSecretEnvelope_MetadataEntry_DoNotUse;
class GetSecretEnvelope_MetadataEntry_DoNotUseDefaultTypeInternal;
extern GetSecretEnvelope_MetadataEntry_DoNotUseDefaultTypeInternal _GetSecretEnvelope_MetadataEntry_DoNotUse_default_instance_;
class GetSecretResponseEnvelope;
class GetSecretResponseEnvelopeDefaultTypeInternal;
extern GetSecretResponseEnvelopeDefaultTypeInternal _GetSecretResponseEnvelope_default_instance_;
class GetSecretResponseEnvelope_DataEntry_DoNotUse;
class GetSecretResponseEnvelope_DataEntry_DoNotUseDefaultTypeInternal;
extern GetSecretResponseEnvelope_DataEntry_DoNotUseDefaultTypeInternal _GetSecretResponseEnvelope_DataEntry_DoNotUse_default_instance_;
>>>>>>> master
class GetStateEnvelope;
class GetStateResponseEnvelope;
class InvokeBindingEnvelope;
class InvokeServiceEnvelope;
class InvokeServiceResponseEnvelope;
class PublishEventEnvelope;
class RetryPolicy;
class SaveStateEnvelope;
class State;
class StateOptions;
class StateRequest;
class StateRequestOptions;
class StateRetryPolicy;
<<<<<<< HEAD
=======
class StateRetryPolicyDefaultTypeInternal;
extern StateRetryPolicyDefaultTypeInternal _StateRetryPolicy_default_instance_;
class State_MetadataEntry_DoNotUse;
class State_MetadataEntry_DoNotUseDefaultTypeInternal;
extern State_MetadataEntry_DoNotUseDefaultTypeInternal _State_MetadataEntry_DoNotUse_default_instance_;
}  // namespace dapr
PROTOBUF_NAMESPACE_OPEN
template<> ::dapr::DeleteStateEnvelope* Arena::CreateMaybeMessage<::dapr::DeleteStateEnvelope>(Arena*);
template<> ::dapr::GetSecretEnvelope* Arena::CreateMaybeMessage<::dapr::GetSecretEnvelope>(Arena*);
template<> ::dapr::GetSecretEnvelope_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::GetSecretEnvelope_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::GetSecretResponseEnvelope* Arena::CreateMaybeMessage<::dapr::GetSecretResponseEnvelope>(Arena*);
template<> ::dapr::GetSecretResponseEnvelope_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::GetSecretResponseEnvelope_DataEntry_DoNotUse>(Arena*);
template<> ::dapr::GetStateEnvelope* Arena::CreateMaybeMessage<::dapr::GetStateEnvelope>(Arena*);
template<> ::dapr::GetStateResponseEnvelope* Arena::CreateMaybeMessage<::dapr::GetStateResponseEnvelope>(Arena*);
template<> ::dapr::InvokeBindingEnvelope* Arena::CreateMaybeMessage<::dapr::InvokeBindingEnvelope>(Arena*);
template<> ::dapr::InvokeBindingEnvelope_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::InvokeBindingEnvelope_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::InvokeServiceEnvelope* Arena::CreateMaybeMessage<::dapr::InvokeServiceEnvelope>(Arena*);
template<> ::dapr::InvokeServiceEnvelope_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::InvokeServiceEnvelope_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::InvokeServiceResponseEnvelope* Arena::CreateMaybeMessage<::dapr::InvokeServiceResponseEnvelope>(Arena*);
template<> ::dapr::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::InvokeServiceResponseEnvelope_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::PublishEventEnvelope* Arena::CreateMaybeMessage<::dapr::PublishEventEnvelope>(Arena*);
template<> ::dapr::RetryPolicy* Arena::CreateMaybeMessage<::dapr::RetryPolicy>(Arena*);
template<> ::dapr::SaveStateEnvelope* Arena::CreateMaybeMessage<::dapr::SaveStateEnvelope>(Arena*);
template<> ::dapr::State* Arena::CreateMaybeMessage<::dapr::State>(Arena*);
template<> ::dapr::StateOptions* Arena::CreateMaybeMessage<::dapr::StateOptions>(Arena*);
template<> ::dapr::StateRequest* Arena::CreateMaybeMessage<::dapr::StateRequest>(Arena*);
template<> ::dapr::StateRequestOptions* Arena::CreateMaybeMessage<::dapr::StateRequestOptions>(Arena*);
template<> ::dapr::StateRequest_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::StateRequest_MetadataEntry_DoNotUse>(Arena*);
template<> ::dapr::StateRetryPolicy* Arena::CreateMaybeMessage<::dapr::StateRetryPolicy>(Arena*);
template<> ::dapr::State_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::dapr::State_MetadataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dapr {
>>>>>>> master

// ===================================================================

class InvokeServiceResponseEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.InvokeServiceResponseEnvelope) */ {
 public:
  InvokeServiceResponseEnvelope();
  virtual ~InvokeServiceResponseEnvelope();

  InvokeServiceResponseEnvelope(const InvokeServiceResponseEnvelope& from);

  inline InvokeServiceResponseEnvelope& operator=(const InvokeServiceResponseEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvokeServiceResponseEnvelope& default_instance();

  void Swap(InvokeServiceResponseEnvelope* other);

  // implements Message ----------------------------------------------

  inline InvokeServiceResponseEnvelope* New() const { return New(NULL); }

  InvokeServiceResponseEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvokeServiceResponseEnvelope& from);
  void MergeFrom(const InvokeServiceResponseEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InvokeServiceResponseEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional .google.protobuf.Any data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* mutable_data();
  ::google::protobuf::Any* release_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // map<string, string> metadata = 2;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // @@protoc_insertion_point(class_scope:dapr.InvokeServiceResponseEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Any* data_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      InvokeServiceResponseEnvelope_MetadataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static InvokeServiceResponseEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class DeleteStateEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.DeleteStateEnvelope) */ {
 public:
  DeleteStateEnvelope();
  virtual ~DeleteStateEnvelope();

  DeleteStateEnvelope(const DeleteStateEnvelope& from);

  inline DeleteStateEnvelope& operator=(const DeleteStateEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteStateEnvelope& default_instance();

  void Swap(DeleteStateEnvelope* other);

  // implements Message ----------------------------------------------

  inline DeleteStateEnvelope* New() const { return New(NULL); }

  DeleteStateEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteStateEnvelope& from);
  void MergeFrom(const DeleteStateEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteStateEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string storeName = 1;
  void clear_storename();
  static const int kStoreNameFieldNumber = 1;
  const ::std::string& storename() const;
  void set_storename(const ::std::string& value);
  void set_storename(const char* value);
  void set_storename(const char* value, size_t size);
  ::std::string* mutable_storename();
  ::std::string* release_storename();
  void set_allocated_storename(::std::string* storename);

  // optional string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string etag = 3;
  void clear_etag();
  static const int kEtagFieldNumber = 3;
  const ::std::string& etag() const;
  void set_etag(const ::std::string& value);
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  ::std::string* mutable_etag();
  ::std::string* release_etag();
  void set_allocated_etag(::std::string* etag);

  // optional .dapr.StateOptions options = 4;
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 4;
  const ::dapr::StateOptions& options() const;
  ::dapr::StateOptions* mutable_options();
  ::dapr::StateOptions* release_options();
  void set_allocated_options(::dapr::StateOptions* options);

  // @@protoc_insertion_point(class_scope:dapr.DeleteStateEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr storename_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr etag_;
  ::dapr::StateOptions* options_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static DeleteStateEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class SaveStateEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.SaveStateEnvelope) */ {
 public:
  SaveStateEnvelope();
  virtual ~SaveStateEnvelope();

  SaveStateEnvelope(const SaveStateEnvelope& from);

  inline SaveStateEnvelope& operator=(const SaveStateEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveStateEnvelope& default_instance();

  void Swap(SaveStateEnvelope* other);

  // implements Message ----------------------------------------------

  inline SaveStateEnvelope* New() const { return New(NULL); }

  SaveStateEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveStateEnvelope& from);
  void MergeFrom(const SaveStateEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SaveStateEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string storeName = 1;
  void clear_storename();
  static const int kStoreNameFieldNumber = 1;
  const ::std::string& storename() const;
  void set_storename(const ::std::string& value);
  void set_storename(const char* value);
  void set_storename(const char* value, size_t size);
  ::std::string* mutable_storename();
  ::std::string* release_storename();
  void set_allocated_storename(::std::string* storename);

  // repeated .dapr.StateRequest requests = 2;
  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 2;
  const ::dapr::StateRequest& requests(int index) const;
  ::dapr::StateRequest* mutable_requests(int index);
  ::dapr::StateRequest* add_requests();
  ::google::protobuf::RepeatedPtrField< ::dapr::StateRequest >*
      mutable_requests();
  const ::google::protobuf::RepeatedPtrField< ::dapr::StateRequest >&
      requests() const;

  // @@protoc_insertion_point(class_scope:dapr.SaveStateEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr storename_;
  ::google::protobuf::RepeatedPtrField< ::dapr::StateRequest > requests_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static SaveStateEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class GetStateEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.GetStateEnvelope) */ {
 public:
  GetStateEnvelope();
  virtual ~GetStateEnvelope();

  GetStateEnvelope(const GetStateEnvelope& from);

  inline GetStateEnvelope& operator=(const GetStateEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStateEnvelope& default_instance();

  void Swap(GetStateEnvelope* other);

  // implements Message ----------------------------------------------

  inline GetStateEnvelope* New() const { return New(NULL); }

  GetStateEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStateEnvelope& from);
  void MergeFrom(const GetStateEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetStateEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string storeName = 1;
  void clear_storename();
  static const int kStoreNameFieldNumber = 1;
  const ::std::string& storename() const;
  void set_storename(const ::std::string& value);
  void set_storename(const char* value);
  void set_storename(const char* value, size_t size);
  ::std::string* mutable_storename();
  ::std::string* release_storename();
  void set_allocated_storename(::std::string* storename);

  // optional string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string consistency = 3;
  void clear_consistency();
  static const int kConsistencyFieldNumber = 3;
  const ::std::string& consistency() const;
  void set_consistency(const ::std::string& value);
  void set_consistency(const char* value);
  void set_consistency(const char* value, size_t size);
  ::std::string* mutable_consistency();
  ::std::string* release_consistency();
  void set_allocated_consistency(::std::string* consistency);

  // @@protoc_insertion_point(class_scope:dapr.GetStateEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr storename_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr consistency_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static GetStateEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class GetStateResponseEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.GetStateResponseEnvelope) */ {
 public:
  GetStateResponseEnvelope();
  virtual ~GetStateResponseEnvelope();

  GetStateResponseEnvelope(const GetStateResponseEnvelope& from);

  inline GetStateResponseEnvelope& operator=(const GetStateResponseEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStateResponseEnvelope& default_instance();

  void Swap(GetStateResponseEnvelope* other);

  // implements Message ----------------------------------------------

  inline GetStateResponseEnvelope* New() const { return New(NULL); }

  GetStateResponseEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStateResponseEnvelope& from);
  void MergeFrom(const GetStateResponseEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetStateResponseEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .google.protobuf.Any data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* mutable_data();
  ::google::protobuf::Any* release_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // optional string etag = 2;
  void clear_etag();
  static const int kEtagFieldNumber = 2;
  const ::std::string& etag() const;
  void set_etag(const ::std::string& value);
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  ::std::string* mutable_etag();
  ::std::string* release_etag();
  void set_allocated_etag(::std::string* etag);

  // @@protoc_insertion_point(class_scope:dapr.GetStateResponseEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Any* data_;
  ::google::protobuf::internal::ArenaStringPtr etag_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static GetStateResponseEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class GetSecretEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.GetSecretEnvelope) */ {
 public:
  GetSecretEnvelope();
  virtual ~GetSecretEnvelope();

  GetSecretEnvelope(const GetSecretEnvelope& from);

  inline GetSecretEnvelope& operator=(const GetSecretEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSecretEnvelope& default_instance();

  void Swap(GetSecretEnvelope* other);

  // implements Message ----------------------------------------------

  inline GetSecretEnvelope* New() const { return New(NULL); }

  GetSecretEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSecretEnvelope& from);
  void MergeFrom(const GetSecretEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetSecretEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string storeName = 1;
  void clear_storename();
  static const int kStoreNameFieldNumber = 1;
  const ::std::string& storename() const;
  void set_storename(const ::std::string& value);
  void set_storename(const char* value);
  void set_storename(const char* value, size_t size);
  ::std::string* mutable_storename();
  ::std::string* release_storename();
  void set_allocated_storename(::std::string* storename);

  // optional string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // map<string, string> metadata = 3;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // @@protoc_insertion_point(class_scope:dapr.GetSecretEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr storename_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      GetSecretEnvelope_MetadataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static GetSecretEnvelope* default_instance_;
};
// -------------------------------------------------------------------

<<<<<<< HEAD
class GetSecretResponseEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.GetSecretResponseEnvelope) */ {
=======
class GetSecretEnvelope_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetSecretEnvelope_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetSecretEnvelope_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetSecretEnvelope_MetadataEntry_DoNotUse();
  GetSecretEnvelope_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetSecretEnvelope_MetadataEntry_DoNotUse& other);
  static const GetSecretEnvelope_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetSecretEnvelope_MetadataEntry_DoNotUse*>(&_GetSecretEnvelope_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.GetSecretEnvelope.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.GetSecretEnvelope.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2eproto);
    return ::descriptor_table_dapr_2eproto.file_level_metadata[6];
  }

  public:
};

// -------------------------------------------------------------------

class GetSecretEnvelope :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.GetSecretEnvelope) */ {
 public:
  GetSecretEnvelope();
  virtual ~GetSecretEnvelope();

  GetSecretEnvelope(const GetSecretEnvelope& from);
  GetSecretEnvelope(GetSecretEnvelope&& from) noexcept
    : GetSecretEnvelope() {
    *this = ::std::move(from);
  }

  inline GetSecretEnvelope& operator=(const GetSecretEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSecretEnvelope& operator=(GetSecretEnvelope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSecretEnvelope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSecretEnvelope* internal_default_instance() {
    return reinterpret_cast<const GetSecretEnvelope*>(
               &_GetSecretEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetSecretEnvelope& a, GetSecretEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSecretEnvelope* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSecretEnvelope* New() const final {
    return CreateMaybeMessage<GetSecretEnvelope>(nullptr);
  }

  GetSecretEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSecretEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSecretEnvelope& from);
  void MergeFrom(const GetSecretEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSecretEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.GetSecretEnvelope";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2eproto);
    return ::descriptor_table_dapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 3,
    kStoreNameFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // map<string, string> metadata = 3;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_metadata();

  // string storeName = 1;
  void clear_storename();
  const std::string& storename() const;
  void set_storename(const std::string& value);
  void set_storename(std::string&& value);
  void set_storename(const char* value);
  void set_storename(const char* value, size_t size);
  std::string* mutable_storename();
  std::string* release_storename();
  void set_allocated_storename(std::string* storename);
  private:
  const std::string& _internal_storename() const;
  void _internal_set_storename(const std::string& value);
  std::string* _internal_mutable_storename();
  public:

  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:dapr.GetSecretEnvelope)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetSecretEnvelope_MetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2eproto;
};
// -------------------------------------------------------------------

class GetSecretResponseEnvelope_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetSecretResponseEnvelope_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetSecretResponseEnvelope_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetSecretResponseEnvelope_DataEntry_DoNotUse();
  GetSecretResponseEnvelope_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetSecretResponseEnvelope_DataEntry_DoNotUse& other);
  static const GetSecretResponseEnvelope_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetSecretResponseEnvelope_DataEntry_DoNotUse*>(&_GetSecretResponseEnvelope_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.GetSecretResponseEnvelope.DataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.GetSecretResponseEnvelope.DataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2eproto);
    return ::descriptor_table_dapr_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class GetSecretResponseEnvelope :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dapr.GetSecretResponseEnvelope) */ {
>>>>>>> master
 public:
  GetSecretResponseEnvelope();
  virtual ~GetSecretResponseEnvelope();

  GetSecretResponseEnvelope(const GetSecretResponseEnvelope& from);
<<<<<<< HEAD
=======
  GetSecretResponseEnvelope(GetSecretResponseEnvelope&& from) noexcept
    : GetSecretResponseEnvelope() {
    *this = ::std::move(from);
  }
>>>>>>> master

  inline GetSecretResponseEnvelope& operator=(const GetSecretResponseEnvelope& from) {
    CopyFrom(from);
    return *this;
<<<<<<< HEAD
=======
  }
  inline GetSecretResponseEnvelope& operator=(GetSecretResponseEnvelope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSecretResponseEnvelope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSecretResponseEnvelope* internal_default_instance() {
    return reinterpret_cast<const GetSecretResponseEnvelope*>(
               &_GetSecretResponseEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetSecretResponseEnvelope& a, GetSecretResponseEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSecretResponseEnvelope* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSecretResponseEnvelope* New() const final {
    return CreateMaybeMessage<GetSecretResponseEnvelope>(nullptr);
  }

  GetSecretResponseEnvelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSecretResponseEnvelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSecretResponseEnvelope& from);
  void MergeFrom(const GetSecretResponseEnvelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSecretResponseEnvelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dapr.GetSecretResponseEnvelope";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2eproto);
    return ::descriptor_table_dapr_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // map<string, string> data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:dapr.GetSecretResponseEnvelope)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetSecretResponseEnvelope_DataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2eproto;
};
// -------------------------------------------------------------------

class InvokeBindingEnvelope_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvokeBindingEnvelope_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvokeBindingEnvelope_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InvokeBindingEnvelope_MetadataEntry_DoNotUse();
  InvokeBindingEnvelope_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InvokeBindingEnvelope_MetadataEntry_DoNotUse& other);
  static const InvokeBindingEnvelope_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InvokeBindingEnvelope_MetadataEntry_DoNotUse*>(&_InvokeBindingEnvelope_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.InvokeBindingEnvelope.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.InvokeBindingEnvelope.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2eproto);
    return ::descriptor_table_dapr_2eproto.file_level_metadata[10];
>>>>>>> master
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSecretResponseEnvelope& default_instance();

  void Swap(GetSecretResponseEnvelope* other);

  // implements Message ----------------------------------------------

  inline GetSecretResponseEnvelope* New() const { return New(NULL); }

  GetSecretResponseEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSecretResponseEnvelope& from);
  void MergeFrom(const GetSecretResponseEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetSecretResponseEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      data() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:dapr.GetSecretResponseEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      GetSecretResponseEnvelope_DataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static GetSecretResponseEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class InvokeBindingEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.InvokeBindingEnvelope) */ {
 public:
  InvokeBindingEnvelope();
  virtual ~InvokeBindingEnvelope();

  InvokeBindingEnvelope(const InvokeBindingEnvelope& from);

  inline InvokeBindingEnvelope& operator=(const InvokeBindingEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvokeBindingEnvelope& default_instance();

<<<<<<< HEAD
  void Swap(InvokeBindingEnvelope* other);
=======
  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvokeBindingEnvelope* internal_default_instance() {
    return reinterpret_cast<const InvokeBindingEnvelope*>(
               &_InvokeBindingEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(InvokeBindingEnvelope& a, InvokeBindingEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeBindingEnvelope* other) {
    if (other == this) return;
    InternalSwap(other);
  }
>>>>>>> master

  // implements Message ----------------------------------------------

  inline InvokeBindingEnvelope* New() const { return New(NULL); }

  InvokeBindingEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvokeBindingEnvelope& from);
  void MergeFrom(const InvokeBindingEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InvokeBindingEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* mutable_data();
  ::google::protobuf::Any* release_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // map<string, string> metadata = 3;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // @@protoc_insertion_point(class_scope:dapr.InvokeBindingEnvelope)
 private:

<<<<<<< HEAD
  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Any* data_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      InvokeBindingEnvelope_MetadataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();
=======
class InvokeServiceEnvelope_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvokeServiceEnvelope_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvokeServiceEnvelope_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InvokeServiceEnvelope_MetadataEntry_DoNotUse();
  InvokeServiceEnvelope_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InvokeServiceEnvelope_MetadataEntry_DoNotUse& other);
  static const InvokeServiceEnvelope_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InvokeServiceEnvelope_MetadataEntry_DoNotUse*>(&_InvokeServiceEnvelope_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.InvokeServiceEnvelope.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.InvokeServiceEnvelope.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2eproto);
    return ::descriptor_table_dapr_2eproto.file_level_metadata[12];
  }
>>>>>>> master

  void InitAsDefaultInstance();
  static InvokeBindingEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class InvokeServiceEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.InvokeServiceEnvelope) */ {
 public:
  InvokeServiceEnvelope();
  virtual ~InvokeServiceEnvelope();

  InvokeServiceEnvelope(const InvokeServiceEnvelope& from);

  inline InvokeServiceEnvelope& operator=(const InvokeServiceEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvokeServiceEnvelope& default_instance();

<<<<<<< HEAD
  void Swap(InvokeServiceEnvelope* other);
=======
  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvokeServiceEnvelope* internal_default_instance() {
    return reinterpret_cast<const InvokeServiceEnvelope*>(
               &_InvokeServiceEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(InvokeServiceEnvelope& a, InvokeServiceEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(InvokeServiceEnvelope* other) {
    if (other == this) return;
    InternalSwap(other);
  }
>>>>>>> master

  // implements Message ----------------------------------------------

  inline InvokeServiceEnvelope* New() const { return New(NULL); }

  InvokeServiceEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvokeServiceEnvelope& from);
  void MergeFrom(const InvokeServiceEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InvokeServiceEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string method = 2;
  void clear_method();
  static const int kMethodFieldNumber = 2;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // optional .google.protobuf.Any data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* mutable_data();
  ::google::protobuf::Any* release_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // map<string, string> metadata = 4;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // @@protoc_insertion_point(class_scope:dapr.InvokeServiceEnvelope)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::Any* data_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      InvokeServiceEnvelope_MetadataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static InvokeServiceEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class PublishEventEnvelope : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.PublishEventEnvelope) */ {
 public:
  PublishEventEnvelope();
  virtual ~PublishEventEnvelope();

  PublishEventEnvelope(const PublishEventEnvelope& from);

  inline PublishEventEnvelope& operator=(const PublishEventEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishEventEnvelope& default_instance();

<<<<<<< HEAD
  void Swap(PublishEventEnvelope* other);
=======
  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishEventEnvelope* internal_default_instance() {
    return reinterpret_cast<const PublishEventEnvelope*>(
               &_PublishEventEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PublishEventEnvelope& a, PublishEventEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishEventEnvelope* other) {
    if (other == this) return;
    InternalSwap(other);
  }
>>>>>>> master

  // implements Message ----------------------------------------------

  inline PublishEventEnvelope* New() const { return New(NULL); }

  PublishEventEnvelope* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishEventEnvelope& from);
  void MergeFrom(const PublishEventEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PublishEventEnvelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // optional .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* mutable_data();
  ::google::protobuf::Any* release_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:dapr.PublishEventEnvelope)
 private:
<<<<<<< HEAD
=======
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2eproto;
};
// -------------------------------------------------------------------

class State_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<State_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<State_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  State_MetadataEntry_DoNotUse();
  State_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const State_MetadataEntry_DoNotUse& other);
  static const State_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const State_MetadataEntry_DoNotUse*>(&_State_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.State.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.State.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2eproto);
    return ::descriptor_table_dapr_2eproto.file_level_metadata[15];
  }
>>>>>>> master

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::Any* data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static PublishEventEnvelope* default_instance_;
};
// -------------------------------------------------------------------

class State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

<<<<<<< HEAD
  void Swap(State* other);
=======
  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    InternalSwap(other);
  }
>>>>>>> master

  // implements Message ----------------------------------------------

  inline State* New() const { return New(NULL); }

  State* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional .google.protobuf.Any value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::google::protobuf::Any& value() const;
  ::google::protobuf::Any* mutable_value();
  ::google::protobuf::Any* release_value();
  void set_allocated_value(::google::protobuf::Any* value);

  // optional string etag = 3;
  void clear_etag();
  static const int kEtagFieldNumber = 3;
  const ::std::string& etag() const;
  void set_etag(const ::std::string& value);
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  ::std::string* mutable_etag();
  ::std::string* release_etag();
  void set_allocated_etag(::std::string* etag);

  // map<string, string> metadata = 4;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // optional .dapr.StateOptions options = 5;
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 5;
  const ::dapr::StateOptions& options() const;
  ::dapr::StateOptions* mutable_options();
  ::dapr::StateOptions* release_options();
  void set_allocated_options(::dapr::StateOptions* options);

  // @@protoc_insertion_point(class_scope:dapr.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::Any* value_;
  ::google::protobuf::internal::ArenaStringPtr etag_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      State_MetadataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::dapr::StateOptions* options_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static State* default_instance_;
};
// -------------------------------------------------------------------

class StateOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.StateOptions) */ {
 public:
  StateOptions();
  virtual ~StateOptions();

  StateOptions(const StateOptions& from);

  inline StateOptions& operator=(const StateOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateOptions& default_instance();

<<<<<<< HEAD
  void Swap(StateOptions* other);
=======
  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateOptions* internal_default_instance() {
    return reinterpret_cast<const StateOptions*>(
               &_StateOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StateOptions& a, StateOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(StateOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }
>>>>>>> master

  // implements Message ----------------------------------------------

  inline StateOptions* New() const { return New(NULL); }

  StateOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateOptions& from);
  void MergeFrom(const StateOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StateOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string concurrency = 1;
  void clear_concurrency();
  static const int kConcurrencyFieldNumber = 1;
  const ::std::string& concurrency() const;
  void set_concurrency(const ::std::string& value);
  void set_concurrency(const char* value);
  void set_concurrency(const char* value, size_t size);
  ::std::string* mutable_concurrency();
  ::std::string* release_concurrency();
  void set_allocated_concurrency(::std::string* concurrency);

  // optional string consistency = 2;
  void clear_consistency();
  static const int kConsistencyFieldNumber = 2;
  const ::std::string& consistency() const;
  void set_consistency(const ::std::string& value);
  void set_consistency(const char* value);
  void set_consistency(const char* value, size_t size);
  ::std::string* mutable_consistency();
  ::std::string* release_consistency();
  void set_allocated_consistency(::std::string* consistency);

  // optional .dapr.RetryPolicy retryPolicy = 3;
  bool has_retrypolicy() const;
  void clear_retrypolicy();
  static const int kRetryPolicyFieldNumber = 3;
  const ::dapr::RetryPolicy& retrypolicy() const;
  ::dapr::RetryPolicy* mutable_retrypolicy();
  ::dapr::RetryPolicy* release_retrypolicy();
  void set_allocated_retrypolicy(::dapr::RetryPolicy* retrypolicy);

  // @@protoc_insertion_point(class_scope:dapr.StateOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr concurrency_;
  ::google::protobuf::internal::ArenaStringPtr consistency_;
  ::dapr::RetryPolicy* retrypolicy_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static StateOptions* default_instance_;
};
// -------------------------------------------------------------------

class RetryPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.RetryPolicy) */ {
 public:
  RetryPolicy();
  virtual ~RetryPolicy();

  RetryPolicy(const RetryPolicy& from);

  inline RetryPolicy& operator=(const RetryPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetryPolicy& default_instance();

<<<<<<< HEAD
  void Swap(RetryPolicy* other);
=======
  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetryPolicy* internal_default_instance() {
    return reinterpret_cast<const RetryPolicy*>(
               &_RetryPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RetryPolicy& a, RetryPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(RetryPolicy* other) {
    if (other == this) return;
    InternalSwap(other);
  }
>>>>>>> master

  // implements Message ----------------------------------------------

  inline RetryPolicy* New() const { return New(NULL); }

  RetryPolicy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetryPolicy& from);
  void MergeFrom(const RetryPolicy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RetryPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 threshold = 1;
  void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  ::google::protobuf::int32 threshold() const;
  void set_threshold(::google::protobuf::int32 value);

  // optional string pattern = 2;
  void clear_pattern();
  static const int kPatternFieldNumber = 2;
  const ::std::string& pattern() const;
  void set_pattern(const ::std::string& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  ::std::string* mutable_pattern();
  ::std::string* release_pattern();
  void set_allocated_pattern(::std::string* pattern);

  // optional .google.protobuf.Duration interval = 3;
  bool has_interval() const;
  void clear_interval();
  static const int kIntervalFieldNumber = 3;
  const ::google::protobuf::Duration& interval() const;
  ::google::protobuf::Duration* mutable_interval();
  ::google::protobuf::Duration* release_interval();
  void set_allocated_interval(::google::protobuf::Duration* interval);

  // @@protoc_insertion_point(class_scope:dapr.RetryPolicy)
 private:
<<<<<<< HEAD
=======
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  PROTOBUF_NAMESPACE_ID::Duration* interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dapr_2eproto;
};
// -------------------------------------------------------------------

class StateRequest_MetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StateRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StateRequest_MetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  StateRequest_MetadataEntry_DoNotUse();
  StateRequest_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StateRequest_MetadataEntry_DoNotUse& other);
  static const StateRequest_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StateRequest_MetadataEntry_DoNotUse*>(&_StateRequest_MetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.StateRequest.MetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "dapr.StateRequest.MetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dapr_2eproto);
    return ::descriptor_table_dapr_2eproto.file_level_metadata[19];
  }
>>>>>>> master

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr pattern_;
  ::google::protobuf::Duration* interval_;
  ::google::protobuf::int32 threshold_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static RetryPolicy* default_instance_;
};
// -------------------------------------------------------------------

class StateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.StateRequest) */ {
 public:
  StateRequest();
  virtual ~StateRequest();

  StateRequest(const StateRequest& from);

  inline StateRequest& operator=(const StateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateRequest& default_instance();

<<<<<<< HEAD
  void Swap(StateRequest* other);
=======
  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateRequest* internal_default_instance() {
    return reinterpret_cast<const StateRequest*>(
               &_StateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StateRequest& a, StateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }
>>>>>>> master

  // implements Message ----------------------------------------------

  inline StateRequest* New() const { return New(NULL); }

  StateRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateRequest& from);
  void MergeFrom(const StateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional .google.protobuf.Any value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::google::protobuf::Any& value() const;
  ::google::protobuf::Any* mutable_value();
  ::google::protobuf::Any* release_value();
  void set_allocated_value(::google::protobuf::Any* value);

  // optional string etag = 3;
  void clear_etag();
  static const int kEtagFieldNumber = 3;
  const ::std::string& etag() const;
  void set_etag(const ::std::string& value);
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  ::std::string* mutable_etag();
  ::std::string* release_etag();
  void set_allocated_etag(::std::string* etag);

  // map<string, string> metadata = 4;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // optional .dapr.StateRequestOptions options = 5;
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 5;
  const ::dapr::StateRequestOptions& options() const;
  ::dapr::StateRequestOptions* mutable_options();
  ::dapr::StateRequestOptions* release_options();
  void set_allocated_options(::dapr::StateRequestOptions* options);

  // @@protoc_insertion_point(class_scope:dapr.StateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::Any* value_;
  ::google::protobuf::internal::ArenaStringPtr etag_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      StateRequest_MetadataEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::dapr::StateRequestOptions* options_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static StateRequest* default_instance_;
};
// -------------------------------------------------------------------

class StateRequestOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.StateRequestOptions) */ {
 public:
  StateRequestOptions();
  virtual ~StateRequestOptions();

  StateRequestOptions(const StateRequestOptions& from);

  inline StateRequestOptions& operator=(const StateRequestOptions& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateRequestOptions& default_instance();

<<<<<<< HEAD
  void Swap(StateRequestOptions* other);
=======
  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateRequestOptions* internal_default_instance() {
    return reinterpret_cast<const StateRequestOptions*>(
               &_StateRequestOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StateRequestOptions& a, StateRequestOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(StateRequestOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }
>>>>>>> master

  // implements Message ----------------------------------------------

  inline StateRequestOptions* New() const { return New(NULL); }

  StateRequestOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateRequestOptions& from);
  void MergeFrom(const StateRequestOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StateRequestOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string concurrency = 1;
  void clear_concurrency();
  static const int kConcurrencyFieldNumber = 1;
  const ::std::string& concurrency() const;
  void set_concurrency(const ::std::string& value);
  void set_concurrency(const char* value);
  void set_concurrency(const char* value, size_t size);
  ::std::string* mutable_concurrency();
  ::std::string* release_concurrency();
  void set_allocated_concurrency(::std::string* concurrency);

  // optional string consistency = 2;
  void clear_consistency();
  static const int kConsistencyFieldNumber = 2;
  const ::std::string& consistency() const;
  void set_consistency(const ::std::string& value);
  void set_consistency(const char* value);
  void set_consistency(const char* value, size_t size);
  ::std::string* mutable_consistency();
  ::std::string* release_consistency();
  void set_allocated_consistency(::std::string* consistency);

  // optional .dapr.StateRetryPolicy retryPolicy = 3;
  bool has_retrypolicy() const;
  void clear_retrypolicy();
  static const int kRetryPolicyFieldNumber = 3;
  const ::dapr::StateRetryPolicy& retrypolicy() const;
  ::dapr::StateRetryPolicy* mutable_retrypolicy();
  ::dapr::StateRetryPolicy* release_retrypolicy();
  void set_allocated_retrypolicy(::dapr::StateRetryPolicy* retrypolicy);

  // @@protoc_insertion_point(class_scope:dapr.StateRequestOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr concurrency_;
  ::google::protobuf::internal::ArenaStringPtr consistency_;
  ::dapr::StateRetryPolicy* retrypolicy_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static StateRequestOptions* default_instance_;
};
// -------------------------------------------------------------------

class StateRetryPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dapr.StateRetryPolicy) */ {
 public:
  StateRetryPolicy();
  virtual ~StateRetryPolicy();

  StateRetryPolicy(const StateRetryPolicy& from);

  inline StateRetryPolicy& operator=(const StateRetryPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateRetryPolicy& default_instance();

<<<<<<< HEAD
  void Swap(StateRetryPolicy* other);
=======
  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateRetryPolicy* internal_default_instance() {
    return reinterpret_cast<const StateRetryPolicy*>(
               &_StateRetryPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(StateRetryPolicy& a, StateRetryPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(StateRetryPolicy* other) {
    if (other == this) return;
    InternalSwap(other);
  }
>>>>>>> master

  // implements Message ----------------------------------------------

  inline StateRetryPolicy* New() const { return New(NULL); }

  StateRetryPolicy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateRetryPolicy& from);
  void MergeFrom(const StateRetryPolicy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StateRetryPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 threshold = 1;
  void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  ::google::protobuf::int32 threshold() const;
  void set_threshold(::google::protobuf::int32 value);

  // optional string pattern = 2;
  void clear_pattern();
  static const int kPatternFieldNumber = 2;
  const ::std::string& pattern() const;
  void set_pattern(const ::std::string& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  ::std::string* mutable_pattern();
  ::std::string* release_pattern();
  void set_allocated_pattern(::std::string* pattern);

  // optional .google.protobuf.Duration interval = 3;
  bool has_interval() const;
  void clear_interval();
  static const int kIntervalFieldNumber = 3;
  const ::google::protobuf::Duration& interval() const;
  ::google::protobuf::Duration* mutable_interval();
  ::google::protobuf::Duration* release_interval();
  void set_allocated_interval(::google::protobuf::Duration* interval);

  // @@protoc_insertion_point(class_scope:dapr.StateRetryPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr pattern_;
  ::google::protobuf::Duration* interval_;
  ::google::protobuf::int32 threshold_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_dapr_2eproto();
  friend void protobuf_AssignDesc_dapr_2eproto();
  friend void protobuf_ShutdownFile_dapr_2eproto();

  void InitAsDefaultInstance();
  static StateRetryPolicy* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// InvokeServiceResponseEnvelope

// optional .google.protobuf.Any data = 1;
inline bool InvokeServiceResponseEnvelope::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void InvokeServiceResponseEnvelope::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::google::protobuf::Any& InvokeServiceResponseEnvelope::data() const {
  // @@protoc_insertion_point(field_get:dapr.InvokeServiceResponseEnvelope.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::google::protobuf::Any* InvokeServiceResponseEnvelope::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:dapr.InvokeServiceResponseEnvelope.data)
  return data_;
}
inline ::google::protobuf::Any* InvokeServiceResponseEnvelope::release_data() {
  // @@protoc_insertion_point(field_release:dapr.InvokeServiceResponseEnvelope.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void InvokeServiceResponseEnvelope::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.InvokeServiceResponseEnvelope.data)
}

// map<string, string> metadata = 2;
inline int InvokeServiceResponseEnvelope::metadata_size() const {
  return metadata_.size();
}
inline void InvokeServiceResponseEnvelope::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
InvokeServiceResponseEnvelope::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.InvokeServiceResponseEnvelope.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
InvokeServiceResponseEnvelope::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.InvokeServiceResponseEnvelope.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// DeleteStateEnvelope

// optional string storeName = 1;
inline void DeleteStateEnvelope::clear_storename() {
  storename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteStateEnvelope::storename() const {
  // @@protoc_insertion_point(field_get:dapr.DeleteStateEnvelope.storeName)
  return storename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteStateEnvelope::set_storename(const ::std::string& value) {
  
  storename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.DeleteStateEnvelope.storeName)
}
inline void DeleteStateEnvelope::set_storename(const char* value) {
  
  storename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.DeleteStateEnvelope.storeName)
}
inline void DeleteStateEnvelope::set_storename(const char* value, size_t size) {
  
  storename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.DeleteStateEnvelope.storeName)
}
inline ::std::string* DeleteStateEnvelope::mutable_storename() {
  
  // @@protoc_insertion_point(field_mutable:dapr.DeleteStateEnvelope.storeName)
  return storename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteStateEnvelope::release_storename() {
  // @@protoc_insertion_point(field_release:dapr.DeleteStateEnvelope.storeName)
  
  return storename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteStateEnvelope::set_allocated_storename(::std::string* storename) {
  if (storename != NULL) {
    
  } else {
    
  }
  storename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storename);
  // @@protoc_insertion_point(field_set_allocated:dapr.DeleteStateEnvelope.storeName)
}

// optional string key = 2;
inline void DeleteStateEnvelope::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteStateEnvelope::key() const {
  // @@protoc_insertion_point(field_get:dapr.DeleteStateEnvelope.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteStateEnvelope::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.DeleteStateEnvelope.key)
}
inline void DeleteStateEnvelope::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.DeleteStateEnvelope.key)
}
inline void DeleteStateEnvelope::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.DeleteStateEnvelope.key)
}
inline ::std::string* DeleteStateEnvelope::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dapr.DeleteStateEnvelope.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteStateEnvelope::release_key() {
  // @@protoc_insertion_point(field_release:dapr.DeleteStateEnvelope.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteStateEnvelope::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dapr.DeleteStateEnvelope.key)
}

// optional string etag = 3;
inline void DeleteStateEnvelope::clear_etag() {
  etag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteStateEnvelope::etag() const {
  // @@protoc_insertion_point(field_get:dapr.DeleteStateEnvelope.etag)
  return etag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteStateEnvelope::set_etag(const ::std::string& value) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.DeleteStateEnvelope.etag)
}
inline void DeleteStateEnvelope::set_etag(const char* value) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.DeleteStateEnvelope.etag)
}
inline void DeleteStateEnvelope::set_etag(const char* value, size_t size) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.DeleteStateEnvelope.etag)
}
inline ::std::string* DeleteStateEnvelope::mutable_etag() {
  
  // @@protoc_insertion_point(field_mutable:dapr.DeleteStateEnvelope.etag)
  return etag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteStateEnvelope::release_etag() {
  // @@protoc_insertion_point(field_release:dapr.DeleteStateEnvelope.etag)
  
  return etag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteStateEnvelope::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag);
  // @@protoc_insertion_point(field_set_allocated:dapr.DeleteStateEnvelope.etag)
}

// optional .dapr.StateOptions options = 4;
inline bool DeleteStateEnvelope::has_options() const {
  return !_is_default_instance_ && options_ != NULL;
}
inline void DeleteStateEnvelope::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
inline const ::dapr::StateOptions& DeleteStateEnvelope::options() const {
  // @@protoc_insertion_point(field_get:dapr.DeleteStateEnvelope.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
inline ::dapr::StateOptions* DeleteStateEnvelope::mutable_options() {
  
  if (options_ == NULL) {
    options_ = new ::dapr::StateOptions;
  }
  // @@protoc_insertion_point(field_mutable:dapr.DeleteStateEnvelope.options)
  return options_;
}
inline ::dapr::StateOptions* DeleteStateEnvelope::release_options() {
  // @@protoc_insertion_point(field_release:dapr.DeleteStateEnvelope.options)
  
  ::dapr::StateOptions* temp = options_;
  options_ = NULL;
  return temp;
}
inline void DeleteStateEnvelope::set_allocated_options(::dapr::StateOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.DeleteStateEnvelope.options)
}

// -------------------------------------------------------------------

// SaveStateEnvelope

// optional string storeName = 1;
inline void SaveStateEnvelope::clear_storename() {
  storename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveStateEnvelope::storename() const {
  // @@protoc_insertion_point(field_get:dapr.SaveStateEnvelope.storeName)
  return storename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveStateEnvelope::set_storename(const ::std::string& value) {
  
  storename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.SaveStateEnvelope.storeName)
}
inline void SaveStateEnvelope::set_storename(const char* value) {
  
  storename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.SaveStateEnvelope.storeName)
}
inline void SaveStateEnvelope::set_storename(const char* value, size_t size) {
  
  storename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.SaveStateEnvelope.storeName)
}
inline ::std::string* SaveStateEnvelope::mutable_storename() {
  
  // @@protoc_insertion_point(field_mutable:dapr.SaveStateEnvelope.storeName)
  return storename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveStateEnvelope::release_storename() {
  // @@protoc_insertion_point(field_release:dapr.SaveStateEnvelope.storeName)
  
  return storename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveStateEnvelope::set_allocated_storename(::std::string* storename) {
  if (storename != NULL) {
    
  } else {
    
  }
  storename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storename);
  // @@protoc_insertion_point(field_set_allocated:dapr.SaveStateEnvelope.storeName)
}

// repeated .dapr.StateRequest requests = 2;
inline int SaveStateEnvelope::requests_size() const {
  return requests_.size();
}
inline void SaveStateEnvelope::clear_requests() {
  requests_.Clear();
}
inline const ::dapr::StateRequest& SaveStateEnvelope::requests(int index) const {
  // @@protoc_insertion_point(field_get:dapr.SaveStateEnvelope.requests)
  return requests_.Get(index);
}
inline ::dapr::StateRequest* SaveStateEnvelope::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:dapr.SaveStateEnvelope.requests)
  return requests_.Mutable(index);
}
inline ::dapr::StateRequest* SaveStateEnvelope::add_requests() {
  // @@protoc_insertion_point(field_add:dapr.SaveStateEnvelope.requests)
  return requests_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dapr::StateRequest >*
SaveStateEnvelope::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:dapr.SaveStateEnvelope.requests)
  return &requests_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dapr::StateRequest >&
SaveStateEnvelope::requests() const {
  // @@protoc_insertion_point(field_list:dapr.SaveStateEnvelope.requests)
  return requests_;
}

// -------------------------------------------------------------------

// GetStateEnvelope

// optional string storeName = 1;
inline void GetStateEnvelope::clear_storename() {
  storename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetStateEnvelope::storename() const {
  // @@protoc_insertion_point(field_get:dapr.GetStateEnvelope.storeName)
  return storename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateEnvelope::set_storename(const ::std::string& value) {
  
  storename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.GetStateEnvelope.storeName)
}
inline void GetStateEnvelope::set_storename(const char* value) {
  
  storename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.GetStateEnvelope.storeName)
}
inline void GetStateEnvelope::set_storename(const char* value, size_t size) {
  
  storename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.GetStateEnvelope.storeName)
}
inline ::std::string* GetStateEnvelope::mutable_storename() {
  
  // @@protoc_insertion_point(field_mutable:dapr.GetStateEnvelope.storeName)
  return storename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetStateEnvelope::release_storename() {
  // @@protoc_insertion_point(field_release:dapr.GetStateEnvelope.storeName)
  
  return storename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateEnvelope::set_allocated_storename(::std::string* storename) {
  if (storename != NULL) {
    
  } else {
    
  }
  storename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storename);
  // @@protoc_insertion_point(field_set_allocated:dapr.GetStateEnvelope.storeName)
}

// optional string key = 2;
inline void GetStateEnvelope::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetStateEnvelope::key() const {
  // @@protoc_insertion_point(field_get:dapr.GetStateEnvelope.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateEnvelope::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.GetStateEnvelope.key)
}
inline void GetStateEnvelope::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.GetStateEnvelope.key)
}
inline void GetStateEnvelope::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.GetStateEnvelope.key)
}
inline ::std::string* GetStateEnvelope::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dapr.GetStateEnvelope.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetStateEnvelope::release_key() {
  // @@protoc_insertion_point(field_release:dapr.GetStateEnvelope.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateEnvelope::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dapr.GetStateEnvelope.key)
}

// optional string consistency = 3;
inline void GetStateEnvelope::clear_consistency() {
  consistency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetStateEnvelope::consistency() const {
  // @@protoc_insertion_point(field_get:dapr.GetStateEnvelope.consistency)
  return consistency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateEnvelope::set_consistency(const ::std::string& value) {
  
  consistency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.GetStateEnvelope.consistency)
}
inline void GetStateEnvelope::set_consistency(const char* value) {
  
  consistency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.GetStateEnvelope.consistency)
}
inline void GetStateEnvelope::set_consistency(const char* value, size_t size) {
  
  consistency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.GetStateEnvelope.consistency)
}
inline ::std::string* GetStateEnvelope::mutable_consistency() {
  
  // @@protoc_insertion_point(field_mutable:dapr.GetStateEnvelope.consistency)
  return consistency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetStateEnvelope::release_consistency() {
  // @@protoc_insertion_point(field_release:dapr.GetStateEnvelope.consistency)
  
  return consistency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateEnvelope::set_allocated_consistency(::std::string* consistency) {
  if (consistency != NULL) {
    
  } else {
    
  }
  consistency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consistency);
  // @@protoc_insertion_point(field_set_allocated:dapr.GetStateEnvelope.consistency)
}

// -------------------------------------------------------------------

// GetStateResponseEnvelope

// optional .google.protobuf.Any data = 1;
inline bool GetStateResponseEnvelope::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void GetStateResponseEnvelope::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::google::protobuf::Any& GetStateResponseEnvelope::data() const {
  // @@protoc_insertion_point(field_get:dapr.GetStateResponseEnvelope.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::google::protobuf::Any* GetStateResponseEnvelope::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:dapr.GetStateResponseEnvelope.data)
  return data_;
}
inline ::google::protobuf::Any* GetStateResponseEnvelope::release_data() {
  // @@protoc_insertion_point(field_release:dapr.GetStateResponseEnvelope.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void GetStateResponseEnvelope::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.GetStateResponseEnvelope.data)
}

// optional string etag = 2;
inline void GetStateResponseEnvelope::clear_etag() {
  etag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetStateResponseEnvelope::etag() const {
  // @@protoc_insertion_point(field_get:dapr.GetStateResponseEnvelope.etag)
  return etag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateResponseEnvelope::set_etag(const ::std::string& value) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.GetStateResponseEnvelope.etag)
}
inline void GetStateResponseEnvelope::set_etag(const char* value) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.GetStateResponseEnvelope.etag)
}
inline void GetStateResponseEnvelope::set_etag(const char* value, size_t size) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.GetStateResponseEnvelope.etag)
}
inline ::std::string* GetStateResponseEnvelope::mutable_etag() {
  
  // @@protoc_insertion_point(field_mutable:dapr.GetStateResponseEnvelope.etag)
  return etag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetStateResponseEnvelope::release_etag() {
  // @@protoc_insertion_point(field_release:dapr.GetStateResponseEnvelope.etag)
  
  return etag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateResponseEnvelope::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag);
  // @@protoc_insertion_point(field_set_allocated:dapr.GetStateResponseEnvelope.etag)
}

// -------------------------------------------------------------------

// GetSecretEnvelope

<<<<<<< HEAD
// optional string storeName = 1;
inline void GetSecretEnvelope::clear_storename() {
  storename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSecretEnvelope::storename() const {
  // @@protoc_insertion_point(field_get:dapr.GetSecretEnvelope.storeName)
  return storename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSecretEnvelope::set_storename(const ::std::string& value) {
  
  storename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.GetSecretEnvelope.storeName)
}
inline void GetSecretEnvelope::set_storename(const char* value) {
  
  storename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
=======
// GetSecretEnvelope

// string storeName = 1;
inline void GetSecretEnvelope::clear_storename() {
  storename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetSecretEnvelope::storename() const {
  // @@protoc_insertion_point(field_get:dapr.GetSecretEnvelope.storeName)
  return _internal_storename();
}
inline void GetSecretEnvelope::set_storename(const std::string& value) {
  _internal_set_storename(value);
  // @@protoc_insertion_point(field_set:dapr.GetSecretEnvelope.storeName)
}
inline std::string* GetSecretEnvelope::mutable_storename() {
  // @@protoc_insertion_point(field_mutable:dapr.GetSecretEnvelope.storeName)
  return _internal_mutable_storename();
}
inline const std::string& GetSecretEnvelope::_internal_storename() const {
  return storename_.GetNoArena();
}
inline void GetSecretEnvelope::_internal_set_storename(const std::string& value) {
  
  storename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetSecretEnvelope::set_storename(std::string&& value) {
  
  storename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.GetSecretEnvelope.storeName)
}
inline void GetSecretEnvelope::set_storename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  storename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
>>>>>>> master
  // @@protoc_insertion_point(field_set_char:dapr.GetSecretEnvelope.storeName)
}
inline void GetSecretEnvelope::set_storename(const char* value, size_t size) {
  
<<<<<<< HEAD
  storename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.GetSecretEnvelope.storeName)
}
inline ::std::string* GetSecretEnvelope::mutable_storename() {
  
  // @@protoc_insertion_point(field_mutable:dapr.GetSecretEnvelope.storeName)
  return storename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSecretEnvelope::release_storename() {
  // @@protoc_insertion_point(field_release:dapr.GetSecretEnvelope.storeName)
  
  return storename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSecretEnvelope::set_allocated_storename(::std::string* storename) {
  if (storename != NULL) {
=======
  storename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.GetSecretEnvelope.storeName)
}
inline std::string* GetSecretEnvelope::_internal_mutable_storename() {
  
  return storename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSecretEnvelope::release_storename() {
  // @@protoc_insertion_point(field_release:dapr.GetSecretEnvelope.storeName)
  
  return storename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSecretEnvelope::set_allocated_storename(std::string* storename) {
  if (storename != nullptr) {
>>>>>>> master
    
  } else {
    
  }
<<<<<<< HEAD
  storename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storename);
  // @@protoc_insertion_point(field_set_allocated:dapr.GetSecretEnvelope.storeName)
}
=======
  storename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storename);
  // @@protoc_insertion_point(field_set_allocated:dapr.GetSecretEnvelope.storeName)
}

// string key = 2;
inline void GetSecretEnvelope::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetSecretEnvelope::key() const {
  // @@protoc_insertion_point(field_get:dapr.GetSecretEnvelope.key)
  return _internal_key();
}
inline void GetSecretEnvelope::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:dapr.GetSecretEnvelope.key)
}
inline std::string* GetSecretEnvelope::mutable_key() {
  // @@protoc_insertion_point(field_mutable:dapr.GetSecretEnvelope.key)
  return _internal_mutable_key();
}
inline const std::string& GetSecretEnvelope::_internal_key() const {
  return key_.GetNoArena();
}
inline void GetSecretEnvelope::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetSecretEnvelope::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dapr.GetSecretEnvelope.key)
}
inline void GetSecretEnvelope::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.GetSecretEnvelope.key)
}
inline void GetSecretEnvelope::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.GetSecretEnvelope.key)
}
inline std::string* GetSecretEnvelope::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSecretEnvelope::release_key() {
  // @@protoc_insertion_point(field_release:dapr.GetSecretEnvelope.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSecretEnvelope::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dapr.GetSecretEnvelope.key)
}

// map<string, string> metadata = 3;
inline int GetSecretEnvelope::_internal_metadata_size() const {
  return metadata_.size();
}
inline int GetSecretEnvelope::metadata_size() const {
  return _internal_metadata_size();
}
inline void GetSecretEnvelope::clear_metadata() {
  metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetSecretEnvelope::_internal_metadata() const {
  return metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetSecretEnvelope::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.GetSecretEnvelope.metadata)
  return _internal_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetSecretEnvelope::_internal_mutable_metadata() {
  return metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetSecretEnvelope::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.GetSecretEnvelope.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetSecretResponseEnvelope

// map<string, string> data = 1;
inline int GetSecretResponseEnvelope::_internal_data_size() const {
  return data_.size();
}
inline int GetSecretResponseEnvelope::data_size() const {
  return _internal_data_size();
}
inline void GetSecretResponseEnvelope::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetSecretResponseEnvelope::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GetSecretResponseEnvelope::data() const {
  // @@protoc_insertion_point(field_map:dapr.GetSecretResponseEnvelope.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetSecretResponseEnvelope::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GetSecretResponseEnvelope::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:dapr.GetSecretResponseEnvelope.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InvokeBindingEnvelope
>>>>>>> master

// optional string key = 2;
inline void GetSecretEnvelope::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSecretEnvelope::key() const {
  // @@protoc_insertion_point(field_get:dapr.GetSecretEnvelope.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSecretEnvelope::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.GetSecretEnvelope.key)
}
inline void GetSecretEnvelope::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.GetSecretEnvelope.key)
}
inline void GetSecretEnvelope::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.GetSecretEnvelope.key)
}
inline ::std::string* GetSecretEnvelope::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dapr.GetSecretEnvelope.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSecretEnvelope::release_key() {
  // @@protoc_insertion_point(field_release:dapr.GetSecretEnvelope.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSecretEnvelope::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dapr.GetSecretEnvelope.key)
}

// map<string, string> metadata = 3;
inline int GetSecretEnvelope::metadata_size() const {
  return metadata_.size();
}
inline void GetSecretEnvelope::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
GetSecretEnvelope::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.GetSecretEnvelope.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
GetSecretEnvelope::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.GetSecretEnvelope.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// GetSecretResponseEnvelope

// map<string, string> data = 1;
inline int GetSecretResponseEnvelope::data_size() const {
  return data_.size();
}
inline void GetSecretResponseEnvelope::clear_data() {
  data_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
GetSecretResponseEnvelope::data() const {
  // @@protoc_insertion_point(field_map:dapr.GetSecretResponseEnvelope.data)
  return data_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
GetSecretResponseEnvelope::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:dapr.GetSecretResponseEnvelope.data)
  return data_.MutableMap();
}

// -------------------------------------------------------------------

// InvokeBindingEnvelope

// optional string name = 1;
inline void InvokeBindingEnvelope::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvokeBindingEnvelope::name() const {
  // @@protoc_insertion_point(field_get:dapr.InvokeBindingEnvelope.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvokeBindingEnvelope::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.InvokeBindingEnvelope.name)
}
inline void InvokeBindingEnvelope::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.InvokeBindingEnvelope.name)
}
inline void InvokeBindingEnvelope::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.InvokeBindingEnvelope.name)
}
inline ::std::string* InvokeBindingEnvelope::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dapr.InvokeBindingEnvelope.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvokeBindingEnvelope::release_name() {
  // @@protoc_insertion_point(field_release:dapr.InvokeBindingEnvelope.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvokeBindingEnvelope::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dapr.InvokeBindingEnvelope.name)
}

// optional .google.protobuf.Any data = 2;
inline bool InvokeBindingEnvelope::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void InvokeBindingEnvelope::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::google::protobuf::Any& InvokeBindingEnvelope::data() const {
  // @@protoc_insertion_point(field_get:dapr.InvokeBindingEnvelope.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::google::protobuf::Any* InvokeBindingEnvelope::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:dapr.InvokeBindingEnvelope.data)
  return data_;
}
inline ::google::protobuf::Any* InvokeBindingEnvelope::release_data() {
  // @@protoc_insertion_point(field_release:dapr.InvokeBindingEnvelope.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void InvokeBindingEnvelope::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.InvokeBindingEnvelope.data)
}

// map<string, string> metadata = 3;
inline int InvokeBindingEnvelope::metadata_size() const {
  return metadata_.size();
}
inline void InvokeBindingEnvelope::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
InvokeBindingEnvelope::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.InvokeBindingEnvelope.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
InvokeBindingEnvelope::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.InvokeBindingEnvelope.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// InvokeServiceEnvelope

// optional string id = 1;
inline void InvokeServiceEnvelope::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvokeServiceEnvelope::id() const {
  // @@protoc_insertion_point(field_get:dapr.InvokeServiceEnvelope.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvokeServiceEnvelope::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.InvokeServiceEnvelope.id)
}
inline void InvokeServiceEnvelope::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.InvokeServiceEnvelope.id)
}
inline void InvokeServiceEnvelope::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.InvokeServiceEnvelope.id)
}
inline ::std::string* InvokeServiceEnvelope::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:dapr.InvokeServiceEnvelope.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvokeServiceEnvelope::release_id() {
  // @@protoc_insertion_point(field_release:dapr.InvokeServiceEnvelope.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvokeServiceEnvelope::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:dapr.InvokeServiceEnvelope.id)
}

// optional string method = 2;
inline void InvokeServiceEnvelope::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvokeServiceEnvelope::method() const {
  // @@protoc_insertion_point(field_get:dapr.InvokeServiceEnvelope.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvokeServiceEnvelope::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.InvokeServiceEnvelope.method)
}
inline void InvokeServiceEnvelope::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.InvokeServiceEnvelope.method)
}
inline void InvokeServiceEnvelope::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.InvokeServiceEnvelope.method)
}
inline ::std::string* InvokeServiceEnvelope::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:dapr.InvokeServiceEnvelope.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvokeServiceEnvelope::release_method() {
  // @@protoc_insertion_point(field_release:dapr.InvokeServiceEnvelope.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvokeServiceEnvelope::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:dapr.InvokeServiceEnvelope.method)
}

// optional .google.protobuf.Any data = 3;
inline bool InvokeServiceEnvelope::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void InvokeServiceEnvelope::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::google::protobuf::Any& InvokeServiceEnvelope::data() const {
  // @@protoc_insertion_point(field_get:dapr.InvokeServiceEnvelope.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::google::protobuf::Any* InvokeServiceEnvelope::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:dapr.InvokeServiceEnvelope.data)
  return data_;
}
inline ::google::protobuf::Any* InvokeServiceEnvelope::release_data() {
  // @@protoc_insertion_point(field_release:dapr.InvokeServiceEnvelope.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void InvokeServiceEnvelope::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.InvokeServiceEnvelope.data)
}

// map<string, string> metadata = 4;
inline int InvokeServiceEnvelope::metadata_size() const {
  return metadata_.size();
}
inline void InvokeServiceEnvelope::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
InvokeServiceEnvelope::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.InvokeServiceEnvelope.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
InvokeServiceEnvelope::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.InvokeServiceEnvelope.metadata)
  return metadata_.MutableMap();
}

// -------------------------------------------------------------------

// PublishEventEnvelope

// optional string topic = 1;
inline void PublishEventEnvelope::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublishEventEnvelope::topic() const {
  // @@protoc_insertion_point(field_get:dapr.PublishEventEnvelope.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishEventEnvelope::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.PublishEventEnvelope.topic)
}
inline void PublishEventEnvelope::set_topic(const char* value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.PublishEventEnvelope.topic)
}
inline void PublishEventEnvelope::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.PublishEventEnvelope.topic)
}
inline ::std::string* PublishEventEnvelope::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:dapr.PublishEventEnvelope.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublishEventEnvelope::release_topic() {
  // @@protoc_insertion_point(field_release:dapr.PublishEventEnvelope.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishEventEnvelope::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:dapr.PublishEventEnvelope.topic)
}

// optional .google.protobuf.Any data = 2;
inline bool PublishEventEnvelope::has_data() const {
  return !_is_default_instance_ && data_ != NULL;
}
inline void PublishEventEnvelope::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::google::protobuf::Any& PublishEventEnvelope::data() const {
  // @@protoc_insertion_point(field_get:dapr.PublishEventEnvelope.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::google::protobuf::Any* PublishEventEnvelope::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:dapr.PublishEventEnvelope.data)
  return data_;
}
inline ::google::protobuf::Any* PublishEventEnvelope::release_data() {
  // @@protoc_insertion_point(field_release:dapr.PublishEventEnvelope.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void PublishEventEnvelope::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.PublishEventEnvelope.data)
}

// -------------------------------------------------------------------

// State

// optional string key = 1;
inline void State::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& State::key() const {
  // @@protoc_insertion_point(field_get:dapr.State.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.State.key)
}
inline void State::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.State.key)
}
inline void State::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.State.key)
}
inline ::std::string* State::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dapr.State.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* State::release_key() {
  // @@protoc_insertion_point(field_release:dapr.State.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dapr.State.key)
}

// optional .google.protobuf.Any value = 2;
inline bool State::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
inline void State::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::google::protobuf::Any& State::value() const {
  // @@protoc_insertion_point(field_get:dapr.State.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::google::protobuf::Any* State::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:dapr.State.value)
  return value_;
}
inline ::google::protobuf::Any* State::release_value() {
  // @@protoc_insertion_point(field_release:dapr.State.value)
  
  ::google::protobuf::Any* temp = value_;
  value_ = NULL;
  return temp;
}
inline void State::set_allocated_value(::google::protobuf::Any* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.State.value)
}

// optional string etag = 3;
inline void State::clear_etag() {
  etag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& State::etag() const {
  // @@protoc_insertion_point(field_get:dapr.State.etag)
  return etag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_etag(const ::std::string& value) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.State.etag)
}
inline void State::set_etag(const char* value) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.State.etag)
}
inline void State::set_etag(const char* value, size_t size) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.State.etag)
}
inline ::std::string* State::mutable_etag() {
  
  // @@protoc_insertion_point(field_mutable:dapr.State.etag)
  return etag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* State::release_etag() {
  // @@protoc_insertion_point(field_release:dapr.State.etag)
  
  return etag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void State::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag);
  // @@protoc_insertion_point(field_set_allocated:dapr.State.etag)
}

// map<string, string> metadata = 4;
inline int State::metadata_size() const {
  return metadata_.size();
}
inline void State::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
State::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.State.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
State::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.State.metadata)
  return metadata_.MutableMap();
}

// optional .dapr.StateOptions options = 5;
inline bool State::has_options() const {
  return !_is_default_instance_ && options_ != NULL;
}
inline void State::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
inline const ::dapr::StateOptions& State::options() const {
  // @@protoc_insertion_point(field_get:dapr.State.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
inline ::dapr::StateOptions* State::mutable_options() {
  
  if (options_ == NULL) {
    options_ = new ::dapr::StateOptions;
  }
  // @@protoc_insertion_point(field_mutable:dapr.State.options)
  return options_;
}
inline ::dapr::StateOptions* State::release_options() {
  // @@protoc_insertion_point(field_release:dapr.State.options)
  
  ::dapr::StateOptions* temp = options_;
  options_ = NULL;
  return temp;
}
inline void State::set_allocated_options(::dapr::StateOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.State.options)
}

// -------------------------------------------------------------------

// StateOptions

// optional string concurrency = 1;
inline void StateOptions::clear_concurrency() {
  concurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateOptions::concurrency() const {
  // @@protoc_insertion_point(field_get:dapr.StateOptions.concurrency)
  return concurrency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateOptions::set_concurrency(const ::std::string& value) {
  
  concurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.StateOptions.concurrency)
}
inline void StateOptions::set_concurrency(const char* value) {
  
  concurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.StateOptions.concurrency)
}
inline void StateOptions::set_concurrency(const char* value, size_t size) {
  
  concurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.StateOptions.concurrency)
}
inline ::std::string* StateOptions::mutable_concurrency() {
  
  // @@protoc_insertion_point(field_mutable:dapr.StateOptions.concurrency)
  return concurrency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateOptions::release_concurrency() {
  // @@protoc_insertion_point(field_release:dapr.StateOptions.concurrency)
  
  return concurrency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateOptions::set_allocated_concurrency(::std::string* concurrency) {
  if (concurrency != NULL) {
    
  } else {
    
  }
  concurrency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), concurrency);
  // @@protoc_insertion_point(field_set_allocated:dapr.StateOptions.concurrency)
}

// optional string consistency = 2;
inline void StateOptions::clear_consistency() {
  consistency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateOptions::consistency() const {
  // @@protoc_insertion_point(field_get:dapr.StateOptions.consistency)
  return consistency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateOptions::set_consistency(const ::std::string& value) {
  
  consistency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.StateOptions.consistency)
}
inline void StateOptions::set_consistency(const char* value) {
  
  consistency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.StateOptions.consistency)
}
inline void StateOptions::set_consistency(const char* value, size_t size) {
  
  consistency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.StateOptions.consistency)
}
inline ::std::string* StateOptions::mutable_consistency() {
  
  // @@protoc_insertion_point(field_mutable:dapr.StateOptions.consistency)
  return consistency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateOptions::release_consistency() {
  // @@protoc_insertion_point(field_release:dapr.StateOptions.consistency)
  
  return consistency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateOptions::set_allocated_consistency(::std::string* consistency) {
  if (consistency != NULL) {
    
  } else {
    
  }
  consistency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consistency);
  // @@protoc_insertion_point(field_set_allocated:dapr.StateOptions.consistency)
}

// optional .dapr.RetryPolicy retryPolicy = 3;
inline bool StateOptions::has_retrypolicy() const {
  return !_is_default_instance_ && retrypolicy_ != NULL;
}
inline void StateOptions::clear_retrypolicy() {
  if (GetArenaNoVirtual() == NULL && retrypolicy_ != NULL) delete retrypolicy_;
  retrypolicy_ = NULL;
}
inline const ::dapr::RetryPolicy& StateOptions::retrypolicy() const {
  // @@protoc_insertion_point(field_get:dapr.StateOptions.retryPolicy)
  return retrypolicy_ != NULL ? *retrypolicy_ : *default_instance_->retrypolicy_;
}
inline ::dapr::RetryPolicy* StateOptions::mutable_retrypolicy() {
  
  if (retrypolicy_ == NULL) {
    retrypolicy_ = new ::dapr::RetryPolicy;
  }
  // @@protoc_insertion_point(field_mutable:dapr.StateOptions.retryPolicy)
  return retrypolicy_;
}
inline ::dapr::RetryPolicy* StateOptions::release_retrypolicy() {
  // @@protoc_insertion_point(field_release:dapr.StateOptions.retryPolicy)
  
  ::dapr::RetryPolicy* temp = retrypolicy_;
  retrypolicy_ = NULL;
  return temp;
}
inline void StateOptions::set_allocated_retrypolicy(::dapr::RetryPolicy* retrypolicy) {
  delete retrypolicy_;
  retrypolicy_ = retrypolicy;
  if (retrypolicy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.StateOptions.retryPolicy)
}

// -------------------------------------------------------------------

// RetryPolicy

// optional int32 threshold = 1;
inline void RetryPolicy::clear_threshold() {
  threshold_ = 0;
}
inline ::google::protobuf::int32 RetryPolicy::threshold() const {
  // @@protoc_insertion_point(field_get:dapr.RetryPolicy.threshold)
  return threshold_;
}
inline void RetryPolicy::set_threshold(::google::protobuf::int32 value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:dapr.RetryPolicy.threshold)
}

// optional string pattern = 2;
inline void RetryPolicy::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RetryPolicy::pattern() const {
  // @@protoc_insertion_point(field_get:dapr.RetryPolicy.pattern)
  return pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetryPolicy::set_pattern(const ::std::string& value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.RetryPolicy.pattern)
}
inline void RetryPolicy::set_pattern(const char* value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.RetryPolicy.pattern)
}
inline void RetryPolicy::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.RetryPolicy.pattern)
}
inline ::std::string* RetryPolicy::mutable_pattern() {
  
  // @@protoc_insertion_point(field_mutable:dapr.RetryPolicy.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RetryPolicy::release_pattern() {
  // @@protoc_insertion_point(field_release:dapr.RetryPolicy.pattern)
  
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetryPolicy::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:dapr.RetryPolicy.pattern)
}

// optional .google.protobuf.Duration interval = 3;
inline bool RetryPolicy::has_interval() const {
  return !_is_default_instance_ && interval_ != NULL;
}
inline void RetryPolicy::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}
inline const ::google::protobuf::Duration& RetryPolicy::interval() const {
  // @@protoc_insertion_point(field_get:dapr.RetryPolicy.interval)
  return interval_ != NULL ? *interval_ : *default_instance_->interval_;
}
inline ::google::protobuf::Duration* RetryPolicy::mutable_interval() {
  
  if (interval_ == NULL) {
    interval_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:dapr.RetryPolicy.interval)
  return interval_;
}
inline ::google::protobuf::Duration* RetryPolicy::release_interval() {
  // @@protoc_insertion_point(field_release:dapr.RetryPolicy.interval)
  
  ::google::protobuf::Duration* temp = interval_;
  interval_ = NULL;
  return temp;
}
inline void RetryPolicy::set_allocated_interval(::google::protobuf::Duration* interval) {
  delete interval_;
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.RetryPolicy.interval)
}

// -------------------------------------------------------------------

// StateRequest

// optional string key = 1;
inline void StateRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateRequest::key() const {
  // @@protoc_insertion_point(field_get:dapr.StateRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.StateRequest.key)
}
inline void StateRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.StateRequest.key)
}
inline void StateRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.StateRequest.key)
}
inline ::std::string* StateRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dapr.StateRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateRequest::release_key() {
  // @@protoc_insertion_point(field_release:dapr.StateRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dapr.StateRequest.key)
}

// optional .google.protobuf.Any value = 2;
inline bool StateRequest::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
inline void StateRequest::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::google::protobuf::Any& StateRequest::value() const {
  // @@protoc_insertion_point(field_get:dapr.StateRequest.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::google::protobuf::Any* StateRequest::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:dapr.StateRequest.value)
  return value_;
}
inline ::google::protobuf::Any* StateRequest::release_value() {
  // @@protoc_insertion_point(field_release:dapr.StateRequest.value)
  
  ::google::protobuf::Any* temp = value_;
  value_ = NULL;
  return temp;
}
inline void StateRequest::set_allocated_value(::google::protobuf::Any* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.StateRequest.value)
}

// optional string etag = 3;
inline void StateRequest::clear_etag() {
  etag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateRequest::etag() const {
  // @@protoc_insertion_point(field_get:dapr.StateRequest.etag)
  return etag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateRequest::set_etag(const ::std::string& value) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.StateRequest.etag)
}
inline void StateRequest::set_etag(const char* value) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.StateRequest.etag)
}
inline void StateRequest::set_etag(const char* value, size_t size) {
  
  etag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.StateRequest.etag)
}
inline ::std::string* StateRequest::mutable_etag() {
  
  // @@protoc_insertion_point(field_mutable:dapr.StateRequest.etag)
  return etag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateRequest::release_etag() {
  // @@protoc_insertion_point(field_release:dapr.StateRequest.etag)
  
  return etag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateRequest::set_allocated_etag(::std::string* etag) {
  if (etag != NULL) {
    
  } else {
    
  }
  etag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), etag);
  // @@protoc_insertion_point(field_set_allocated:dapr.StateRequest.etag)
}

// map<string, string> metadata = 4;
inline int StateRequest::metadata_size() const {
  return metadata_.size();
}
inline void StateRequest::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
StateRequest::metadata() const {
  // @@protoc_insertion_point(field_map:dapr.StateRequest.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
StateRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:dapr.StateRequest.metadata)
  return metadata_.MutableMap();
}

// optional .dapr.StateRequestOptions options = 5;
inline bool StateRequest::has_options() const {
  return !_is_default_instance_ && options_ != NULL;
}
inline void StateRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
inline const ::dapr::StateRequestOptions& StateRequest::options() const {
  // @@protoc_insertion_point(field_get:dapr.StateRequest.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
inline ::dapr::StateRequestOptions* StateRequest::mutable_options() {
  
  if (options_ == NULL) {
    options_ = new ::dapr::StateRequestOptions;
  }
  // @@protoc_insertion_point(field_mutable:dapr.StateRequest.options)
  return options_;
}
inline ::dapr::StateRequestOptions* StateRequest::release_options() {
  // @@protoc_insertion_point(field_release:dapr.StateRequest.options)
  
  ::dapr::StateRequestOptions* temp = options_;
  options_ = NULL;
  return temp;
}
inline void StateRequest::set_allocated_options(::dapr::StateRequestOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.StateRequest.options)
}

// -------------------------------------------------------------------

// StateRequestOptions

// optional string concurrency = 1;
inline void StateRequestOptions::clear_concurrency() {
  concurrency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateRequestOptions::concurrency() const {
  // @@protoc_insertion_point(field_get:dapr.StateRequestOptions.concurrency)
  return concurrency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateRequestOptions::set_concurrency(const ::std::string& value) {
  
  concurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.StateRequestOptions.concurrency)
}
inline void StateRequestOptions::set_concurrency(const char* value) {
  
  concurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.StateRequestOptions.concurrency)
}
inline void StateRequestOptions::set_concurrency(const char* value, size_t size) {
  
  concurrency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.StateRequestOptions.concurrency)
}
inline ::std::string* StateRequestOptions::mutable_concurrency() {
  
  // @@protoc_insertion_point(field_mutable:dapr.StateRequestOptions.concurrency)
  return concurrency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateRequestOptions::release_concurrency() {
  // @@protoc_insertion_point(field_release:dapr.StateRequestOptions.concurrency)
  
  return concurrency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateRequestOptions::set_allocated_concurrency(::std::string* concurrency) {
  if (concurrency != NULL) {
    
  } else {
    
  }
  concurrency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), concurrency);
  // @@protoc_insertion_point(field_set_allocated:dapr.StateRequestOptions.concurrency)
}

// optional string consistency = 2;
inline void StateRequestOptions::clear_consistency() {
  consistency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateRequestOptions::consistency() const {
  // @@protoc_insertion_point(field_get:dapr.StateRequestOptions.consistency)
  return consistency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateRequestOptions::set_consistency(const ::std::string& value) {
  
  consistency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.StateRequestOptions.consistency)
}
inline void StateRequestOptions::set_consistency(const char* value) {
  
  consistency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.StateRequestOptions.consistency)
}
inline void StateRequestOptions::set_consistency(const char* value, size_t size) {
  
  consistency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.StateRequestOptions.consistency)
}
inline ::std::string* StateRequestOptions::mutable_consistency() {
  
  // @@protoc_insertion_point(field_mutable:dapr.StateRequestOptions.consistency)
  return consistency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateRequestOptions::release_consistency() {
  // @@protoc_insertion_point(field_release:dapr.StateRequestOptions.consistency)
  
  return consistency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateRequestOptions::set_allocated_consistency(::std::string* consistency) {
  if (consistency != NULL) {
    
  } else {
    
  }
  consistency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consistency);
  // @@protoc_insertion_point(field_set_allocated:dapr.StateRequestOptions.consistency)
}

// optional .dapr.StateRetryPolicy retryPolicy = 3;
inline bool StateRequestOptions::has_retrypolicy() const {
  return !_is_default_instance_ && retrypolicy_ != NULL;
}
inline void StateRequestOptions::clear_retrypolicy() {
  if (GetArenaNoVirtual() == NULL && retrypolicy_ != NULL) delete retrypolicy_;
  retrypolicy_ = NULL;
}
inline const ::dapr::StateRetryPolicy& StateRequestOptions::retrypolicy() const {
  // @@protoc_insertion_point(field_get:dapr.StateRequestOptions.retryPolicy)
  return retrypolicy_ != NULL ? *retrypolicy_ : *default_instance_->retrypolicy_;
}
inline ::dapr::StateRetryPolicy* StateRequestOptions::mutable_retrypolicy() {
  
  if (retrypolicy_ == NULL) {
    retrypolicy_ = new ::dapr::StateRetryPolicy;
  }
  // @@protoc_insertion_point(field_mutable:dapr.StateRequestOptions.retryPolicy)
  return retrypolicy_;
}
inline ::dapr::StateRetryPolicy* StateRequestOptions::release_retrypolicy() {
  // @@protoc_insertion_point(field_release:dapr.StateRequestOptions.retryPolicy)
  
  ::dapr::StateRetryPolicy* temp = retrypolicy_;
  retrypolicy_ = NULL;
  return temp;
}
inline void StateRequestOptions::set_allocated_retrypolicy(::dapr::StateRetryPolicy* retrypolicy) {
  delete retrypolicy_;
  retrypolicy_ = retrypolicy;
  if (retrypolicy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.StateRequestOptions.retryPolicy)
}

// -------------------------------------------------------------------

// StateRetryPolicy

// optional int32 threshold = 1;
inline void StateRetryPolicy::clear_threshold() {
  threshold_ = 0;
}
inline ::google::protobuf::int32 StateRetryPolicy::threshold() const {
  // @@protoc_insertion_point(field_get:dapr.StateRetryPolicy.threshold)
  return threshold_;
}
inline void StateRetryPolicy::set_threshold(::google::protobuf::int32 value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:dapr.StateRetryPolicy.threshold)
}

// optional string pattern = 2;
inline void StateRetryPolicy::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateRetryPolicy::pattern() const {
  // @@protoc_insertion_point(field_get:dapr.StateRetryPolicy.pattern)
  return pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateRetryPolicy::set_pattern(const ::std::string& value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dapr.StateRetryPolicy.pattern)
}
inline void StateRetryPolicy::set_pattern(const char* value) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dapr.StateRetryPolicy.pattern)
}
inline void StateRetryPolicy::set_pattern(const char* value, size_t size) {
  
  pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dapr.StateRetryPolicy.pattern)
}
inline ::std::string* StateRetryPolicy::mutable_pattern() {
  
  // @@protoc_insertion_point(field_mutable:dapr.StateRetryPolicy.pattern)
  return pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateRetryPolicy::release_pattern() {
  // @@protoc_insertion_point(field_release:dapr.StateRetryPolicy.pattern)
  
  return pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateRetryPolicy::set_allocated_pattern(::std::string* pattern) {
  if (pattern != NULL) {
    
  } else {
    
  }
  pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:dapr.StateRetryPolicy.pattern)
}

// optional .google.protobuf.Duration interval = 3;
inline bool StateRetryPolicy::has_interval() const {
  return !_is_default_instance_ && interval_ != NULL;
}
inline void StateRetryPolicy::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}
inline const ::google::protobuf::Duration& StateRetryPolicy::interval() const {
  // @@protoc_insertion_point(field_get:dapr.StateRetryPolicy.interval)
  return interval_ != NULL ? *interval_ : *default_instance_->interval_;
}
inline ::google::protobuf::Duration* StateRetryPolicy::mutable_interval() {
  
  if (interval_ == NULL) {
    interval_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:dapr.StateRetryPolicy.interval)
  return interval_;
}
inline ::google::protobuf::Duration* StateRetryPolicy::release_interval() {
  // @@protoc_insertion_point(field_release:dapr.StateRetryPolicy.interval)
  
  ::google::protobuf::Duration* temp = interval_;
  interval_ = NULL;
  return temp;
}
inline void StateRetryPolicy::set_allocated_interval(::google::protobuf::Duration* interval) {
  delete interval_;
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dapr.StateRetryPolicy.interval)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dapr

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dapr_2eproto__INCLUDED
